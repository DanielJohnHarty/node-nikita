// Generated by CoffeeScript 1.10.0
var fs, misc;

module.exports = function(options, callback) {
  var content, do_get, do_write, merge, ssh, target;
  options.log({
    message: "Entering ini",
    level: 'DEBUG',
    module: 'mecano/lib/write_ini'
  });
  merge = options.merge, target = options.target, content = options.content, ssh = options.ssh;
  if (options.clean == null) {
    options.clean = true;
  }
  if (!content) {
    return callback(new Error('Missing content'));
  }
  if (!target) {
    return callback(new Error('Missing target'));
  }
  do_get = function() {
    if (!merge) {
      return do_write();
    }
    options.log({
      message: "Get content for merge",
      level: 'DEBUG',
      module: 'mecano/lib/write_ini'
    });
    return fs.exists(ssh, target, function(err, exists) {
      if (err) {
        return callback(err);
      }
      if (!exists) {
        return do_write();
      }
      return fs.readFile(ssh, target, 'ascii', function(err, c) {
        var parse;
        if (err && err.code !== 'ENOENT') {
          return callback(err);
        }
        content = misc.ini.clean(content, true);
        parse = options.parse || misc.ini.parse;
        content = misc.merge(parse(c, options), content);
        return do_write();
      });
    });
  };
  do_write = (function(_this) {
    return function() {
      var stringify;
      if (options.clean) {
        options.log({
          message: "Clean content",
          level: 'INFO',
          module: 'mecano/lib/write_ini'
        });
        misc.ini.clean(content);
      }
      options.log({
        message: "Serialize content",
        level: 'DEBUG',
        module: 'mecano/lib/write_ini'
      });
      stringify = options.stringify || misc.ini.stringify;
      options.content = stringify(content, options);
      return _this.write(options, function(err, written) {
        return callback(err, written);
      });
    };
  })(this);
  return do_get();
};

fs = require('ssh2-fs');

misc = require('../misc');
