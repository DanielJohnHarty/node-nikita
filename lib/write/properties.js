// Generated by CoffeeScript 1.10.0
var fs, quote, string;

module.exports = function(options) {
  var properties;
  options.log({
    message: "Entering write_properties",
    level: 'DEBUG',
    module: 'mecano/lib/write_properties'
  });
  if (!options.destination) {
    throw Error("Missing argument options.destination");
  }
  if (options.separator == null) {
    options.separator = '=';
  }
  if (options.content == null) {
    options.content = {};
  }
  properties = options.merge ? {} : options.content;
  options.log({
    message: "Merging \"" + (options.merge ? 'true' : 'false') + "\"",
    level: 'DEBUG',
    module: 'mecano/lib/write_properties'
  });
  this.call({
    "if": options.merge,
    handler: function(_, callback) {
      options.log({
        message: "Reading destination \"" + options.destination + "\"",
        level: 'DEBUG',
        module: 'mecano/lib/write_properties'
      });
      return fs.readFile(options.ssh, options.destination, 'utf8', function(err, data) {
        var i, k, len, line, lines, ref, ref1, v;
        if (err) {
          return callback(err);
        }
        lines = string.lines(data);
        for (i = 0, len = lines.length; i < len; i++) {
          line = lines[i];
          if (/^#/.test(line)) {
            continue;
          }
          if (/^\w*$/.test(line)) {
            continue;
          }
          ref = RegExp("^(.*?)" + (quote(options.separator)) + "(.*)$").exec(line), _ = ref[0], k = ref[1], v = ref[2];
          properties[k] = v;
        }
        ref1 = options.content;
        for (k in ref1) {
          v = ref1[k];
          if (v === null) {
            delete properties[k];
          } else {
            properties[k] = v;
          }
        }
        return callback();
      });
    }
  });
  return this.call(function() {
    var data, k, v;
    data = (function() {
      var results;
      results = [];
      for (k in properties) {
        v = properties[k];
        results.push("" + k + options.separator + v);
      }
      return results;
    })();
    data = data.join('\n');
    return this.write({
      destination: "" + options.destination,
      content: data,
      backup: options.backup,
      eof: true
    });
  });
};

fs = require('ssh2-fs');

quote = require('regexp-quote');

string = require('../misc/string');
