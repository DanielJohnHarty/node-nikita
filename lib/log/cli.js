// Generated by CoffeeScript 1.11.1
var pad, stream;

module.exports = {
  ssh: null,
  handler: function(options) {
    var base, base1, ids;
    if (options.argument != null) {
      if (options.enabled == null) {
        options.enabled = options.argument;
      }
    }
    if (options.enabled == null) {
      options.enabled = true;
    }
    if (options.stream == null) {
      options.stream = process.stdout;
    }
    if (options.end == null) {
      options.end = false;
    }
    if (options.divider == null) {
      options.divider = ' : ';
    }
    if (options.depth == null) {
      options.depth = false;
    }
    if (options.pad == null) {
      options.pad = {};
    }
    if (typeof options.separator === 'string') {
      options.separator = {
        host: options.separator,
        header: options.separator
      };
    }
    if (options.separator == null) {
      options.separator = {};
    }
    if ((base = options.separator).host == null) {
      base.host = options.pad.host == null ? '   ' : ' ';
    }
    if ((base1 = options.separator).header == null) {
      base1.header = options.pad.header == null ? '   ' : ' ';
    }
    if (options.host == null) {
      options.host = options.ssh ? options.ssh.config.host : 'localhost';
    }
    ids = {};
    return this.call(options, stream, {
      serializer: {
        'diff': null,
        'end': function() {
          return "FINISH\n";
        },
        'error': function(err) {
          return "ERROR";
        },
        'header': function(log) {
          if (!options.enabled) {
            return;
          }
          if (options.depth && options.depth < log.headers.length) {
            return;
          }
          ids[log.index] = log;
          return null;
        },
        "handled": function(log) {
          var header, host, status;
          status = log.status ? '+' : '-';
          log = ids[log.index];
          if (!log) {
            return null;
          }
          delete ids[log.index];
          host = options.host;
          header = log.headers.join(options.divider);
          if (options.pad.host) {
            host = pad(host, options.pad.host);
          }
          if (options.pad.header) {
            header = pad(header, options.pad.header);
          }
          return "" + host + options.separator.host + header + options.separator.header + status + "\n";
        },
        'stdin': null,
        'stderr': null,
        'stdout': null,
        'text': null
      }
    });
  }
};

pad = require('pad');

stream = require('./stream');
