// Generated by CoffeeScript 2.3.1
// # `nikita.log`

// Send a log message.

// ## Options

// * `level` (string)   
//   Set the message log level, recommended values are 'DEBUG', 'INFO', 'WARN' and
//   'ERROR'.
// * `module` (string)   
//   The module name from where the message was issued.
// * `time` (integer)   
//   The timestamp associated with the message, default to the current timestamp
//   when the log action is called.

// ## Source Code
var path;

module.exports = {
  ssh: false,
  get: true,
  cascade: {
    action: false,
    cascade: false,
    get: false,
    // log: false # TODO shall be removed after the deprecation of log
    retry: false,
    ssh: false,
    shy: true
  },
  handler: function({options}) {
    var file, frame, line, msg, parent, ref, ref1, ref2, stackTrace;
    if (options.argument != null) {
      // Options
      options.message = options.argument;
    }
    if (options.level == null) {
      options.level = 'INFO';
    }
    if (options.time == null) {
      options.time = Date.now();
    }
    if (options.module == null) {
      options.module = void 0;
    }
    if (options.type == null) {
      options.type = 'text';
    }
    options.depth = options.depth - 1;
    stackTrace = require('stack-trace');
    frame = stackTrace.get()[1];
    file = path.basename(frame.getFileName());
    line = frame.getLineNumber();
    options.file = file;
    options.line = line;
    parent = options.parent;
    delete options.parent;
    if (typeof options.log === 'function') {
      if (parent != null) {
        parent.log(options);
      }
    } else {
      if ((parent != null ? parent.log : void 0) === false) {
        return;
      }
    }
    if (options.debug) {
      if ((ref = options.type) === 'text' || ref === 'stdin' || ref === 'stdout_stream' || ref === 'stderr_stream') {
        if (!(((ref1 = options.type) === 'stdout_stream' || ref1 === 'stderr_stream') && options.message === null)) {
          msg = ((ref2 = options.message) != null ? ref2.toString : void 0) != null ? options.message.toString() : options.message;
          msg = `[${options.depth}.${options.level} ${options.module}] ${JSON.stringify(msg)}`;
          msg = (function() {
            switch (options.type) {
              case 'stdin':
                return `\x1b[33m${msg}\x1b[39m`;
              case 'stdout_stream':
                return `\x1b[36m${msg}\x1b[39m`;
              case 'stderr_stream':
                return `\x1b[35m${msg}\x1b[39m`;
              default:
                return `\x1b[32m${msg}\x1b[39m`;
            }
          })();
          if (options.debug === 'stdout') {
            process.stdout.write(`${msg}\n`);
          } else {
            process.stderr.write(`${msg}\n`);
          }
        }
      }
    }
    return this.emit(options.type, options); //unless log_disabled
  }
};


// ## Dependencies
path = require('path');
