// Generated by CoffeeScript 1.10.0
var fs, mustache, path;

module.exports = {
  ssh: null,
  handler: function(options) {
    var dateformat, ref;
    if (options.archive == null) {
      options.archive = false;
    }
    if (options.basedir == null) {
      options.basedir = 'log';
    }
    options.basedir = path.resolve(options.basedir);
    if (options.filename == null) {
      options.filename = "{{shortname}}.log";
    }
    if (!options.serializer) {
      throw Error("Missing option: serializer");
    }
    if (options.shortname == null) {
      options.shortname = ((ref = options.ssh) != null ? ref.config.host : void 0) || 'localhost';
    }
    options.basedir = mustache.render(options.basedir, options);
    options.filename = mustache.render(options.filename, options);
    if (!options.archive) {
      if (options._logdir == null) {
        options._logdir = path.join(options.basedir);
      }
    } else {
      if (options._latestdir == null) {
        options._latestdir = path.join(options.basedir, 'latest');
      }
      dateformat = (new Date).toJSON();
      if (options._logdir == null) {
        options._logdir = path.join(options.basedir, dateformat);
      }
    }
    this.mkdir(options.basedir);
    this.mkdir({
      shy: true
    }, options._logdir);
    if (options.archive) {
      this.link({
        shy: true,
        source: options._logdir,
        target: options._latestdir
      });
    }
    return this.call(function() {
      var close, out, stdouting;
      out = fs.createWriteStream(path.resolve(options._logdir, options.filename));
      stdouting = 0;
      this.on('text', function(log) {
        if (!options.serializer.text) {
          return;
        }
        return out.write(options.serializer.text(log));
      });
      this.on('header', function(log) {
        if (!options.serializer.header) {
          return;
        }
        return out.write(options.serializer.header(log));
      });
      this.on('stdin', function(log) {
        if (!options.serializer.stdin) {
          return;
        }
        return out.write(options.serializer.stdin(log));
      });
      this.on('diff', function(log) {
        if (!options.serializer.diff) {
          return;
        }
        return out.write(options.serializer.diff(log));
      });
      this.on('stdout_stream', function(log) {
        if (!options.serializer.stdout_stream) {
          return;
        }
        return out.write(options.serializer.stdout_stream(log));
      });
      this.on('stderr', function(log) {
        if (!options.serializer.stderr) {
          return;
        }
        return out.write(options.serializer.stderr(log));
      });
      close = function() {
        return setTimeout((function() {
          return out.close();
        }), 100);
      };
      this.on('end', function() {
        console.log('end');
        if (options.serializer.end) {
          out.write(options.serializer.end(log));
        }
        return close();
      });
      return this.on('error', function(err) {
        console.log('error');
        if (options.serializer.error) {
          out.write(options.serializer.error(log));
        }
        return close();
      });
    });
  }
};

fs = require('fs');

path = require('path');

mustache = require('mustache');
