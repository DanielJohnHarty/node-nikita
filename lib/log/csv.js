// Generated by CoffeeScript 1.12.5
var log_fs;

module.exports = {
  ssh: null,
  handler: function(options) {
    var k, ref, stdouting, v;
    if (options.log_csv == null) {
      options.log_csv = {};
    }
    ref = options.log_csv;
    for (k in ref) {
      v = ref[k];
      options[k] = v;
    }
    stdouting = 0;
    return this.call(options, log_fs, {
      serializer: {
        'diff': function(log) {
          return log.type + "," + log.level + "," + (JSON.stringify(log.message)) + ",\n";
        },
        'end': function() {
          return "lifecycle,INFO,Finished with success,\n";
        },
        'error': function(err) {
          var content, error, i, len, print, ref1;
          content = [];
          content.push("lifecycle,ERROR,Finished with error,\n");
          print = function(err) {
            return content.push("lifecycle,ERROR," + (err.stack || err.message) + ",\n");
          };
          if (!err.errors) {
            print(err);
          } else if (err.errors) {
            ref1 = err.errors;
            for (i = 0, len = ref1.length; i < len; i++) {
              error = ref1[i];
              print(error);
            }
          }
          return content.join();
        },
        'header': function(log) {
          return log.type + ",,," + log.header + "\n";
        },
        'stdin': function(log) {
          return log.type + "," + log.level + "," + (JSON.stringify(log.message)) + ",\n";
        },
        'stderr': function(log) {
          return log.type + "," + log.level + "," + (JSON.stringify(log.message)) + ",\n";
        },
        'stdout': function(log) {
          return log.type + "," + log.level + "," + (JSON.stringify(log.message)) + ",\n";
        },
        'text': function(log) {
          return log.type + "," + log.level + "," + (JSON.stringify(log.message)) + ",\n";
        }
      }
    });
  }
};

log_fs = require('./fs');
