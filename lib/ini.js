// Generated by CoffeeScript 1.8.0
var fs, misc, wrap, write;

module.exports = function(goptions, options, callback) {
  return wrap(arguments, function(options, next) {
    var content, destination, do_get, do_write, merge, ssh;
    if (typeof options.log === "function") {
      options.log("Mecano `ini`");
    }
    merge = options.merge, destination = options.destination, content = options.content, ssh = options.ssh;
    if (options.clean == null) {
      options.clean = true;
    }
    if (!content) {
      return next(new Error('Missing content'));
    }
    if (!destination) {
      return next(new Error('Missing destination'));
    }
    do_get = function() {
      if (!merge) {
        return do_write();
      }
      if (typeof options.log === "function") {
        options.log("Mecano `ini`: get content for merge");
      }
      return fs.exists(ssh, destination, function(err, exists) {
        if (err) {
          return next(err);
        }
        if (!exists) {
          return do_write();
        }
        return fs.readFile(ssh, destination, 'ascii', function(err, c) {
          var parse;
          if (err && err.code !== 'ENOENT') {
            return next(err);
          }
          content = misc.ini.clean(content, true);
          parse = options.parse || misc.ini.parse;
          content = misc.merge(parse(c, options), content);
          return do_write();
        });
      });
    };
    do_write = function() {
      var stringify;
      if (typeof options.log === "function") {
        options.log("Mecano `ini`: write");
      }
      if (options.clean) {
        misc.ini.clean(content);
      }
      stringify = options.stringify || misc.ini.stringify;
      options.content = stringify(content, options);
      return write(options, function(err, written) {
        return next(err, written);
      });
    };
    return do_get();
  });
};

fs = require('ssh2-fs');

misc = require('./misc');

wrap = require('./misc/wrap');

write = require('./write');
