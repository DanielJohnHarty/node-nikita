// Generated by CoffeeScript 1.9.1
var execute, service_startup, string, wrap,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = function(options, callback) {
  return wrap(this, arguments, function(options, callback) {
    var chkname, do_action, do_finish, do_install, do_installed, do_started, do_startuped, do_updates, installed, modified, pkgname, srvname, updates;
    installed = updates = null;
    pkgname = options.yum_name || options.name;
    chkname = options.chk_name || options.srv_name || options.name;
    srvname = options.srv_name || options.chk_name || options.name;
    modified = false;
    if (options.cache) {
      if (options.db == null) {
        options.db = {};
      }
      installed = options.db['mecano:execute:installed'];
      updates = options.db['mecano:execute:updates'];
    }
    if (typeof options.action === 'string') {
      options.action = options.action.split(',');
    }
    do_installed = function() {
      var cache, decide;
      if (!pkgname) {
        return do_startuped();
      }
      cache = function() {
        var c;
        if (typeof options.log === "function") {
          options.log("Mecano `service: list installed [DEBUG]");
        }
        c = options.cache ? '-C' : '';
        return execute({
          ssh: options.ssh,
          cmd: "yum " + c + " list installed",
          code_skipped: 1,
          log: options.log
        }, function(err, executed, stdout) {
          var i, len, pkg, start;
          if (err) {
            return callback(err);
          }
          stdout = string.lines(stdout);
          start = false;
          installed = [];
          for (i = 0, len = stdout.length; i < len; i++) {
            pkg = stdout[i];
            if (pkg.trim() === 'Installed Packages') {
              start = true;
            }
            if (!start) {
              continue;
            }
            if (pkg = /^([^\. ]+?)\./.exec(pkg)) {
              installed.push(pkg[1]);
            }
          }
          return decide();
        });
      };
      decide = function() {
        if (installed.indexOf(pkgname) !== -1) {
          return do_updates();
        } else {
          return do_install();
        }
      };
      if (installed) {
        return decide();
      } else {
        return cache();
      }
    };
    do_updates = function() {
      var cache, decide;
      cache = function() {
        var c;
        if (typeof options.log === "function") {
          options.log("Mecano `service`: list available updates [DEBUG]");
        }
        c = options.cache ? '-C' : '';
        return execute({
          ssh: options.ssh,
          cmd: "yum " + c + " list updates",
          code_skipped: 1,
          log: options.log,
          stdout: options.stdout,
          stderr: options.stderr
        }, function(err, executed, stdout) {
          var i, len, pkg, start;
          if (err) {
            return callback(err);
          }
          stdout = string.lines(stdout);
          start = false;
          updates = [];
          for (i = 0, len = stdout.length; i < len; i++) {
            pkg = stdout[i];
            if (pkg.trim() === 'Updated Packages') {
              start = true;
            }
            if (!start) {
              continue;
            }
            if (pkg = /^([^\. ]+?)\./.exec(pkg)) {
              updates.push(pkg[1]);
            }
          }
          return decide();
        });
      };
      decide = function() {
        if (updates.indexOf(pkgname) !== -1) {
          return do_install();
        } else {
          if (typeof options.log === "function") {
            options.log("Mecano `service`: No available update for '" + pkgname + "' [INFO]");
          }
          return do_startuped();
        }
      };
      if (updates) {
        return decide();
      } else {
        return cache();
      }
    };
    do_install = function() {
      if (typeof options.log === "function") {
        options.log("Mecano `service`: install '" + pkgname + "' [INFO]");
      }
      return execute({
        ssh: options.ssh,
        cmd: "yum install -y " + pkgname,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, succeed) {
        var installedIndex, updatesIndex;
        if (err) {
          return callback(err);
        }
        installedIndex = installed.indexOf(pkgname);
        if (installedIndex === -1) {
          installed.push(pkgname);
        }
        if (updates) {
          updatesIndex = updates.indexOf(pkgname);
          if (updatesIndex !== -1) {
            updates.splice(updatesIndex, 1);
          }
        }
        if (!succeed) {
          if (typeof options.log === "function") {
            options.log("Mecano `service`: No package available for '" + pkgname + "' [ERROR]");
          }
          return callback(new Error("No package available for '" + pkgname + "'."));
        }
        if (installedIndex !== -1) {
          modified = true;
        }
        return do_startuped();
      });
    };
    do_startuped = function() {
      if (options.startup == null) {
        return do_started();
      }
      return service_startup({
        ssh: options.ssh,
        name: chkname,
        startup: options.startup,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr,
        "if": options.startup != null
      }, function(err, startuped) {
        if (err) {
          return callback(err);
        }
        modified = startuped;
        return do_started();
      });
    };
    do_started = function() {
      if (!options.action) {
        return do_finish();
      }
      if (typeof options.log === "function") {
        options.log("Mecano `service`: check if started");
      }
      return execute({
        ssh: options.ssh,
        cmd: "service " + srvname + " status",
        code_skipped: [3, 1],
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, started) {
        if (err) {
          return callback(err);
        }
        if (started) {
          if (indexOf.call(options.action, 'stop') >= 0) {
            return do_action('stop');
          }
          if (indexOf.call(options.action, 'restart') >= 0) {
            return do_action('restart');
          }
        } else {
          if (indexOf.call(options.action, 'start') >= 0) {
            return do_action('start');
          }
        }
        return do_finish();
      });
    };
    do_action = function(action) {
      if (!options.action) {
        return do_finish();
      }
      if (typeof options.log === "function") {
        options.log("Mecano `service`: " + action + " service");
      }
      return execute({
        ssh: options.ssh,
        cmd: "service " + srvname + " " + action,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, executed) {
        if (err) {
          return callback(err);
        }
        modified = true;
        return do_finish();
      });
    };
    do_finish = function() {
      if (options.cache) {
        options.db['mecano:execute:installed'] = installed;
        options.db['mecano:execute:updates'] = updates;
      }
      return callback(null, modified);
    };
    return do_installed();
  });
};

execute = require('./execute');

service_startup = require('./service_startup');

string = require('./misc/string');

wrap = require('./misc/wrap');
