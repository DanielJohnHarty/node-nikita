// Generated by CoffeeScript 1.8.0
var child, conditions, each, execute, fs, misc, path, wrap;

module.exports = function(goptions, options, callback) {
  return wrap(arguments, function(options, next) {
    var checkout, clone, log, prepare, rev;
    if (options.revision == null) {
      options.revision = 'HEAD';
    }
    rev = null;
    prepare = function() {
      return fs.exists(options.ssh, options.destination, function(err, exists) {
        var gitDir;
        if (err) {
          return next(err);
        }
        if (!exists) {
          return clone();
        }
        gitDir = "" + options.destination + "/.git";
        return fs.exists(options.ssh, gitDir, function(err, exists) {
          if (!exists) {
            return next(new Error("Not a git repository"));
          }
          return log();
        });
      });
    };
    clone = function() {
      return execute({
        ssh: options.ssh,
        cmd: "git clone " + options.source + " " + options.destination,
        cwd: path.dirname(options.destination),
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, executed, stdout, stderr) {
        if (err) {
          return next(err);
        }
        return checkout();
      });
    };
    log = function() {
      return execute({
        ssh: options.ssh,
        cmd: "git log --pretty=format:'%H' -n 1",
        cwd: options.destination,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, executed, stdout, stderr) {
        var current;
        if (err) {
          return next(err);
        }
        current = stdout.trim();
        return execute({
          ssh: options.ssh,
          cmd: "git rev-list --max-count=1 " + options.revision,
          cwd: options.destination,
          log: options.log,
          stdout: options.stdout,
          stderr: options.stderr
        }, function(err, executed, stdout, stderr) {
          if (err) {
            return next(err);
          }
          if (stdout.trim() !== current) {
            return checkout();
          } else {
            return next();
          }
        });
      });
    };
    checkout = function() {
      return execute({
        ssh: options.ssh,
        cmd: "git checkout " + options.revision,
        cwd: options.destination,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err) {
        if (err) {
          return next(err);
        }
        return next(null, true);
      });
    };
    return prepare();
  });
};

fs = require('ssh2-fs');

path = require('path');

each = require('each');

misc = require('./misc');

wrap = require('./misc/wrap');

conditions = require('./misc/conditions');

child = require('./misc/child');

execute = require('./execute');
