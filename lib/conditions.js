// Generated by CoffeeScript 1.4.0
var each, fs, path, _ref;

fs = require('fs');

path = require('path');

if ((_ref = fs.exists) == null) {
  fs.exists = path.exists;
}

each = require('each');

/*
Conditionnal properties
*/


module.exports = {
  /*
  
    `all(options, failed, succeed)` Run all conditions
    ---------------------------------------------------
  
    `opts`
    Command options
  
    `failed`
    Failed callback, called when a condition failed
  
    `succeed`
    Succeed callback, only called if all the condition succeed
  */

  all: function(options, failed, succeed) {
    return each([this["if"], this.if_exists, this.not_if_exists]).on('item', function(condition, next) {
      return condition(options, failed, next);
    }).on('error', failed).on('end', succeed);
  },
  /*
    `if` Run action for a user defined condition
    --------------------------------------------
  
    Work on the property `if` in `options`. When `if` 
    is a boolean, its value determine to the output. If it's 
    a callback, the function is called with the `options`, 
    `failed` and `succeed` arguments. If it'a an array, all its element
    must positively resolve for the condition to pass.
  
    Updating the content of a file if we are the owner
  
        mecano.render
          source:'./file'
          if: (options, failed, succeed) ->
            fs.stat options.source, (err, stat) ->
              # File does not exists
              return failed err if err
              # Failed if we dont own the file
              return  failed() unless stat.uid is process.getuid()
              # Succeed if we own the file
              succeed()
  */

  "if": function(options, failed, succeed) {
    var ok;
    if (options["if"] == null) {
      return succeed();
    }
    ok = true;
    return each(options["if"]).on('item', function(si, next) {
      if (!ok) {
        return next();
      }
      if (typeof si === 'boolean') {
        if (!si) {
          ok = false;
        }
        return next();
      } else if (typeof si === 'function') {
        return si(options, (function() {
          ok = false;
          return next.apply(null, arguments);
        }), next);
      }
    }).on('both', function(err) {
      if (err || !ok) {
        return failed(err);
      }
      return succeed();
    });
  },
  /*
    
    `if_exists` Run action if a file exists
    ----------------------------------------
  
    Work on the property `if_exists` in `options`. The value may 
    be a file path or an array of file paths.
  
    The callback `succeed` is called if all the provided paths 
    exists otherwise the callback `failed` is called.
  */

  if_exists: function(options, failed, succeed) {
    if (options.if_exists == null) {
      return succeed();
    }
    return each(options.if_exists).on('item', function(if_exists, next) {
      return fs.exists(if_exists, function(exists) {
        if (exists) {
          return next();
        } else {
          return failed();
        }
      });
    }).on('end', succeed);
  },
  /*
  
    `not_if_exists` Skip action if a file exists
    ---------------------------------------------
  
    Work on the property `not_if_exists` in `options`. The value may 
    be a file path or an array of file paths.
  
    The callback `succeed` is called if none of the provided paths 
    exists otherwise the callback `failed` is called.
  */

  not_if_exists: function(options, failed, succeed) {
    if (options.not_if_exists == null) {
      return succeed();
    }
    return each(options.not_if_exists).on('item', function(not_if_exists, next) {
      return fs.exists(not_if_exists, function(exists) {
        if (exists) {
          return failed();
        } else {
          return next();
        }
      });
    }).on('end', succeed);
  }
};
