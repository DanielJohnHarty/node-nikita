// Generated by CoffeeScript 1.9.1
var execute, wrap;

module.exports = function(options, callback) {
  return wrap(arguments, function(options, callback) {
    var _, entry, i, j, k, ldif, len, len1, modified, ref, ref1, v, vv;
    modified = false;
    if (!options.entry) {
      return callback(Error("Mecano `ldap_add`: required property 'entry'"));
    }
    if (!Array.isArray(options.entry)) {
      options.entry = [options.entry];
    }
    ldif = '';
    ref = options.entry;
    for (i = 0, len = ref.length; i < len; i++) {
      entry = ref[i];
      if (!entry.dn) {
        return callback(Error("Mecano `ldap_add`: required property 'dn'"));
      }
      ldif += '\n';
      ldif += "dn: " + entry.dn + "\n";
      ref1 = /^(.*?)=(.+?),.*$/.exec(entry.dn), _ = ref1[0], k = ref1[1], v = ref1[2];
      ldif += k + ": " + v + "\n";
      for (k in entry) {
        v = entry[k];
        if (k === 'dn') {
          continue;
        }
        if (!Array.isArray(v)) {
          v = [v];
        }
        for (j = 0, len1 = v.length; j < len1; j++) {
          vv = v[j];
          ldif += k + ": " + vv + "\n";
        }
      }
    }
    return execute({
      cmd: "ldapadd -c -H " + options.url + " -D " + options.binddn + " -w " + options.passwd + " <<-EOF\n" + ldif + "\nEOF",
      code_skipped: 68,
      ssh: options.ssh,
      log: options.log,
      stdout: options.stdout,
      stderr: options.stderr
    }, function(err, executed, stdout, stderr) {
      var added, ref2;
      if (err) {
        return callback(err);
      }
      modified = ((ref2 = stderr.match(/Already exists/g)) != null ? ref2.length : void 0) !== stdout.match(/adding new entry/g).length;
      added = modified;
      return callback(err, modified, added);
    });
  });
};

execute = require('./execute');

wrap = require('./misc/wrap');
