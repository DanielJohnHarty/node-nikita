// Generated by CoffeeScript 1.8.0
var execute, fs, path, wrap;

module.exports = function(goptions, options, callback) {
  return wrap(arguments, function(options, next) {
    var creates, destination, ext, extract, format, stat, success, _ref;
    if (typeof options.log === "function") {
      options.log("Mecano `extract`");
    }
    if (!options.source) {
      return next(new Error("Missing source: " + options.source));
    }
    destination = (_ref = options.destination) != null ? _ref : path.dirname(options.source);
    if (options.format != null) {
      format = options.format;
    } else {
      if (/\.(tar\.gz|tgz)$/.test(options.source)) {
        format = 'tgz';
      } else if (/\.tar$/.test(options.source)) {
        format = 'tar';
      } else if (/\.zip$/.test(options.source)) {
        format = 'zip';
      } else {
        ext = path.extname(options.source);
        return next(Error("Unsupported extension, got " + (JSON.stringify(ext))));
      }
    }
    stat = function() {
      return fs.stat(null, options.source, function(err, stat) {
        if (err) {
          return next(Error("File does not exist: " + options.source));
        }
        if (!stat.isFile()) {
          return next(Error("Not a File: " + options.source));
        }
        return extract();
      });
    };
    extract = function() {
      var cmd;
      cmd = null;
      switch (format) {
        case 'tgz':
          cmd = "tar xzf " + options.source + " -C " + destination;
          break;
        case 'tar':
          cmd = "tar xf " + options.source + " -C " + destination;
          break;
        case 'zip':
          cmd = "unzip -u " + options.source + " -d " + destination;
      }
      return execute({
        ssh: options.ssh,
        cmd: cmd,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, created) {
        if (err) {
          return next(err);
        }
        return creates();
      });
    };
    creates = function() {
      if (options.creates == null) {
        return success();
      }
      return fs.exists(options.ssh, options.creates, function(err, exists) {
        if (!exists) {
          return next(new Error("Failed to create '" + (path.basename(options.creates)) + "'"));
        }
        return success();
      });
    };
    success = function() {
      return next(null, true);
    };
    return stat();
  });
};

fs = require('ssh2-fs');

path = require('path');

execute = require('./execute');

wrap = require('./misc/wrap');
