// Generated by CoffeeScript 1.8.0
var child, conditions, each, execute, fs, misc, path;

module.exports = function(goptions, options, callback) {
  var _ref;
  _ref = misc.args(arguments), goptions = _ref[0], options = _ref[1], callback = _ref[2];
  return misc.options(options, function(err, options) {
    var extracted;
    if (err) {
      return callback(err);
    }
    extracted = 0;
    return each(options).parallel(goptions.parallel).on('item', function(options, next) {
      var creates, destination, ext, extract, format, success, _ref1;
      if (typeof options.log === "function") {
        options.log("Mecano `extract`");
      }
      if (!options.source) {
        return next(new Error("Missing source: " + options.source));
      }
      destination = (_ref1 = options.destination) != null ? _ref1 : path.dirname(options.source);
      if (options.format != null) {
        format = options.format;
      } else {
        if (/\.(tar\.gz|tgz)$/.test(options.source)) {
          format = 'tgz';
        } else if (/\.tar$/.test(options.source)) {
          format = 'tar';
        } else if (/\.zip$/.test(options.source)) {
          format = 'zip';
        } else {
          ext = path.extname(options.source);
          return next(Error("Unsupported extension, got " + (JSON.stringify(ext))));
        }
      }
      extract = function() {
        var cmd;
        cmd = null;
        switch (format) {
          case 'tgz':
            cmd = "tar xzf " + options.source + " -C " + destination;
            break;
          case 'tar':
            cmd = "tar xf " + options.source + " -C " + destination;
            break;
          case 'zip':
            cmd = "unzip -u " + options.source + " -d " + destination;
        }
        return execute({
          ssh: options.ssh,
          cmd: cmd,
          log: options.log,
          stdout: options.stdout,
          stderr: options.stderr
        }, function(err, created) {
          if (err) {
            return next(err);
          }
          return creates();
        });
      };
      creates = function() {
        if (options.creates == null) {
          return success();
        }
        return fs.exists(options.ssh, options.creates, function(err, exists) {
          if (!exists) {
            return next(new Error("Failed to create '" + (path.basename(options.creates)) + "'"));
          }
          return success();
        });
      };
      success = function() {
        extracted++;
        return next();
      };
      if (typeof options.should_exist === 'undefined') {
        options.should_exist = options.source;
      }
      return conditions.all(options, next, extract);
    }).on('both', function(err) {
      return callback(err, extracted);
    });
  });
};

fs = require('ssh2-fs');

path = require('path');

each = require('each');

execute = require('./execute');

misc = require('./misc');

conditions = require('./misc/conditions');

child = require('./misc/child');
