// Generated by CoffeeScript 2.3.1
// # `nikita.file.hash`

// Retrieve the hash of a file or a directory in hexadecimal 
// form.

// If the target is a directory, the returned hash 
// is the sum of all the hashs of the files it recursively 
// contains. The default algorithm to compute the hash is md5.

// If the target is a link, the returned hash is of the linked file.

// It is possible to use to action to assert the target file by passing a `hash`
// used for comparaison.

// ## Options

// * `algo` (string)   
//   Any algorythm supported by `openssl`; default to "md5".
// * `hash` (string)   
//   Expected hash to validate.
// * `target` (string)   
//   The file or directory to compute the hash from.

// ## Callback information

// * `hash`   
//   The hash of the file or directory identified by the "target" option.
var misc;

module.exports = {
  shy: false,
  handler: function({options}, callback) {
    if (options.algo == null) {
      options.algo = 'md5';
    }
    if (options.argument != null) {
      options.target = options.argument;
    }
    if (!options.target) {
      throw Error(`Required Option: target, got ${JSON.stringify(options.target)}`);
    }
    this.fs.stat({
      unless: options.stats,
      target: options.target
    }, function(err, {stats}) {
      if (err) {
        throw err;
      }
      options.stats = stats;
      if (!misc.stats.isFile(stats.mode)) {
        throw Error('Unsupported file type');
      }
    });
    this.system.execute({
      cmd: `which openssl >/dev/null || exit 2\nopenssl dgst -${options.algo} ${options.target} | sed 's/^.* \\([a-z0-9]*\\)$/\\1/g'`,
      trim: true
    }, function(err, {stdout}) {
      if ((err != null ? err.code : void 0) === 2) {
        throw Error("Command does not exist: openssl");
      }
      if (options.hash && options.hash !== stdout) {
        throw Error(`Unexpected Hash, got ${JSON.stringify(stdout)} but exepected ${JSON.stringify(options.hash)}`);
      }
      return callback(err, {
        status: true,
        hash: stdout
      });
    });
    return this.next(function(err) {
      if (err) {
        return callback(err);
      }
    });
  }
};

// ## Dependencies
misc = require('../misc');
