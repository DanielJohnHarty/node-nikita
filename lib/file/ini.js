// Generated by CoffeeScript 1.12.5
var fs, merge, misc;

module.exports = function(options) {
  var default_props, org_props, parse;
  options.log({
    message: "Entering file.ini",
    level: 'DEBUG',
    module: 'nikita/lib/file/ini'
  });
  if (options.clean == null) {
    options.clean = true;
  }
  if (options.escape == null) {
    options.escape = true;
  }
  if (options.content == null) {
    options.content = {};
  }
  if (!((options.content != null) || (options.source == null))) {
    throw Error('Missing content');
  }
  if (options.target == null) {
    throw Error('Missing target');
  }
  org_props = {};
  default_props = {};
  parse = options.parse || misc.ini.parse;
  this.call(function(_, callback) {
    return fs.readFile(options.ssh, options.target, 'utf8', function(err, data) {
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return callback();
      }
      if (err) {
        return callback(err);
      }
      org_props = misc.merge(parse(data, options));
      return callback();
    });
  });
  this.call({
    "if": options.source
  }, function(_, callback) {
    var ssh;
    ssh = options.local ? null : options.ssh;
    return fs.readFile(options.ssh, options.source, 'utf8', function(err, data) {
      var content;
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return callback();
      }
      if (err) {
        return callback(err);
      }
      content = misc.ini.clean(options.content, true);
      options.content = misc.merge(parse(data, options), options.content);
      return callback();
    });
  });
  this.call({
    "if": options.merge
  }, function(_, callback) {
    options.content = misc.merge(org_props, options.content);
    options.log({
      message: "Get content for merge",
      level: 'DEBUG',
      module: 'nikita/lib/file/ini'
    });
    return callback();
  });
  return this.call(function() {
    var stringify;
    if (options.clean) {
      options.log({
        message: "Clean content",
        level: 'INFO',
        module: 'nikita/lib/file/ini'
      });
      misc.ini.clean(options.content);
    }
    options.log({
      message: "Serialize content",
      level: 'DEBUG',
      module: 'nikita/lib/file/ini'
    });
    stringify = options.stringify || misc.ini.stringify;
    return this.file({
      target: options.target,
      content: stringify(options.content, options),
      backup: options.backup,
      diff: options.diff,
      eof: options.eof,
      gid: options.gid,
      uid: options.uid,
      mode: options.mode
    });
  });
};

fs = require('ssh2-fs');

misc = require('../misc');

merge = require('../misc').merge;
