// Generated by CoffeeScript 1.12.5
var fs, misc, season;

module.exports = function(options) {
  if (options.line_width == null) {
    options.line_width = 160;
  }
  options.log({
    message: "Entering file.yaml",
    level: 'DEBUG',
    module: 'nikita/lib/file/yaml'
  });
  if (options.clean == null) {
    options.clean = true;
  }
  if (!options.content) {
    throw Error('Required Option: content');
  }
  if (!options.target) {
    throw Error('Required Option: target');
  }
  this.call(function(_, callback) {
    if (!options.merge) {
      return callback();
    }
    options.log({
      message: "Get Target Content",
      level: 'DEBUG',
      module: 'nikita/lib/file/cson'
    });
    return fs.readFile(options.ssh, options.target, 'utf8', function(err, content) {
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        options.log({
          message: "No Target Content To Merged",
          level: 'DEBUG',
          module: 'nikita/lib/file/cson'
        });
        return callback();
      }
      if (err && err.code !== 'ENOENT') {
        return callback(err);
      }
      try {
        content = season.parse(content);
        options.content = misc.merge(content, options.content);
        options.log({
          message: "Target Content Merged",
          level: 'DEBUG',
          module: 'nikita/lib/file/cson'
        });
        return callback();
      } catch (error) {
        err = error;
        return callback(err);
      }
    });
  });
  return this.call(function() {
    options.log({
      message: "Serialize Content",
      level: 'DEBUG',
      module: 'nikita/lib/file/cson'
    });
    return this.file({
      content: season.stringify(options.content),
      target: options.target,
      backup: options.backup
    });
  });
};

fs = require('ssh2-fs');

misc = require('../misc');

season = require('season');
