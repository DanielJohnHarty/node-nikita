// Generated by CoffeeScript 1.12.5
var fs, path,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = function(options) {
  options.log({
    message: "Entering file.types.local_gen",
    level: 'DEBUG',
    module: 'nikita/lib/file/types/local_gen'
  });
  if (options.target == null) {
    options.target = '/etc/locale.gen';
  }
  if (options.rootdir) {
    options.target = "" + (path.join(options.rootdir, options.target));
  }
  this.call(function(_, callback) {
    return fs.readFile(options.ssh, options.target, 'ascii', function(err, data) {
      var i, j, len, locale, locales, match, ref, ref1, status;
      if (err) {
        return callback(err);
      }
      status = false;
      locales = data.split('\n');
      for (i = j = 0, len = locales.length; j < len; i = ++j) {
        locale = locales[i];
        if (match = /^#([\w_\-\.]+)($| .+$)/.exec(locale)) {
          if (ref = match[1], indexOf.call(options.locales, ref) >= 0) {
            locales[i] = match[1] + match[2];
            status = true;
          }
        }
        if (match = /^([\w_\-\.]+)($| .+$)/.exec(locale)) {
          if (ref1 = match[1], indexOf.call(options.locales, ref1) < 0) {
            locales[i] = '#' + match[1] + match[2];
            status = true;
          }
        }
      }
      if (!status) {
        return callback();
      }
      data = locales.join('\n');
      return fs.writeFile(options.ssh, options.target, data, function(err) {
        return callback(err, true);
      });
    });
  });
  return this.system.execute({
    "if": function() {
      return options.generate && this.status(-1);
    },
    cmd: "locale-gen"
  });
};

path = require('path');

fs = require('ssh2-fs');
