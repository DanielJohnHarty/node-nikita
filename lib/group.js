// Generated by CoffeeScript 1.8.0
var execute, misc, wrap;

module.exports = function(options, callback) {
  return wrap(arguments, function(options, callback) {
    var do_compare, do_create, do_info, do_modify, info, modified;
    if (!options.name) {
      return callback(new Error("Option 'name' is required"));
    }
    if (options.system == null) {
      options.system = false;
    }
    if (options.gid == null) {
      options.gid = null;
    }
    modified = false;
    info = null;
    do_info = function() {
      var _ref;
      if (typeof options.log === "function") {
        options.log("Get group information for " + options.name);
      }
      if ((_ref = options.ssh) != null) {
        _ref.cache_group = null;
      }
      return misc.ssh.group(options.ssh, function(err, groups) {
        if (err) {
          return callback(err);
        }
        if (typeof options.log === "function") {
          options.log("Got " + (JSON.stringify(groups[options.name])));
        }
        info = groups[options.name];
        if (info) {
          return do_compare();
        } else {
          return do_create();
        }
      });
    };
    do_create = function() {
      var cmd;
      cmd = 'groupadd';
      if (options.system) {
        cmd += " -r";
      }
      if (options.gid) {
        cmd += " -g " + options.gid;
      }
      cmd += " " + options.name;
      return execute({
        ssh: options.ssh,
        cmd: cmd,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr,
        code_skipped: 9
      }, function(err, created) {
        if (err) {
          return callback(err);
        }
        if (created) {
          modified = true;
        } else {
          if (typeof options.log === "function") {
            options.log("Group defined elsewhere than '/etc/group', exit code is 9");
          }
        }
        return callback(null, modified);
      });
    };
    do_compare = function() {
      var k, _i, _len, _ref;
      _ref = ['gid'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        if ((options[k] != null) && info[k] !== options[k]) {
          modified = true;
        }
      }
      if (typeof options.log === "function") {
        options.log("Did group information changed: " + modified);
      }
      if (modified) {
        return do_modify();
      } else {
        return callback();
      }
    };
    do_modify = function() {
      var cmd;
      cmd = 'groupmod';
      if (options.gid) {
        cmd += " -g " + options.gid;
      }
      cmd += " " + options.name;
      return execute({
        ssh: options.ssh,
        cmd: cmd,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err) {
        return callback(err, modified);
      });
    };
    return do_info();
  });
};

misc = require('./misc');

wrap = require('./misc/wrap');

execute = require('./execute');
