// Generated by CoffeeScript 2.2.4
// # `nikita.fs.stat(options, callback)`

// Options include:

// * `dereference` (boolean)   
//   Follow links, similar to `lstat`, default is "true".

// ## Source Code
var Stats, constants;

module.exports = {
  status: false,
  handler: function(options, callback) {
    var dereference;
    options.log({
      message: "Entering fs.stat",
      level: 'DEBUG',
      module: 'nikita/lib/fs/stat'
    });
    if (options.argument != null) {
      // Normalize options
      options.target = options.argument;
    }
    if (options.dereference == null) {
      options.dereference = true;
    }
    dereference = options.dereference ? '-L' : '';
    if (!options.target) {
      throw Error("Required Option: the \"target\" option is mandatory");
    }
    return this.system.execute({
      cmd: `[ ! -e ${options.target} ] && exit 3\nstat ${dereference} -c '%f|%u|%g|%s|%X|%Y' ${options.target}`,
      sudo: options.sudo,
      bash: options.bash,
      arch_chroot: options.arch_chroot
    }, function(err, status, stdout, stderr) {
      var atime, gid, mtime, rawmodehex, size, stats, uid;
      if ((err != null ? err.code : void 0) === 3) {
        err = Error(`Missing File: no file exists for target ${JSON.stringify(options.target)}`);
        err.code = 'ENOENT';
        return callback(err);
      }
      if (err) {
        return callback(err);
      }
      [rawmodehex, uid, gid, size, atime, mtime] = stdout.trim().split('|');
      stats = new Stats({
        mode: parseInt('0x' + rawmodehex, 16),
        uid: parseInt(uid, 10),
        gid: parseInt(gid, 10),
        size: parseInt(size, 10),
        atime: parseInt(atime, 10), // File Access Time
        mtime: parseInt(mtime, 10) // File Modify Time
      });
      return callback(null, stats);
    });
  }
};

Stats = function(initial) {
  this.mode = initial && initial.mode;
  this.uid = initial && initial.uid;
  this.gid = initial && initial.gid;
  this.size = initial && initial.size;
  this.atime = initial && initial.atime;
  return this.mtime = initial && initial.mtime;
};

Stats.prototype._checkModeProperty = function(property) {
  return (this.mode & constants.S_IFMT) === property;
};

Stats.prototype.isDirectory = function() {
  return this._checkModeProperty(constants.S_IFDIR);
};

Stats.prototype.isFile = function() {
  return this._checkModeProperty(constants.S_IFREG);
};

Stats.prototype.isBlockDevice = function() {
  return this._checkModeProperty(constants.S_IFBLK);
};

Stats.prototype.isCharacterDevice = function() {
  return this._checkModeProperty(constants.S_IFCHR);
};

Stats.prototype.isSymbolicLink = function() {
  return this._checkModeProperty(constants.S_IFLNK);
};

Stats.prototype.isFIFO = function() {
  return this._checkModeProperty(constants.S_IFIFO);
};

Stats.prototype.isSocket = function() {
  return this._checkModeProperty(constants.S_IFSOCK);
};

// ## Dependencies
constants = require('fs').constants;
