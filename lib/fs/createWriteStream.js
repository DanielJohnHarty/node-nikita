// Generated by CoffeeScript 2.3.0
// # `nikita.fs.createWriteStream(options, callback)`

// Options include

// * `content` (string|buffer)   
//   Content to write.
// * `flags` (string)   
//   File flags, see [open(2)](http://man7.org/linux/man-pages/man2/open.2.html).
// * `mode` (string|int)   
//   Permission mode.
// * `target` (string)   
//   Final destination path.
// * `target_tmp` (string)   
//   Temporary file for upload before moving to final destination path.

// ## Example

// ```javascript
// nikita.fs.createWriteStream({
//   target: '/path/to/file'
//   stream: function(ws){
//     ws.write('some content');
//     ws.end();
//   }
// }, function(err){
//   console.info(err ? err.message : 'File written');
// })
// ```

// ## Source Code
var fs, string;

module.exports = {
  status: false,
  handler: function(options) {
    var ssh;
    options.log({
      message: "Entering fs.writeFile",
      level: 'DEBUG',
      module: 'nikita/lib/fs/writeFile'
    });
    ssh = this.ssh(options.ssh);
    if (options.argument != null) {
      // Normalize options
      options.target = options.argument;
    }
    if (!options.target) {
      throw Error("Required Option: the \"target\" option is mandatory");
    }
    if (!options.stream) {
      throw Error("Required Option: the \"stream\" option is mandatory");
    }
    if (options.flags == null) {
      options.flags = 'w'; // Note, Node.js docs version 8 & 9 mention "flag" and not "flags"
    }
    if (options.sudo || options.flags[0] === 'a') {
      if (options.target_tmp == null) {
        options.target_tmp = `/tmp/nikita_${string.hash(options.target)}`;
      }
    }
    if (options.mode == null) {
      options.mode = 0o644; // Node.js default to 0o666
    }
    this.call({
      if: options.flags[0] === 'a'
    }, function() {
      return this.system.execute({
        if: options.flags[0] === 'a',
        cmd: `[ ! -f '${options.target}' ] && exit\ncp '${options.target}' '${options.target_tmp}'`
      });
    }, function(err, status) {
      return options.log(!err ? {
        message: "Append prepared by placing original file in temporary path",
        level: 'INFO',
        module: 'nikita/lib/fs/write'
      } : {
        message: "Failed to place original file in temporary path",
        level: 'ERROR',
        module: 'nikita/lib/fs/writeFile'
      });
    });
    this.call(function(_, callback) {
      options.log({
        message: 'Writting file',
        level: 'DEBUG',
        module: 'nikita/lib/fs/writeFile'
      });
      return fs.createWriteStream(ssh, options.target_tmp || options.target, {
        flags: options.flags,
        mode: options.mode
      }, function(err, ws) {
        var error;
        if (err) {
          return callback(err);
        }
        options.stream(ws);
        // Quick fix ws sending both the error and close events on error
        error = false;
        ws.on('error', function(err) {
          error = true;
          if (ssh && err.code === 2) {
            err = Error(`ENOENT: no such file or directory, open '${options.target_tmp || options.target}'`);
            err.errno = -2;
            err.code = 'ENOENT';
            err.syscall = 'open';
            err.path = options.target_tmp || options.target;
          }
          return callback(err);
        });
        ws.on('end', function() {
          return ws.destroy();
        });
        return ws.on('close', function() {
          if (!error) {
            return callback();
          }
        });
      });
    });
    return this.system.execute({
      if: options.target_tmp,
      cmd: `mv '${options.target_tmp}' '${options.target}'`,
      sudo: options.sudo,
      bash: options.bash,
      arch_chroot: options.arch_chroot
    });
  }
};

// ## Dependencies
fs = require('ssh2-fs');

string = require('../misc/string');
