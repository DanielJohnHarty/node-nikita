// Generated by CoffeeScript 2.3.0
// # `nikita.fs.createReadStream(options, callback)`

// ## Example

// ```js
// buffers = []
// nikita.fs.createReadStream({
//   target: '/path/to/file'
//   stream: function(rs){
//     stream.on('readable', function(){
//       while(buffer = rs.read()){
//         buffers.push(buffer);
//       }
//     })
//   }
// }, function(err){
//   console.log(err ? err.message : Buffer.concat(buffers).toString());
// })
// ```

// ```js
// buffers = []
// nikita.fs.createReadStream({
//   target: '/path/to/file'
//   on_readable: function(rs){
//     while(buffer = rs.read()){
//       buffers.push(buffer);
//     }
//   }
// }, function(err){
//   console.log(err ? err.message : Buffer.concat(buffers).toString());
// })
// ```

// ## Source Code
var fs, path, string;

module.exports = {
  status: false,
  handler: function(options, callback) {
    var callback_args, current_username, p, ssh;
    this.log({
      message: "Entering fs.createReadStream",
      level: 'DEBUG',
      module: 'nikita/lib/fs/createReadStream'
    });
    ssh = this.ssh(options.ssh);
    p = ssh ? path.posix : path;
    if (options.argument != null) {
      // Default argument
      options.target = options.argument;
    }
    if (!options.target) {
      // Normalization
      throw Error("Required Option: the \"target\" option is mandatory");
    }
    options.target = options.cwd ? p.resolve(options.cwd, options.target) : p.normalize(options.target);
    if (ssh && !p.isAbsolute(options.target)) {
      throw Error(`Non Absolute Path: target is ${JSON.stringify(options.target)}, SSH requires absolute paths, you must provide an absolute path in the target or the cwd option`);
    }
    if (options.sudo) {
      if (options.target_tmp == null) {
        options.target_tmp = `/tmp/nikita_${string.hash(options.target)}`;
      }
    }
    // Guess current username
    current_username = ssh ? ssh.config.username : /^win/.test(process.platform) ? process.env['USERPROFILE'].split(path.sep)[2] : process.env['USER'];
    this.call({
      if: options.target_tmp
    }, function() {
      return this.system.execute({
        sudo: options.sudo,
        bash: options.bash,
        arch_chroot: options.arch_chroot,
        cmd: `[ ! -f '${options.target}' ] && exit\ncp '${options.target}' '${options.target_tmp}'\nchown '${current_username}' '${options.target_tmp}'`
      });
    }, function(err, status) {
      this.log(!err ? {
        message: "Placing original file in temporary path before reading",
        level: 'INFO',
        module: 'nikita/lib/fs/createReadStream'
      } : {
        message: "Failed to place original file in temporary path",
        level: 'ERROR',
        module: 'nikita/lib/fs/createReadStream'
      });
      if (err) {
        return callback(err);
      }
    });
    callback_args = null;
    this.call(function(_, callback) {
      var buffers;
      buffers = [];
      this.log({
        message: `Reading file ${options.target_tmp || options.target}`,
        level: 'DEBUG',
        module: 'nikita/lib/fs/createReadStream'
      });
      return fs.createReadStream(ssh, options.target_tmp || options.target, (err, rs) => {
        var done;
        if (err) {
          return callback(err);
        }
        done = function(err) {
          callback_args = err;
          return callback();
        };
        if (options.on_readable) {
          rs.on('readable', function() {
            return options.on_readable(rs);
          });
        } else {
          options.stream(rs);
        }
        rs.on('error', done);
        return rs.on('end', done);
      });
    });
    return this.system.execute({
      if: options.target_tmp,
      sudo: options.sudo,
      bash: options.bash,
      arch_chroot: options.arch_chroot,
      cmd: `rm '${options.target_tmp}'`
    }, function(err) {
      return callback(callback_args);
    });
  }
};


// ## Dependencies
fs = require('ssh2-fs');

path = require('path');

string = require('../misc/string');
