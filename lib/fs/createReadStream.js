// Generated by CoffeeScript 2.1.1
// # `nikita.fs.createReadStream(options, callback)`

// ## Source Code
var fs;

module.exports = {
  status: false,
  handler: function(options, callback) {
    var content, ssh;
    options.log({
      message: "Entering fs.createReadStream",
      level: 'DEBUG',
      module: 'nikita/lib/fs/createReadStream'
    });
    ssh = this.ssh(options.ssh);
    if (options.argument != null) {
      // Normalize options
      options.target = options.argument;
    }
    if (!options.target) {
      throw Error("Required Option: the \"target\" option is mandatory");
    }
    if (options.sudo) {
      if (options.target_tmp == null) {
        options.target_tmp = `/tmp/nikita_${string.hash(options.target)}`;
      }
    }
    content = null;
    this.call({
      if: options.target_tmp
    }, function() {
      return this.system.execute({
        sudo: options.sudo,
        bash: options.bash,
        arch_chroot: options.arch_chroot,
        cmd: `[ ! -f '${options.target}' ] && exit\ncp '${options.target}' '${options.target_tmp}'`
      });
    }, function(err, status) {
      options.log(!err ? {
        message: "Placing original file in temporary path before reading",
        level: 'INFO',
        module: 'nikita/lib/fs/createReadStream'
      } : {
        message: "Failed to place original file in temporary path",
        level: 'ERROR',
        module: 'nikita/lib/fs/createReadStream'
      });
      if (err) {
        return callback(err);
      }
    });
    return this.call(function() {
      var buffers;
      buffers = [];
      options.log({
        message: `Reading file ${options.target_tmp || options.target}`,
        level: 'DEBUG',
        module: 'nikita/lib/fs/createReadStream'
      });
      return fs.createReadStream(ssh, options.target_tmp || options.target, function(err, rs) {
        if (err) {
          return callback(err);
        }
        rs.on('readable', function() {
          return options.on_readable(rs);
        });
        rs.on('error', callback);
        return rs.on('end', callback);
      });
    });
  }
};

// ## Dependencies
fs = require('ssh2-fs');
