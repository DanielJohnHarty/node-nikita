// Generated by CoffeeScript 1.10.0
var docker, file, ssh2fs, util;

module.exports = function(options, callback) {
  var cmd, name, temp_dir, temp_dir_path;
  if (options.image == null) {
    return callback(Error('Missing image parameter'));
  }
  if (options.output == null) {
    return callback(Error('Missing output parameter'));
  }
  temp_dir = "/tmp/mecano_docker_save";
  name = (options.output.split('/').pop().toString()) + "." + (Date.now());
  temp_dir_path = temp_dir + "/" + name;
  cmd = " save -o " + temp_dir_path + " " + options.image;
  return this.mkdir({
    destination: temp_dir
  }, (function(_this) {
    return function(err, executed) {
      if (err) {
        return callback(err);
      }
      options.log({
        message: "Extracting to temp_dir :" + temp_dir_path,
        level: 'INFO',
        module: 'mecano/lib/docker/save'
      });
      return docker.exec(cmd, options, null, function(err, executed, stdout, stderr) {
        if (err) {
          return callback(err, executed, stdout, stderr);
        }
        return ssh2fs.exists(options.ssh, options.output, function(err, exists) {
          if (err) {
            return callback(err);
          }
          if (exists) {
            options.log({
              message: "Target saved image already exist :" + options.output,
              level: 'INFO',
              module: 'mecano/lib/docker/save'
            });
            return file.hash(options.ssh, temp_dir_path, 'md5', function(err, value_temp_dir) {
              if (err) {
                return callback(err);
              }
              return file.hash(options.ssh, options.output, 'md5', function(err, value_dest) {
                if (err) {
                  return callback(err, null);
                }
                if (value_temp_dir === value_dest) {
                  options.log({
                    message: "Indetical image (not overwritten):" + options.output,
                    level: 'INFO',
                    module: 'mecano/lib/docker/save'
                  });
                  return _this.remove({
                    destination: temp_dir
                  }, function(err, executed, stdout, stderr) {
                    return callback(err, null, stdout, stderr);
                  });
                } else {
                  options.log({
                    message: "Not identical image (overwriting):" + options.output,
                    level: 'INFO',
                    module: 'mecano/lib/docker/save'
                  });
                  _this.copy({
                    source: temp_dir_path,
                    destination: options.output
                  });
                  return _this.remove({
                    destination: temp_dir
                  }, function(err, executed, stdout, stderr) {
                    return callback(err, executed, stdout, stderr);
                  });
                }
              });
            });
          } else {
            options.log({
              message: "Target saved image does not exist :" + options.output,
              level: 'INFO',
              module: 'mecano/lib/docker/save'
            });
            _this.copy({
              source: temp_dir_path,
              destination: options.output
            });
            return _this.remove({
              destination: temp_dir
            }, function(err, executed, stdout, stderr) {
              return callback(err, executed, stdout, stderr);
            }, {
              force: true
            });
          }
        });
      });
    };
  })(this));
};

file = require('../misc').file;

util = require('util');

ssh2fs = require('ssh2-fs');

docker = require('../misc/docker');
