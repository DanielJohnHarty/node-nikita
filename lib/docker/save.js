// Generated by CoffeeScript 1.10.0
var docker, file, ssh2fs, util;

module.exports = function(options, callback) {
  var cache, cache_path, cmd, name;
  if (options.image == null) {
    return callback(Error('Missing image parameter'));
  }
  if (options.destination == null) {
    return callback(Error('Missing destination parameter'));
  }
  cache = "/tmp/mecano_docker";
  name = (options.destination.split('/').pop().toString()) + "." + (Date.now());
  cache_path = cache + "/" + name;
  cmd = " save -o " + cache_path + " " + options.image;
  return this.mkdir({
    destination: cache
  }, function(err, executed) {
    if (err) {
      return callback(err);
    }
    return docker.exec(cmd, options, null, (function(_this) {
      return function(err, executed, stdout, stderr) {
        if (err) {
          return callback(err, executed, stdout, stderr);
        }
        return ssh2fs.exists(options.ssh, options.destination, function(err, exists) {
          if (err) {
            return callback(err);
          }
          if (exists) {
            return file.hash(options.ssh, cache_path, 'md5', function(err, value_cache) {
              if (err) {
                return callback(err);
              }
              return file.hash(options.ssh, options.destination, 'md5', function(err, value_dest) {
                if (err) {
                  return callback(err, null);
                }
                if (value_cache === value_dest) {
                  return _this.remove({
                    destination: cache
                  }, function(err, executed, stdout, stderr) {
                    return callback(err, null, stdout, stderr);
                  });
                } else {
                  _this.copy({
                    source: cache_path,
                    destination: options.destination
                  });
                  return _this.remove({
                    destination: cache
                  }, function(err, executed, stdout, stderr) {
                    return callback(err, executed, stdout, stderr);
                  });
                }
              });
            });
          } else {
            _this.copy({
              source: cache_path,
              destination: options.destination
            });
            return _this.remove({
              destination: cache
            }, function(err, executed, stdout, stderr) {
              return callback(err, executed, stdout, stderr);
            });
          }
        });
      };
    })(this));
  });
};

file = require('../misc').file;

util = require('util');

ssh2fs = require('ssh2-fs');

docker = require('../misc/docker');
