// Generated by CoffeeScript 1.10.0
var docker, util;

module.exports = function(options, callback) {
  if (options.image == null) {
    return callback(Error('Missing image'));
  }
  if (options.service == null) {
    options.service = true;
  }
  if (options.rm == null) {
    options.rm = !options.service;
  }
  if (options.service && options.rm) {
    return callback(Error('Invalid parameter, rm cannot be true if service is true'));
  }
  if (!((options.container != null) || options.rm)) {
    options.log({
      message: "Should specify a container name if rm is false",
      level: 'WARN',
      module: 'mecano/docker/run'
    });
  }
  return docker.get_provider(options, (function(_this) {
    return function(err, provider) {
      var cmd, flag, i, j, len, len1, opt, opts, p, ref, ref1, ref2, ref3, ref4, ref5;
      if (err) {
        return callback(err);
      }
      options.provider = provider;
      cmd = docker.prepare_cmd(provider, options.machine);
      cmd += 'docker run';
      ref = {
        container: '--name',
        hostname: '-h',
        cpu_shares: '-c',
        cgroup_parent: '--cgroup-parent',
        cid_file: '--cidfile',
        blkio_weight: '--blkio-weight',
        cpuset_cpus: '--cpuset-cpus',
        entrypoint: '--entrypoint',
        ipc: '--ipc',
        log_driver: '--log-driver',
        memory: '-m',
        mac_address: '--mac-address',
        memory_swap: '--memory-swap',
        net: '--net',
        pid: '--pid',
        cwd: '-w'
      };
      for (opt in ref) {
        flag = ref[opt];
        if (options[opt] != null) {
          cmd += " " + flag + " " + options[opt];
        }
      }
      cmd += options.service ? ' -d' : ' -t';
      ref1 = {
        rm: '--rm',
        publish_all: '-P',
        privileged: '--privileged',
        read_only: '--read-only'
      };
      for (opt in ref1) {
        flag = ref1[opt];
        if (options[opt]) {
          cmd += " " + flag;
        }
      }
      ref2 = {
        port: '-p',
        volume: '-v',
        device: '--device',
        label: '-l',
        label_file: '--label-file',
        expose: '--expose',
        env: '-e',
        env_file: '--env-file',
        dns: '--dns',
        dns_search: '--dns-search',
        volumes_from: '--volumes-from',
        cap_add: '--cap-add',
        cap_drop: '--cap-drop',
        ulimit: '--ulimit',
        add_host: '--add-host'
      };
      for (opt in ref2) {
        flag = ref2[opt];
        if (options[opt] != null) {
          if (typeof options[opt] === 'string' || typeof options[opt] === 'number') {
            cmd += " " + flag + " " + options[opt];
          } else if (Array.isArray(options[opt])) {
            ref3 = options[opt];
            for (i = 0, len = ref3.length; i < len; i++) {
              p = ref3[i];
              if ((ref4 = typeof p) === 'string' || ref4 === 'number') {
                ref5 = options[opt];
                for (j = 0, len1 = ref5.length; j < len1; j++) {
                  p = ref5[j];
                  cmd += " " + flag + " " + p;
                }
              } else {
                callback(Error("Invalid parameter, '" + opt + "' array should only contains string or number"));
              }
            }
          } else {
            callback(Error("Invalid parameter, '" + opt + "' should be string, number or array"));
          }
        }
      }
      cmd += " " + options.image;
      if (options.cmd) {
        cmd += " " + options.cmd;
      }
      opts = docker.get_options(cmd, options);
      return _this.execute(opts, function(err, executed, stdout, stderr) {
        return callback(err, executed, stdout, stderr);
      });
    };
  })(this));
};

docker = require('./commons');

util = require('util');
