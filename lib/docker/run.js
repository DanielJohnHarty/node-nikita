// Generated by CoffeeScript 1.10.0
var docker, docker_rm, util;

module.exports = function(options, callback) {
  var cmd, flag, i, len, opt, p, ref, ref1, ref2, ref3, ref4;
  if (options.image == null) {
    return callback(Error('Missing image'));
  }
  if (options.service == null) {
    options.service = true;
  }
  if (options.rm == null) {
    options.rm = !options.service;
  }
  if (options.service && options.rm) {
    return callback(Error('Invalid parameter, rm cannot be true if service is true'));
  }
  if (options.force && !options.container) {
    return callback(Error('Need container name when forcing docker run'));
  }
  if (!((options.container != null) || options.rm)) {
    options.log({
      message: "Should specify a container name if rm is false",
      level: 'WARN',
      module: 'mecano/docker/run'
    });
  }
  cmd = ' run';
  ref = {
    container: '--name',
    hostname: '-h',
    cpu_shares: '-c',
    cgroup_parent: '--cgroup-parent',
    cid_file: '--cidfile',
    blkio_weight: '--blkio-weight',
    cpuset_cpus: '--cpuset-cpus',
    entrypoint: '--entrypoint',
    ipc: '--ipc',
    log_driver: '--log-driver',
    memory: '-m',
    mac_address: '--mac-address',
    memory_swap: '--memory-swap',
    net: '--net',
    pid: '--pid',
    cwd: '-w'
  };
  for (opt in ref) {
    flag = ref[opt];
    if (options[opt] != null) {
      cmd += " " + flag + " " + options[opt];
    }
  }
  cmd += options.service ? ' -d' : ' -t';
  ref1 = {
    rm: '--rm',
    publish_all: '-P',
    privileged: '--privileged',
    read_only: '--read-only'
  };
  for (opt in ref1) {
    flag = ref1[opt];
    if (options[opt]) {
      cmd += " " + flag;
    }
  }
  ref2 = {
    port: '-p',
    volume: '-v',
    device: '--device',
    label: '-l',
    label_file: '--label-file',
    expose: '--expose',
    env: '-e',
    env_file: '--env-file',
    dns: '--dns',
    dns_search: '--dns-search',
    volumes_from: '--volumes-from',
    cap_add: '--cap-add',
    cap_drop: '--cap-drop',
    ulimit: '--ulimit',
    add_host: '--add-host'
  };
  for (opt in ref2) {
    flag = ref2[opt];
    if (options[opt] != null) {
      if (typeof options[opt] === 'string' || typeof options[opt] === 'number') {
        cmd += " " + flag + " " + options[opt];
      } else if (Array.isArray(options[opt])) {
        ref3 = options[opt];
        for (i = 0, len = ref3.length; i < len; i++) {
          p = ref3[i];
          if ((ref4 = typeof p) === 'string' || ref4 === 'number') {
            cmd += " " + flag + " " + p;
          } else {
            callback(Error("Invalid parameter, '" + opt + "' array should only contains string or number"));
          }
        }
      } else {
        callback(Error("Invalid parameter, '" + opt + "' should be string, number or array"));
      }
    }
  }
  cmd += " " + options.image;
  if (options.cmd) {
    cmd += " " + options.cmd;
  }
  delete options.cmd;
  if (options.container != null) {
    return docker.exec(" ps -a | grep '" + options.container + "'", options, true, (function(_this) {
      return function(err, executed, stdout, stderr) {
        if (err) {
          return callback(err, executed, stdout, stderr);
        }
        if (executed) {
          if (options.force) {
            return docker.exec(" rm -f " + options.container + " || true", options, null, function(err) {
              if (err) {
                return callback(err);
              }
              return docker.exec(cmd, options, null, function(err, executed, stdout, stderr) {
                return callback(err, executed, stdout, stderr);
              });
            });
          } else {
            options.log({
              message: "Use force option if you want to get a new running instance",
              level: 'WARN',
              module: 'mecano/docker/run'
            });
            return callback(null, null);
          }
        } else {
          return docker.exec(cmd, options, null, function(err, executed, stdout, stderr) {
            return callback(err, executed, stdout, stderr);
          });
        }
      };
    })(this));
  } else {
    return docker.exec(cmd, options, null, function(err, executed, stdout, stderr) {
      return callback(err, executed, stdout, stderr);
    });
  }
};

docker = require('../misc/docker');

docker_rm = require('./rm');

util = require('util');
