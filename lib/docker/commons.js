// Generated by CoffeeScript 1.10.0
var mecano;

mecano = require('..');

module.exports = {
  get_provider: function(options, callback) {
    return mecano.execute({
      ssh: options.ssh,
      cmd: 'docker-machine -v',
      code_skipped: 127
    }, function(err, executed) {
      if (err) {
        return callback(err, null);
      }
      if (executed) {
        if (typeof options.log === "function") {
          options.log("provider is: docker-machine [DEBUG]");
        }
        return callback(null, 'docker-machine');
      }
      return mecano.execute({
        ssh: options.ssh,
        cmd: 'boot2docker -v',
        code_skipped: 127
      }, function(err, executed) {
        var provider;
        if (err) {
          return callback(err, null);
        }
        provider = executed ? 'boot2docker' : 'docker';
        if (typeof options.log === "function") {
          options.log("provider is: " + provider + " [DEBUG]");
        }
        return callback(null, provider);
      });
    });
  },
  prepare_cmd: function(provider, machine) {
    if (provider == null) {
      return Error('Missing provider parameter');
    }
    if (provider === 'docker') {
      return '';
    }
    if (provider === 'boot2docker') {
      return '$(boot2docker shellinit) && ';
    } else if (provider === 'docker-machine') {
      if (machine == null) {
        return Error('Missing `machine` option name. Need the name of the docker-machine');
      }
      return "eval \"$(docker-machine env " + machine + ")\" && ";
    } else {
      return Error("Unknown docker provider: " + provider);
    }
  },
  get_options: function(cmd, options) {
    var exec_opts, i, k, len, ref;
    exec_opts = {
      cmd: cmd
    };
    ref = ['ssh', 'log', 'stdout', 'stderr', 'cwd', 'code', 'code_skipped'];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (options[k] != null) {
        exec_opts[k] = options[k];
      }
    }
    return exec_opts;
  }
};
