// Generated by CoffeeScript 1.10.0
var docker, file, ssh2fs, util;

module.exports = function(options, callback) {
  var cmd, destination, destination_path, temp_dir, temp_dir_path;
  if (options.source == null) {
    return callback(Error('Missing source parameter'));
  }
  if (options.destination == null) {
    return callback(Error('Missing destination parameter'));
  }
  if (options.container == null) {
    return callback(Error('Missing container parameter'));
  }
  if (options.temp_dir == null) {
    options.temp_dir = 'true';
  }
  temp_dir = "/tmp/mecano_docker_cp_" + (Date.now());
  destination = options.temp_dir ? temp_dir : options.destination;
  destination_path = options.destination + "/" + (options.source.split('/').pop().toString());
  temp_dir_path = destination + "/" + (options.source.split('/').pop().toString());
  cmd = " cp " + options.container + ":" + options.source + " " + temp_dir;
  return ssh2fs.stat(options.ssh, options.destination, (function(_this) {
    return function(err, stats) {
      if (err) {
        if (err.code === 'ENOENT') {
          options.log({
            message: "Target directory does not exist :" + options.destination,
            level: 'INFO',
            module: 'mecano/src/docker/cp'
          });
          return callback(err);
        }
      } else {
        if (!stats.isDirectory()) {
          options.log({
            message: "Target is not a directory :" + options.destination,
            level: 'ERROR',
            module: 'mecano/src/docker/cp'
          });
        }
        if (!stats.isDirectory()) {
          return callback(err, false);
        }
        if (options.temp_dir == null) {
          options.log({
            message: "Extracting :" + options.source + " from " + options.container + " to destination:" + destination,
            level: 'DEBUG',
            module: 'mecano/src/docker/cp'
          });
        }
        options.log({
          message: "Extracting :" + options.source + " from " + options.container + " to temp_dir:" + temp_dir,
          level: 'DEBUG',
          module: 'mecano/src/docker/cp'
        });
        return docker.exec(cmd, options, null, function(err, copied, stdout, stderr) {
          if (err || !options.temp_dir) {
            return callback(err, copied, stdout, stderr);
          }
          return ssh2fs.stat(options.ssh, destination_path, function(err, stats) {
            if (err) {
              if (err.code === 'ENOENT') {
                options.log({
                  message: "Target does not exist :" + destination_path,
                  level: 'INFO',
                  module: 'mecano/src/docker/cp'
                });
                return _this.copy({
                  source: temp_dir_path,
                  destination: options.destination
                }, function(err, executed, stdout, stderr) {
                  return callback(err, executed, stdout, stderr);
                });
              } else {
                return callback(err, false);
              }
            } else {
              if (stats) {
                options.log({
                  message: "Target already exist " + destination_path,
                  level: 'INFO',
                  module: 'mecano/src/docker/cp'
                });
                return file.hash(options.ssh, temp_dir_path, 'md5', function(err, value_temp_dir) {
                  if (err) {
                    return callback(err);
                  }
                  return file.hash(options.ssh, destination_path, 'md5', function(err, value_dest) {
                    if (value_temp_dir === value_dest) {
                      options.log({
                        message: "Identical hash for extracted file/directory",
                        level: 'INFO',
                        module: 'mecano/src/docker/cp'
                      });
                    }
                    if (err || (value_temp_dir === value_dest)) {
                      return callback(err, null);
                    }
                    return _this.copy({
                      source: temp_dir_path,
                      destination: options.destination
                    }, function(err, executed, stdout, stderr) {
                      return callback(err, executed, stdout, stderr);
                    });
                  });
                });
              }
            }
          });
        });
      }
    };
  })(this));
};

file = require('../misc').file;

util = require('util');

ssh2fs = require('ssh2-fs');

docker = require('../misc/docker');
