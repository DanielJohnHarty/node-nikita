// Generated by CoffeeScript 1.10.0
var docker, path, ssh2fs,
  slice = [].slice;

module.exports = function(options, callback) {
  var _, destination_container, destination_mkdir, destination_path, ref, ref1, source_container, source_mkdir, source_path;
  if (!options.source) {
    throw Error('Missing option "source"');
  }
  if (!options.destination) {
    throw Error('Missing option "destination"');
  }
  ref = /(.*:)?(.*)/.exec(options.source), _ = ref[0], source_container = ref[1], source_path = ref[2];
  ref1 = /(.*:)?(.*)/.exec(options.destination), _ = ref1[0], destination_container = ref1[1], destination_path = ref1[2];
  if (source_container && destination_container) {
    throw Error('Incompatible source and destination options');
  }
  if (!source_container && !destination_container) {
    throw Error('Incompatible source and destination options');
  }
  source_mkdir = false;
  destination_mkdir = false;
  this.call(function(_, next) {
    if (source_container) {
      return next();
    }
    if (/\/$/.test(source_path)) {
      source_path = source_path + "/" + (path.basename(destination_path));
      return next();
    }
    return ssh2fs.stat(options.ssh, source_path, function(err, stat) {
      if (err && err.code !== 'ENOENT') {
        return next(err);
      }
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return destination_mkdir = true && next();
      }
      if (stat.isDirectory()) {
        source_path = source_path + "/" + (path.basename(destination_path));
      }
      return next();
    });
  });
  this.mkdir({
    destination: source_path,
    "if": function() {
      return source_mkdir;
    }
  });
  this.call(function(_, next) {
    if (destination_container) {
      return next();
    }
    if (/\/$/.test(destination_path)) {
      destination_path = destination_path + "/" + (path.basename(destination_path));
      return next();
    }
    return ssh2fs.stat(options.ssh, destination_path, function(err, stat) {
      if (err && err.code !== 'ENOENT') {
        return next(err);
      }
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return destination_mkdir = true && next();
      }
      if (stat.isDirectory()) {
        destination_path = destination_path + "/" + (path.basename(destination_path));
      }
      return next();
    });
  });
  this.mkdir({
    destination: destination_path,
    "if": function() {
      return destination_mkdir;
    }
  });
  return this.execute({
    cmd: docker.wrap(options, "cp " + options.source + " " + options.destination)
  }, function() {
    return docker.callback.apply(docker, [callback].concat(slice.call(arguments)));
  });
};

path = require('path');

ssh2fs = require('ssh2-fs');

docker = require('../misc/docker');
