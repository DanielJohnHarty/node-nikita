// Generated by CoffeeScript 1.10.0
var fs, misc;

module.exports = function(options, callback) {
  var do_chkhash, do_dsthash, do_exists, do_move, do_remove_src, do_replace_dest, do_srchash;
  options.log({
    message: "Entering move",
    level: 'DEBUG',
    module: 'mecano/lib/move'
  });
  do_exists = function() {
    options.log({
      message: "Stat destination",
      level: 'DEBUG',
      module: 'mecano/lib/move'
    });
    return fs.stat(options.ssh, options.destination, function(err, stat) {
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return do_move();
      }
      if (err) {
        return callback(err);
      }
      if (options.force) {
        return do_replace_dest();
      } else {
        return do_srchash();
      }
    });
  };
  do_srchash = function() {
    if (options.source_md5) {
      return do_dsthash();
    }
    options.log({
      message: "Get source md5",
      level: 'DEBUG',
      module: 'mecano/lib/move'
    });
    return misc.file.hash(options.ssh, options.source, 'md5', function(err, hash) {
      if (err) {
        return callback(err);
      }
      options.log({
        message: "Source md5 is \"hash\"",
        level: 'INFO',
        module: 'mecano/lib/move'
      });
      options.source_md5 = hash;
      return do_dsthash();
    });
  };
  do_dsthash = function() {
    if (options.destination_md5) {
      return do_chkhash();
    }
    options.log({
      message: "Get destination md5",
      level: 'DEBUG',
      module: 'mecano/lib/move'
    });
    return misc.file.hash(options.ssh, options.destination, 'md5', function(err, hash) {
      if (err) {
        return callback(err);
      }
      options.log({
        message: "Destination md5 is \"hash\"",
        level: 'INFO',
        module: 'mecano/lib/move'
      });
      options.destination_md5 = hash;
      return do_chkhash();
    });
  };
  do_chkhash = function() {
    if (options.source_md5 === options.destination_md5) {
      return do_remove_src();
    } else {
      return do_replace_dest();
    }
  };
  do_replace_dest = (function(_this) {
    return function() {
      options.log({
        message: "Remove " + options.destination,
        level: 'WARN',
        module: 'mecano/lib/move'
      });
      return _this.remove({
        destination: options.destination
      }, function(err, removed) {
        if (err) {
          return callback(err);
        }
        return do_move();
      });
    };
  })(this);
  do_move = function() {
    options.log({
      message: "Rename " + options.source + " to " + options.destination,
      level: 'WARN',
      module: 'mecano/lib/move'
    });
    return fs.rename(options.ssh, options.source, options.destination, function(err) {
      if (err) {
        return callback(err);
      }
      return callback(null, true);
    });
  };
  do_remove_src = (function(_this) {
    return function() {
      options.log({
        message: "Remove " + options.source,
        level: 'WARN',
        module: 'mecano/lib/move'
      });
      return _this.remove({
        destination: options.source
      }, function(err, removed) {
        return callback(err);
      });
    };
  })(this);
  return do_exists();
};

fs = require('ssh2-fs');

misc = require('../misc');
