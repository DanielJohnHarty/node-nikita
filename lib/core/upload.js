// Generated by CoffeeScript 1.10.0
var fs, misc, path;

module.exports = function(options, callback) {
  var do_chown_chmod, do_dest_checksum, do_end, do_md5, do_sha1, do_src_checksum, do_stat, do_upload, do_write, get_checksum, uploaded;
  options.log({
    message: "Calling upload",
    level: 'WARN',
    module: 'mecano/lib/upload'
  });
  if (!options.source) {
    return callback(Error("Required \"source\" option"));
  }
  if (!options.destination) {
    return callback(Error("Required \"destination\" option"));
  }
  options.log({
    message: "Source is \"" + options.source + "\"",
    level: 'DEBUG',
    module: 'mecano/lib/upload'
  });
  options.log({
    message: "Destination is \"" + options.destination + "\"",
    level: 'DEBUG',
    module: 'mecano/lib/upload'
  });
  uploaded = false;
  get_checksum = (function(_this) {
    return function(ssh, path, algorithm, callback) {
      if (ssh) {
        return _this.execute({
          cmd: "openssl " + algorithm + " " + path
        }, function(err, executed, stdout, stderr) {
          if (err) {
            return callback(err);
          }
          return callback(null, /[ ](.*)$/.exec(stdout.trim())[1]);
        });
      } else {
        return misc.file.hash(null, path, algorithm, callback);
      }
    };
  })(this);
  do_stat = function() {
    options.log({
      message: "Check if remote destination exists",
      level: 'DEBUG',
      module: 'mecano/lib/upload'
    });
    return fs.stat(options.ssh, options.destination, function(err, stat) {
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return do_upload();
      }
      if (err) {
        return callback(err);
      }
      options.log({
        message: "Destination exists",
        level: 'INFO',
        module: 'mecano/lib/upload'
      });
      if (stat.isDirectory()) {
        options.log({
          message: "Destination is a directory. Destination is now " + options.destination + "/" + (path.basename(options.source)),
          level: 'INFO',
          module: 'mecano/lib/upload'
        });
        if (stat.isDirectory()) {
          options.destination = options.destination + "/" + (path.basename(options.source));
        }
      }
      return do_write();
    });
  };
  do_write = (function(_this) {
    return function() {
      if (!options.binary) {
        options = misc.merge(options, {
          local_source: true
        });
        options.log({
          message: "Not in binary mode. Calling mecano/lib/write",
          level: 'DEBUG',
          module: 'mecano/lib/upload'
        });
        return _this.write(options, function(err, written) {
          return callback(err, written);
        });
      } else {
        options.log({
          message: "Enter binary mode",
          level: 'DEBUG',
          module: 'mecano/lib/upload'
        });
        return do_src_checksum(do_dest_checksum);
      }
    };
  })(this);
  do_src_checksum = function(next) {
    var algorithm;
    if (!(options.md5 === true || options.sha1 === true)) {
      return next();
    }
    algorithm = options.md5 ? 'md5' : 'sha1';
    options.log({
      message: "Get source " + algorithm + " checksum",
      level: 'DEBUG',
      module: 'mecano/lib/upload'
    });
    return get_checksum(null, options.source, algorithm, function(err, checksum) {
      if (err) {
        return callback(err);
      }
      options[algorithm] = checksum;
      options.log({
        message: algorithm + " checksum is \"" + checksum + "\"",
        level: 'INFO',
        module: 'mecano/lib/upload'
      });
      return next();
    });
  };
  do_dest_checksum = function() {
    if (!(options.md5 || options.sha1)) {
      return do_upload();
    }
    options.log({
      message: "Validate destination checksum, otherwise re-upload",
      level: 'INFO',
      module: 'mecano/lib/upload'
    });
    switch (false) {
      case options.md5 == null:
        return get_checksum(options.ssh, options.destination, 'md5', function(err, md5) {
          if (err) {
            return callback(err);
          }
          if (md5 === options.md5) {
            return callback();
          } else {
            return do_upload();
          }
        });
      case options.sha1 == null:
        return get_checksum(options.ssh, options.destination, 'sha1', function(err, sha1) {
          if (err) {
            return callback(err);
          }
          if (sha1 === options.sha1) {
            return callback();
          } else {
            return do_upload();
          }
        });
    }
  };
  do_upload = (function(_this) {
    return function() {
      options.log({
        message: "Write source",
        level: 'DEBUG',
        module: 'mecano/lib/upload'
      });
      return _this.mkdir({
        destination: "" + (path.dirname(options.destination))
      }, function(err) {
        if (err) {
          return next(err);
        }
        return fs.createWriteStream(options.ssh, options.destination, function(err, ws) {
          if (err) {
            return callback(err);
          }
          return fs.createReadStream(null, options.source, function(err, rs) {
            if (err) {
              return callback(err);
            }
            return rs.pipe(ws).on('close', function() {
              uploaded = true;
              return do_src_checksum(do_md5);
            }).on('error', callback);
          });
        });
      });
    };
  })(this);
  do_md5 = function() {
    if (!options.md5) {
      return do_sha1();
    }
    options.log({
      message: "Check destination md5",
      level: 'DEBUG',
      module: 'mecano/lib/upload'
    });
    return get_checksum(options.ssh, options.destination, 'md5', function(err, md5) {
      if (md5 !== options.md5) {
        return callback(new Error("Invalid md5 checksum"));
      }
      options.log({
        message: "Destination md5 is valid",
        level: 'INFO',
        module: 'mecano/lib/upload'
      });
      return do_sha1();
    });
  };
  do_sha1 = function() {
    if (!options.sha1) {
      return do_chown_chmod();
    }
    options.log({
      message: "Check destination sha1",
      level: 'DEBUG',
      module: 'mecano/lib/upload'
    });
    return get_checksum(options.ssh, options.destination, 'sha1', function(err, sha1) {
      if (sha1 !== options.sha1) {
        return callback(new Error("Invalid sha1 checksum"));
      }
      options.log({
        message: "Destination sha1 is valid",
        level: 'INFO',
        module: 'mecano/lib/upload'
      });
      return do_chown_chmod();
    });
  };
  do_chown_chmod = (function(_this) {
    return function() {
      options.log({
        message: "Check ownerships and permissions",
        level: 'DEBUG',
        module: 'mecano/lib/upload'
      });
      _this.chown({
        ssh: options.ssh,
        destination: options.destination,
        uid: options.uid,
        gid: options.gid,
        "if": (options.uid != null) || (options.gid != null)
      });
      _this.chmod({
        ssh: options.ssh,
        destination: options.destination,
        mode: options.mode,
        "if": options.mode != null
      });
      return _this.then(function(err, status) {
        var modified;
        if (err) {
          return callback(err);
        }
        if (status) {
          modified = true;
        }
        return do_end();
      });
    };
  })(this);
  do_end = function() {
    options.log({
      message: "Upload succeed",
      level: 'INFO',
      module: 'mecano/lib/upload'
    });
    return callback(null, true);
  };
  return do_stat();
};

fs = require('ssh2-fs');

path = require('path');

misc = require('../misc');
