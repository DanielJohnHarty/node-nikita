// Generated by CoffeeScript 1.10.0
var curl, misc, path, protocols_ftp, protocols_http, ssh2fs, url,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = function(options, callback) {
  var algo, cmd, fail, hash, k, ref, ref1, ref2, u;
  if (!options.source) {
    return callback(Error("Missing source: '" + options.source + "'"));
  }
  if (!(options.cache_file || options.destination || options.cache_dir)) {
    return callback(Error("Missing one of 'destination', 'cache_file' or 'cache_dir' option"));
  }
  if (options.destination == null) {
    options.destination = options.cache_file;
  }
  if (options.destination == null) {
    options.destination = path.basename(options.source);
  }
  options.destination = path.resolve(options.cache_dir, options.destination);
  if (/^file:\/\//.test(options.source)) {
    options.source = options.source.substr(7);
  }
  if (options.md5 != null) {
    if ((ref = typeof options.md5) !== 'string' && ref !== 'boolean') {
      return callback(new Error("Invalid MD5 Hash:" + options.md5));
    }
    algo = 'md5';
    hash = options.md5;
  } else if (options.sha1 != null) {
    if ((ref1 = typeof options.sha1) !== 'string' && ref1 !== 'boolean') {
      return callback(new Error("Invalid SHA-1 Hash:" + options.sha1));
    }
    algo = 'sha1';
    hash = options.sha1;
  } else {
    algo = 'md5';
    hash = false;
  }
  u = url.parse(options.source);
  this.call({
    handler: function(_, callback) {
      if (u.protocol !== null) {
        if (typeof options.log === "function") {
          options.log("Mecano `cache`: bypass source hash computation for non-file protocols [WARN]");
        }
        return callback();
      }
      if (hash !== true) {
        return callback();
      }
      return misc.file.hash(options.ssh, options.source, algo, function(err, value) {
        if (err) {
          return callback(err);
        }
        if (typeof options.log === "function") {
          options.log("Mecano `cache`: computed hash value is '" + value + "' [INFO]");
        }
        hash = value;
        return callback();
      });
    }
  });
  this.call({
    shy: true,
    handler: function(_, callback) {
      if (typeof options.log === "function") {
        options.log("Mecano `cache`: Check if destination (" + options.destination + ") exists [DEBUG]");
      }
      return ssh2fs.exists(options.ssh, options.destination, (function(_this) {
        return function(err, exists) {
          if (err) {
            return callback(err);
          }
          if (exists) {
            if (typeof options.log === "function") {
              options.log("Mecano `cache`: destination exists [INFO]");
            }
            if (options.force) {
              if (typeof options.log === "function") {
                options.log("Mecano `cache`: Force mode, cache will be overwritten [DEBUG]");
              }
              return callback(null, true);
            } else if (hash && typeof hash === 'string') {
              if (typeof options.log === "function") {
                options.log("Mecano `cache`: comparing " + algo + " hash [DEBUG]");
              }
              return misc.file.hash(options.ssh, options.destination, algo, function(err, c_hash) {
                if (err) {
                  return callback(err);
                }
                if (hash === c_hash) {
                  if (typeof options.log === "function") {
                    options.log("Mecano `cache`: Hashes match, skipping [DEBUG]");
                  }
                  return callback(null, false);
                }
                if (typeof options.log === "function") {
                  options.log("Mecano `cache`: Hashes don't match, delete then re-download [WARN]");
                }
                return ssh2fs.unlink(options.ssh, options.destination, function(err) {
                  if (err) {
                    return callback(err);
                  }
                  return callback(null, true);
                });
              });
            } else {
              if (typeof options.log === "function") {
                options.log("Mecano `cache`: destination exists, check disabled, skipping [DEBUG]");
              }
              return callback(null, false);
            }
          } else {
            if (typeof options.log === "function") {
              options.log("Mecano `cache`: destination does not exists [INFO]");
            }
            return callback(null, true);
          }
        };
      })(this));
    }
  }, function(err, status) {
    if (!status) {
      return this.end();
    }
  });
  if (ref2 = u.protocol, indexOf.call(protocols_http, ref2) >= 0) {
    fail = options.fail ? "--fail" : '';
    k = u.protocol === 'https:' ? '-k' : '';
    cmd = "curl " + fail + " " + k + " -s " + options.source + " -o " + options.destination;
    if (options.proxy) {
      cmd += " -x " + options.proxy;
    }
    this.mkdir(path.dirname(options.destination));
    this.execute({
      cmd: cmd,
      not_if_exists: options.destination
    });
  } else {
    this.mkdir({
      destination: "" + (path.dirname(options.destination))
    });
    this.copy({
      source: "" + options.source,
      destination: "" + options.destination
    });
  }
  return this.then(function(err, status) {
    return callback(err, status, options.destination);
  });
};

module.exports.protocols_http = protocols_http = ['http:', 'https:'];

module.exports.protocols_ftp = protocols_ftp = ['ftp:', 'ftps:'];

path = require('path');

url = require('url');

ssh2fs = require('ssh2-fs');

misc = require('../misc');

curl = require('../misc/curl');
