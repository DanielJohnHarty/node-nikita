// Generated by CoffeeScript 1.10.0
var diff, eco, fs, misc, nunjucks, path, string, uid_gid;

module.exports = function(options, callback) {
  var destination, destinationHash, destinationStat, j, len, modified, ref, w;
  options.log({
    message: "Calling write",
    level: 'DEBUG',
    module: 'mecano/lib/write'
  });
  modified = false;
  if (!((options.source || (options.content != null)) || options.replace || (options.write != null))) {
    return callback(Error('Missing source or content'));
  }
  if (options.source && options.content) {
    return callback(Error('Define either source or content'));
  }
  if (!options.destination) {
    return callback(Error('Missing destination'));
  }
  options.log({
    message: "Source is \"" + options.source + "\"",
    level: 'DEBUG',
    module: 'mecano/lib/write'
  });
  options.log({
    message: "Destination is \"" + options.destination + "\"",
    level: 'DEBUG',
    module: 'mecano/lib/write'
  });
  if (options.content && Buffer.isBuffer(options.content)) {
    options.content = options.content.toString();
  }
  if (options.diff == null) {
    options.diff = options.diff || !!options.stdout;
  }
  if (options.engine == null) {
    options.engine = 'nunjunks';
  }
  if (options.unlink == null) {
    options.unlink = false;
  }
  switch (options.eof) {
    case 'unix':
      options.eof = "\n";
      break;
    case 'mac':
      options.eof = "\r";
      break;
    case 'windows':
      options.eof = "\r\n";
      break;
    case 'unicode':
      options.eof = "\u2028";
  }
  destination = null;
  destinationHash = null;
  if (options.write == null) {
    options.write = [];
  }
  if ((options.from != null) || (options.to != null) || (options.match != null) || (options.replace != null) || (options.before != null)) {
    options.write.push({
      from: options.from,
      to: options.to,
      match: options.match,
      replace: options.replace,
      append: options.append,
      before: options.before
    });
    options.append = false;
  }
  ref = options.write;
  for (j = 0, len = ref.length; j < len; j++) {
    w = ref[j];
    if ((w.from == null) && (w.to == null) && (w.match == null) && (w.replace != null)) {
      w.match = w.replace;
    }
  }
  this.call(function(_, callback) {
    var source, ssh;
    if (options.content != null) {
      if (typeof options.content === 'number') {
        options.content = "" + options.content;
      }
      return callback();
    }
    source = options.source || options.destination;
    options.log({
      message: "Force local source is \"" + (options.local_source ? 'true' : 'false') + "\"",
      level: 'DEBUG',
      module: 'mecano/lib/write'
    });
    ssh = options.local_source ? null : options.ssh;
    return fs.exists(ssh, source, function(err, exists) {
      if (err) {
        return callback(err);
      }
      if (!exists) {
        if (options.source) {
          return callback(new Error("Source does not exist: " + (JSON.stringify(options.source))));
        }
        options.content = '';
        return callback();
      }
      options.log({
        message: "Reading source",
        level: 'DEBUG',
        module: 'mecano/lib/write'
      });
      return fs.readFile(ssh, source, 'utf8', function(err, src) {
        if (err) {
          return callback(err);
        }
        options.content = src;
        return callback();
      });
    });
  });
  destinationStat = null;
  this.call(function(_, callback) {
    var do_mkdir, do_read, exists;
    if (typeof options.destination === 'function') {
      return callback();
    }
    exists = function() {
      options.log({
        message: "Stat destination",
        level: 'DEBUG',
        module: 'mecano/lib/write'
      });
      return fs.lstat(options.ssh, options.destination, function(err, stat) {
        if ((err != null ? err.code : void 0) === 'ENOENT') {
          return do_mkdir();
        }
        if (err) {
          return callback(err);
        }
        destinationStat = stat;
        if (stat.isDirectory()) {
          options.destination = options.destination + "/" + (path.basename(options.source));
          options.log({
            message: "Destination is a directory and is now \"options.destination\"",
            level: 'INFO',
            module: 'mecano/lib/write'
          });
          return fs.stat(options.ssh, options.destination, function(err, stat) {
            if ((err != null ? err.code : void 0) === 'ENOENT') {
              options.log({
                message: "New destination does not exist",
                level: 'INFO',
                module: 'mecano/lib/write'
              });
              return callback();
            }
            if (err) {
              return callback(err);
            }
            if (!stat.isFile()) {
              return callback(new Error("Destination is not a file: " + options.destination));
            }
            options.log({
              message: "New destination exist",
              level: 'INFO',
              module: 'mecano/lib/write'
            });
            destinationStat = stat;
            return do_read();
          });
        } else if (stat.isSymbolicLink()) {
          options.log({
            message: "Destination is a symlink",
            level: 'INFO',
            module: 'mecano/lib/write'
          });
          if (!options.unlink) {
            return do_read();
          }
          return fs.unlink(options.ssh, options.destination, function(err, stat) {
            if (err) {
              return callback(err);
            }
            return callback();
          });
        } else if (stat.isFile()) {
          options.log({
            message: "Destination is a file",
            level: 'INFO',
            module: 'mecano/lib/write'
          });
          return do_read();
        } else {
          return callback(Error("Invalid File Type Destination"));
        }
      });
    };
    do_mkdir = (function(_this) {
      return function() {
        return _this.mkdir({
          destination: path.dirname(options.destination),
          uid: options.uid,
          gid: options.gid,
          mode: options.mode,
          unless_exists: path.dirname(options.destination)
        }, function(err, created) {
          if (err) {
            return callback(err);
          }
          return callback();
        });
      };
    })(this);
    do_read = function() {
      options.log({
        message: "Reading destination",
        level: 'DEBUG',
        module: 'mecano/lib/write'
      });
      return fs.readFile(options.ssh, options.destination, 'utf8', function(err, dest) {
        if (err) {
          return callback(err);
        }
        if (options.diff) {
          destination = dest;
        }
        destinationHash = string.hash(dest);
        return callback();
      });
    };
    return exists();
  });
  this.call(function() {
    if (options.context != null) {
      return string.render(options);
    }
  });
  this.call(function() {
    if (options.skip_empty_lines == null) {
      return;
    }
    options.log({
      message: "Skip empty lines",
      level: 'DEBUG',
      module: 'mecano/lib/write'
    });
    return options.content = options.content.replace(/(\r\n|[\n\r\u0085\u2028\u2029])\s*(\r\n|[\n\r\u0085\u2028\u2029])/g, "$1");
  });
  this.call(function() {
    if (options.write.length) {
      return string.replace_partial(options);
    }
  });
  this.call(function() {
    var char, i, k, len1, ref1;
    if (options.eof == null) {
      return;
    }
    options.log({
      message: "Checking option eof",
      level: 'DEBUG',
      module: 'mecano/lib/write'
    });
    if (options.eof === true) {
      ref1 = options.content;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        char = ref1[i];
        if (char === '\r') {
          options.eof = options.content[i + 1] === '\n' ? '\r\n' : char;
          break;
        }
        if (char === '\n' || char === '\u2028') {
          options.eof = char;
          break;
        }
      }
      if (options.eof === true) {
        options.eof = '\n';
      }
      options.log({
        message: "Option eof is true, gessing as " + (JSON.stringify(options.eof)),
        level: 'INFO',
        module: 'mecano/lib/write'
      });
    }
    if (!string.endsWith(options.content, options.eof)) {
      options.log({
        message: "Add eof",
        level: 'WARN',
        module: 'mecano/lib/write'
      });
      return options.content += options.eof;
    }
  });
  this.call(function(_, callback) {
    if (destinationHash === string.hash(options.content)) {
      return callback();
    }
    options.log({
      message: "File content has changed",
      level: 'WARN',
      module: 'mecano/lib/write'
    });
    diff(options.content, destination, options);
    return callback(null, true);
  });
  this.call(function() {
    var backup;
    if (!this.status()) {
      return;
    }
    if (!(options.backup && destinationHash)) {
      return;
    }
    options.log({
      message: "Create backup",
      level: 'INFO',
      module: 'mecano/lib/write'
    });
    backup = typeof options.backup === 'string' ? options.backup : "." + (Date.now());
    return this.copy({
      ssh: options.ssh,
      source: options.destination,
      destination: "" + options.destination + backup
    });
  });
  this.call(function(_, callback) {
    if (!this.status()) {
      return callback();
    }
    if (typeof options.destination === 'function') {
      options.log({
        message: "Write destination with user function",
        level: 'INFO',
        module: 'mecano/lib/write'
      });
      options.destination(options.content);
      return callback();
    }
    options.log({
      message: "Write destination",
      level: 'INFO',
      module: 'mecano/lib/write'
    });
    if (options.append) {
      if (options.flags == null) {
        options.flags = 'a';
      }
    }
    return uid_gid(options, function(err) {
      if (err) {
        return callback(err);
      }
      return fs.writeFile(options.ssh, options.destination, options.content, options, function(err) {
        if (err) {
          return callback(err);
        }
        options.log({
          message: "File written",
          level: 'INFO',
          module: 'mecano/lib/write'
        });
        modified = true;
        return callback();
      });
    });
  });
  this.chown({
    destination: options.destination,
    stat: destinationStat,
    uid: options.uid,
    gid: options.gid,
    "if": (options.uid != null) || (options.gid != null),
    unless: options.destination === 'function'
  });
  this.chmod({
    destination: options.destination,
    stat: destinationStat,
    mode: options.mode,
    "if": options.mode != null,
    unless: options.destination === 'function'
  });
  return this.then(callback);
};

fs = require('ssh2-fs');

path = require('path');

eco = require('eco');

nunjucks = require('nunjucks/src/environment');

misc = require('../misc');

diff = require('../misc/diff');

string = require('../misc/string');

uid_gid = require('../misc/uid_gid');
