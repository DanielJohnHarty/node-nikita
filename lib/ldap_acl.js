// Generated by CoffeeScript 1.8.0
var each, execute, ldap, misc, string, wrap;

module.exports = function(goptions, options, callback) {
  return wrap(arguments, function(options, callback) {
    var modified;
    if (options.acls == null) {
      options.acls = [{}];
    }
    modified = false;
    return each(options.acls).parallel(false).on('item', function(acl, callback) {
      var do_diff, do_end, do_getacls, do_getdn, do_save;
      do_getdn = function() {
        if (options.hdb_dn) {
          return do_getacls();
        }
        if (typeof options.log === "function") {
          options.log("mecano `ldap_acl`: get DN of the HDB to modify");
        }
        return execute({
          cmd: "ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config \"(olcSuffix= " + options.suffix + ")\" dn 2>/dev/null | egrep '^dn' | sed -e 's/^dn:\\s*olcDatabase=\\(.*\\)$/\\1/g'",
          ssh: options.ssh,
          log: options.log,
          stdout: options.stdout,
          stderr: options.stderr
        }, function(err, _, hdb_dn) {
          if (err) {
            return callback(err);
          }
          options.hdb_dn = hdb_dn.trim();
          return do_getacls();
        });
      };
      do_getacls = function() {
        if (typeof options.log === "function") {
          options.log("mecano `ldap_acl`: list all ACL of the directory");
        }
        return execute({
          cmd: "ldapsearch -Y EXTERNAL -H ldapi:/// -b olcDatabase=" + options.hdb_dn + " \"(olcAccess=*)\" olcAccess",
          ssh: options.ssh,
          log: options.log,
          stdout: options.stdout,
          stderr: options.stderr
        }, function(err, _, stdout) {
          var current, line, match, olcAccesses, _i, _len, _ref;
          if (err) {
            return callback(err);
          }
          current = null;
          olcAccesses = [];
          _ref = string.lines(stdout);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            if (match = /^olcAccess: (.*)$/.exec(line)) {
              if (current != null) {
                olcAccesses.push(current);
              }
              current = match[1];
            } else if (current != null) {
              if (/^ /.test(line)) {
                current += line.substr(1);
              } else {
                olcAccesses.push(current);
                current = null;
              }
            }
          }
          return do_diff(ldap.acl.parse(olcAccesses));
        });
      };
      do_diff = function(olcAccesses) {
        var access, access_by, acl_by, found, i, index, is_perfect_match, not_found_acl, olcAccess, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2;
        olcAccess = null;
        for (i = _i = 0, _len = olcAccesses.length; _i < _len; i = ++_i) {
          access = olcAccesses[i];
          if (acl.to === access.to) {
            olcAccess = misc.object.clone(access);
            olcAccess.old = access;
            break;
          }
        }
        if (olcAccess) {
          is_perfect_match = true;
          not_found_acl = [];
          if (acl.by.length !== olcAccess.by.length) {
            is_perfect_match = false;
          } else {
            _ref = acl.by;
            for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
              acl_by = _ref[i];
              if (acl_by !== olcAccess.by[i]) {
                is_perfect_match = false;
              }
              found = true;
              _ref1 = olcAccess.by;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                access_by = _ref1[_k];
                if (acl_by !== access_by) {
                  found = false;
                }
              }
              if (!found) {
                not_found_acl.push(acl_by);
              }
            }
          }
          if (is_perfect_match) {
            if (typeof options.log === "function") {
              options.log('mecano `ldap_acl`: no modification to apply');
            }
            return do_end();
          }
          if (not_found_acl.length) {
            if (typeof options.log === "function") {
              options.log('mecano `ldap_acl`: modify access after undefined acl');
            }
            _ref2 = olcAccess.by;
            for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
              access_by = _ref2[_l];
              not_found_acl.push(access_by);
            }
            olcAccess.by = not_found_acl;
          } else {
            if (typeof options.log === "function") {
              options.log('mecano `ldap_acl`: modify access after reorder');
            }
            olcAccess.by = acl.by;
          }
        } else {
          if (typeof options.log === "function") {
            options.log('mecano `ldap_acl`: insert a new access');
          }
          index = olcAccesses.length;
          if (acl.before) {
            for (i = _m = 0, _len4 = olcAccesses.length; _m < _len4; i = ++_m) {
              access = olcAccesses[i];
              if (access.to === acl.before) {
                index = i;
              }
            }
          } else if (acl.after) {
            for (i = _n = 0, _len5 = olcAccesses.length; _n < _len5; i = ++_n) {
              access = olcAccesses[i];
              if (access.to === options.after) {
                index = i + 1;
              }
            }
          }
          olcAccess = {
            index: index,
            to: acl.to,
            by: acl.by,
            add: true
          };
        }
        return do_save(olcAccess);
      };
      do_save = function(olcAccess) {
        var cmd, old;
        if (olcAccess.old) {
          old = ldap.acl.stringify(olcAccess.old);
        }
        olcAccess = ldap.acl.stringify(olcAccess);
        if (old) {
          cmd = "ldapadd -Y EXTERNAL -H ldapi:/// <<-EOF\ndn: olcDatabase=" + options.hdb_dn + "\nchangetype: modify\ndelete: olcAccess\nolcAccess: " + old + "\n-\nadd: olcAccess\nolcAccess: " + olcAccess + "\nEOF";
        } else {
          cmd = "ldapadd -Y EXTERNAL -H ldapi:/// <<-EOF\ndn: olcDatabase=" + options.hdb_dn + "\nchangetype: modify\nadd: olcAccess\nolcAccess: " + olcAccess + "\nEOF";
        }
        return execute({
          cmd: cmd,
          ssh: options.ssh,
          log: options.log,
          stdout: options.stdout,
          stderr: options.stderr
        }, function(err, _, hdb_dn) {
          if (err) {
            return callback(err);
          }
          modified = true;
          return do_end();
        });
      };
      do_end = function() {
        return callback();
      };
      return do_getdn();
    }).on('both', function(err) {
      return callback(err, modified);
    });
  });
};

each = require('each');

misc = require('./misc');

ldap = require('./misc/ldap');

string = require('./misc/string');

wrap = require('./misc/wrap');

execute = require('./execute');
