// Generated by CoffeeScript 1.8.0
var child, conditions, each, misc,
  __slice = [].slice;

each = require('each');

misc = require('./index');

conditions = require('./conditions');

child = require('./child');


/*
Responsibilities:

*   Retrieve arguments
*   Normalize options
*   Handle conditions
*   Run multiple actions sequentially or concurrently
*   Handling modification count
*   Return a Mecano Child instance
*   Pass user arguments
 */

module.exports = function(args, handler) {
  var callback, finish, goptions, isArray, modified, options, result, user_args, _ref;
  _ref = misc.args(args), goptions = _ref[0], options = _ref[1], callback = _ref[2];
  isArray = Array.isArray(options);
  user_args = [];
  result = child();
  modified = 0;
  finish = function(err) {
    var arg, i;
    if (!isArray) {
      user_args = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = user_args.length; _i < _len; i = ++_i) {
          arg = user_args[i];
          _results.push(user_args[i] = arg[0]);
        }
        return _results;
      })();
    }
    if (callback) {
      callback.apply(null, [err, modified].concat(__slice.call(user_args)));
    }
    return result.end.apply(result, [err, modified].concat(__slice.call(user_args)));
  };
  misc.options(options, function(err, options) {
    if (err) {
      return finish(err);
    }
    return each(options).parallel(goptions.parallel).on('item', function(options, next) {
      return conditions.all(options, next, function() {
        return handler(options, function() {
          var arg, args, err, i, modif, _i, _len;
          err = arguments[0], modif = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          if (err) {
            return next(err);
          }
          if (modif) {
            modified++;
          }
          for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
            arg = args[i];
            if (user_args[i] == null) {
              user_args[i] = [];
            }
            user_args[i].push(arg);
          }
          return next();
        });
      });
    }).on('both', function(err) {
      return finish(err);
    });
  });
  return result;
};
