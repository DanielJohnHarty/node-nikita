// Generated by CoffeeScript 1.8.0
module.exports = {
  acl: {
    parse: function(olcAccesses) {
      var i, isArray, match, olcAccess;
      isArray = Array.isArray(olcAccesses);
      if (!isArray) {
        olcAccesses = [olcAccesses];
      }
      olcAccesses = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = olcAccesses.length; _i < _len; i = ++_i) {
          olcAccess = olcAccesses[i];
          match = /^\{(\d+)\}to\s+(.*?)(\s*by\s+|$)(.*)$/.exec(olcAccess);
          if (!match) {
            throw Error('Invalid olcAccess entry');
          }
          _results.push({
            index: match[1],
            to: match[2],
            by: match[4].split(/\s+by\s+/)
          });
        }
        return _results;
      })();
      if (isArray) {
        return olcAccesses;
      } else {
        return olcAccesses[0];
      }
    },
    stringify: function(olcAccesses) {
      var bie, i, isArray, olcAccess, value, _i, _j, _len, _len1, _ref;
      isArray = Array.isArray(olcAccesses);
      if (!isArray) {
        olcAccesses = [olcAccesses];
      }
      for (i = _i = 0, _len = olcAccesses.length; _i < _len; i = ++_i) {
        olcAccess = olcAccesses[i];
        value = "{" + olcAccess.index + "}to " + olcAccess.to;
        _ref = olcAccess.by;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          bie = _ref[_j];
          value += " by " + bie;
        }
        olcAccesses[i] = value;
      }
      if (isArray) {
        return olcAccesses;
      } else {
        return olcAccesses[0];
      }
    }
  },
  index: {
    parse: function(indexes) {
      var isArray;
      isArray = Array.isArray(indexes);
      if (!isArray) {
        indexes = [indexes];
      }
      indexes.forEach(function(index, i) {
        var k, v, _ref;
        if (i === 0) {
          indexes = {};
        }
        _ref = index.split(' '), k = _ref[0], v = _ref[1];
        return indexes[k] = v;
      });
      if (isArray) {
        return indexes;
      } else {
        return indexes[0];
      }
    },
    stringify: function(indexes) {
      var isArray, k, v;
      isArray = Array.isArray(indexes);
      if (!isArray) {
        indexes = [indexes];
      }
      indexes = (function() {
        var _results;
        _results = [];
        for (k in indexes) {
          v = indexes[k];
          _results.push("" + k + " " + v);
        }
        return _results;
      })();
      if (isArray) {
        return indexes;
      } else {
        return indexes[0];
      }
    }
  }
};
