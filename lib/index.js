// Generated by CoffeeScript 1.9.1
var register, registered, registry,
  slice = [].slice;

module.exports = function() {
  var call, call_sync, callid, obj, properties, proto, run, stack, status, todos;
  if (arguments.length === 2) {
    obj = arguments[0];
    obj.options = arguments[1];
  } else if (arguments.length === 1) {
    obj = {};
    obj.options = arguments[0];
  } else {
    obj = {};
    obj.options = {};
  }
  properties = {};
  stack = [];
  todos = [];
  status = {
    err: null,
    changed: false,
    throw_if_error: true,
    running: false,
    id: 0
  };
  callid = 0;
  call_sync = function(fn, args) {
    var mtodos, result;
    ++callid;
    stack.unshift(todos);
    todos = [];
    try {
      return result = fn.apply(obj, args);
    } finally {
      mtodos = todos;
      todos = stack.shift();
      if (mtodos.length) {
        todos.unshift.apply(todos, mtodos);
      }
      result;
    }
  };
  call = function(fn, args, callback) {
    var err, has_then, i, len, todo;
    ++callid;
    try {
      stack.unshift(todos);
      todos = [];
      return fn.call.apply(fn, [obj].concat(slice.call(args), [function(err, changed) {
        var e, has_then, i, len, result, todo;
        if (err) {
          has_then = false;
          for (i = 0, len = todos.length; i < len; i++) {
            todo = todos[i];
            if (todo[0] === 'then') {
              has_then = true;
            }
          }
          while (todos[0] && todos[0][0] !== 'then') {
            todos.shift();
          }
        }
        result = false;
        try {
          if (callback) {
            call_sync(callback, arguments);
          }
          if (err) {
            status.throw_if_error = false;
          }
          if (result === true) {
            err = null;
          }
        } catch (_error) {
          e = _error;
          if (!err) {
            err = e;
          }
        }
        if (err) {
          status.err = err;
        } else if (changed) {
          status.changed = true;
        }
        if (todos.length === 0) {
          todos = stack.shift();
        }
        return run();
      }]));
    } catch (_error) {
      err = _error;
      todos = stack.shift();
      has_then = false;
      for (i = 0, len = todos.length; i < len; i++) {
        todo = todos[i];
        if (todo[0] === 'then') {
          has_then = true;
        }
      }
      while (todos[0] && todos[0][0] !== 'then') {
        todos.shift();
      }
      status.err = err;
      return run(true);
    }
  };
  run = function(force) {
    var changed, err, has_then, i, j, k, len, len1, ref, ref1, ref2, ref3, t, todo, v;
    todo = todos.shift();
    if (!todo) {
      if (status.err && status.throw_if_error) {
        throw status.err;
      }
      return;
    }
    if (todo[0] === 'then') {
      err = status.err, changed = status.changed;
      status.err = null;
      status.changed = false;
      status.throw_if_error = true;
      todo[1][0].call(obj, err, changed);
      run(true);
      return;
    }
    if (todo[0] === 'call') {
      if (todo[1][0].length) {
        return call(todo[1][0], [], null);
      } else {
        try {
          changed = todo[1][0].call(obj);
        } catch (_error) {
          err = _error;
        }
        if (err) {
          has_then = false;
          for (i = 0, len = todos.length; i < len; i++) {
            todo = todos[i];
            if (todo[0] === 'then') {
              has_then = true;
            }
          }
          while (todos[0] && todos[0][0] !== 'then') {
            todos.shift();
          }
        }
        if (err) {
          status.err = err;
        } else if (changed) {
          status.changed = true;
        }
        return run(true);
      }
    }
    if (Array.isArray(todo[1][0])) {
      ref = todo[1][0];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        t = ref[j];
        ref1 = obj.options;
        for (k in ref1) {
          v = ref1[k];
          if (typeof t[k] === 'undefined') {
            t[k] = obj.options[k];
          }
        }
      }
    } else if (typeof todo[1][0] === 'object') {
      t = todo[1][0];
      ref2 = obj.options;
      for (k in ref2) {
        v = ref2[k];
        if (typeof t[k] === 'undefined') {
          t[k] = obj.options[k];
        }
      }
    }
    todo[1][0].user_args = ((ref3 = todo[1][1]) != null ? ref3.length : void 0) > 2;
    return call(registry[todo[0]], [todo[1][0]], todo[1][1]);
  };
  properties.child = {
    get: function() {
      return function() {
        return module.exports(obj.options);
      };
    }
  };
  properties.then = {
    get: function() {
      return function() {
        var id;
        id = status.id++;
        todos.push(['then', arguments, id]);
        if (todos.length === 1) {
          process.nextTick(run);
        }
        return obj;
      };
    }
  };
  properties.call = {
    get: function() {
      return function() {
        var id;
        id = status.id++;
        todos.push(['call', arguments, id]);
        process.nextTick(function() {});
        if (todos.length === 1) {
          process.nextTick(run);
        }
        return obj;
      };
    }
  };
  Object.keys(registry).forEach(function(name) {
    return properties[name] = {
      get: function() {
        return function() {
          var dest, id, ref;
          id = status.id++;
          dest = (ref = arguments[0]) != null ? ref.destination : void 0;
          todos.push([name, arguments, id]);
          if (todos.length === 1) {
            process.nextTick(run);
          }
          return obj;
        };
      }
    };
  });
  proto = Object.defineProperties(obj, properties);
  Object.defineProperty(obj, 'register', {
    get: function() {
      return function(name, handler) {
        var is_registered_locally;
        is_registered_locally = obj.registered(name, true);
        if (handler === null || handler === false) {
          if (is_registered_locally) {
            delete obj[name];
          } else if (module.exports.registered(name)) {
            throw Error('Unregister a global function from local context');
          }
          return obj;
        }
        if (is_registered_locally) {
          throw Error("Function already defined '" + name + "'");
        }
        return Object.defineProperty(obj, name, {
          configurable: true,
          get: function() {
            return function() {
              var dest, id, ref;
              id = status.id++;
              dest = (ref = arguments[0]) != null ? ref.destination : void 0;
              todos.push([name, arguments, id]);
              if (todos.length === 1) {
                process.nextTick(run);
              }
              return obj;
            };
          }
        });
      };
    }
  });
  Object.defineProperty(obj, 'registered', {
    get: function() {
      return function(name, local_only) {
        var global, local;
        if (local_only == null) {
          local_only = false;
        }
        global = Object.prototype.hasOwnProperty.call(module.exports, name);
        local = Object.prototype.hasOwnProperty.call(obj, name);
        if (local_only) {
          return local;
        } else {
          return global || local;
        }
      };
    }
  });
  return obj;
};

register = module.exports.register = function(name, handler) {
  if (handler === null || handler === false) {
    if (registered(name)) {
      delete module.exports[name];
    }
    return module.exports;
  }
  if (registered(name)) {
    throw Error("Function already defined '" + name + "'");
  }
  return Object.defineProperty(module.exports, name, {
    get: (function() {
      return handler;
    }),
    configurable: true
  });
};

registered = module.exports.registered = function(name) {
  return Object.prototype.hasOwnProperty.call(module.exports, name);
};

registry = require('./misc/registry');

Object.keys(registry).forEach(function(name) {
  return register(name, module.exports()[name]);
});

register('call', module.exports().call);
