// Generated by CoffeeScript 1.10.0
var conditions, each, registry, wrap,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  slice = [].slice;

module.exports = function() {
  var afters, befores, call_callback, enrich_options, handler, intercept_before, j, jump_to_error, len, name, normalize_options, obj, option, properties, proto, ref, run, stack, store, todos;
  if (arguments.length === 2) {
    obj = arguments[0];
    obj.options = arguments[1];
  } else if (arguments.length === 1) {
    obj = {};
    obj.options = arguments[0];
  } else {
    obj = {};
    obj.options = {};
  }
  if (obj.registry == null) {
    obj.registry = {};
  }
  if (obj.propagated_options == null) {
    obj.propagated_options = [];
  }
  ref = module.exports.propagated_options;
  for (j = 0, len = ref.length; j < len; j++) {
    option = ref[j];
    obj.propagated_options.push(option);
  }
  store = {};
  properties = {};
  stack = [];
  todos = [];
  todos.err = null;
  todos.status = [];
  todos.throw_if_error = true;
  befores = [];
  afters = [];
  normalize_options = function(_arguments, type, enrich) {
    var a, arg, callback, empty, handler, i, k, l, len1, len2, len3, len4, m, n, o, options, opts, ref1, v;
    if (enrich == null) {
      enrich = true;
    }
    empty = false;
    handler = null;
    callback = null;
    options = [];
    for (l = 0, len1 = _arguments.length; l < len1; l++) {
      arg = _arguments[l];
      if (typeof arg === 'function') {
        if (!handler) {
          handler = arg;
        } else if (!callback) {
          callback = arg;
        } else {
          throw Error("Invalid third function argument");
        }
      } else if (Array.isArray(arg)) {
        if (arg.length === 0) {
          empty = true;
        }
        for (m = 0, len2 = arg.length; m < len2; m++) {
          a = arg[m];
          if (!(typeof a === 'object' && !Array.isArray(a) && a !== null)) {
            a = {
              argument: a
            };
          }
          options.push(a);
        }
      } else {
        if (typeof arg !== 'object' && arg !== null) {
          arg = {
            argument: arg
          };
        }
        if (options.length === 0) {
          options.push(arg);
        } else {
          for (n = 0, len3 = options.length; n < len3; n++) {
            opts = options[n];
            for (k in arg) {
              v = arg[k];
              opts[k] = v;
            }
          }
        }
      }
    }
    if (options.length === 0 && empty) {
      return options;
    }
    if (options.length === 0) {
      options.push({});
    }
    if (options.length && options.filter(function(opts) {
      return !opts.handler;
    }).length === 0) {
      callback = handler;
      handler = null;
    }
    for (i = o = 0, len4 = options.length; o < len4; i = ++o) {
      opts = options[i];
      options[i] = {};
      for (k in opts) {
        v = opts[k];
        options[i][k] = v;
      }
      opts = options[i];
      if (type) {
        opts.type = type;
      }
      if (handler) {
        if (opts.handler == null) {
          opts.handler = handler;
        }
      }
      if (callback) {
        if (opts.callback == null) {
          opts.callback = callback;
        }
      }
      if (enrich && ((ref1 = opts.callback) != null ? ref1.length : void 0) > 2) {
        opts.user_args = true;
      }
      if (enrich && store) {
        if (opts.store == null) {
          opts.store = store;
        }
      }
      if (opts.debug) {
        if (opts.log == null) {
          opts.log = function(msg) {
            return process.stdout.write(msg + "\n");
          };
        }
        if (opts.stdout == null) {
          opts.stdout = process.stdout;
        }
        if (opts.stderr == null) {
          opts.stderr = process.stderr;
        }
      }
    }
    return options;
  };
  enrich_options = function(user_options) {
    var global_options, k, local_options, options, parent_options, v;
    global_options = obj.options;
    parent_options = todos.options;
    local_options = user_options;
    options = {};
    for (k in local_options) {
      v = local_options[k];
      options[k] = local_options[k];
    }
    for (k in parent_options) {
      v = parent_options[k];
      if (options[k] === void 0 && indexOf.call(obj.propagated_options, k) >= 0) {
        options[k] = v;
      }
    }
    for (k in global_options) {
      v = global_options[k];
      if (options[k] === void 0) {
        options[k] = v;
      }
    }
    return options;
  };
  intercept_before = function(target_options, callback) {
    if (target_options.intercept_before) {
      return callback();
    }
    return each(befores).run(function(before, next) {
      var k, options, v;
      for (k in before) {
        v = before[k];
        if (k === 'handler') {
          continue;
        }
        if (v !== target_options[k]) {
          return next();
        }
      }
      options = {
        intercept_before: true
      };
      for (k in before) {
        v = before[k];
        options[k] = v;
      }
      for (k in target_options) {
        v = target_options[k];
        if (k === 'handler' || k === 'callback') {
          continue;
        }
        if (options[k] == null) {
          options[k] = v;
        }
      }
      return run(options, next);
    }).then(callback);
  };
  call_callback = function(fn, args) {
    var err, error, mtodos;
    stack.unshift(todos);
    todos = [];
    todos.err = null;
    todos.status = [];
    todos.throw_if_error = true;
    try {
      fn.apply(obj, args);
    } catch (error) {
      err = error;
      todos = stack.shift();
      jump_to_error(err);
      return run();
    }
    mtodos = todos;
    todos = stack.shift();
    if (mtodos.length) {
      return todos.unshift.apply(todos, mtodos);
    }
  };
  jump_to_error = function(err) {
    if (todos == null) {
      throw err;
    }
    while (todos[0] && todos[0].type !== 'then') {
      todos.shift();
    }
    return todos.err = err;
  };
  run = function(options, callback) {
    var err, ref1, status;
    if (!options) {
      options = todos.shift();
    }
    if (!options) {
      if (todos.err && todos.throw_if_error) {
        throw todos.err;
      }
      return;
    }
    if (options.type === 'then') {
      err = todos.err, status = todos.status;
      status = status.some(function(status) {
        return !!status;
      });
      todos.err = null;
      todos.status = [];
      todos.throw_if_error = true;
      if ((ref1 = options.handler) != null) {
        ref1.call(obj, err, status);
      }
      run();
      return;
    }
    options = enrich_options(options);
    if (options.type === 'end') {
      return conditions.all(obj, options, function(err) {
        if (callback) {
          callback(err);
        }
        return run();
      }, function() {
        while (todos[0] && todos[0].type !== 'then') {
          todos.shift();
        }
        if (callback) {
          callback(err);
        }
        return run();
      });
    }
    todos.status.unshift(void 0);
    stack.unshift(todos);
    todos = [];
    todos.err = null;
    todos.status = [];
    todos.throw_if_error = true;
    return wrap.options(options, function(err) {
      var copy, k, throw_error, user_args, v;
      status = false;
      user_args = [];
      throw_error = void 0;
      copy = {};
      for (k in options) {
        v = options[k];
        copy[k] = v;
      }
      options = copy;
      return intercept_before(options, function(err) {
        var exec_callback, options_callback, options_handler;
        exec_callback = function(err) {
          var callback_args;
          if (todos.length !== 0) {
            throw Error('Invalid state');
          }
          if (user_args.length === 0) {
            user_args.length = 2;
          }
          todos = stack.shift();
          if (err && !options.relax) {
            jump_to_error(err);
          }
          if (err && options_callback) {
            todos.throw_if_error = false;
          }
          callback_args = [err, status].concat(slice.call(user_args));
          todos.status[0] = status && !options.shy;
          if (options_callback) {
            call_callback(options_callback, callback_args);
          }
          if (options.relax) {
            err = null;
          }
          if (callback) {
            callback(err, status);
          }
          return run();
        };
        if (err) {
          return exec_callback(err);
        }
        options_handler = options.handler;
        options.handler = void 0;
        options_callback = options.callback;
        options.callback = void 0;
        return conditions.all(obj, options, function(err) {
          return exec_callback(err);
        }, function() {
          var e, error, status_sync, wait_children;
          for (k in options) {
            v = options[k];
            if (/^if.*/.test(k) || /^not_if.*/.test(k)) {
              delete options[k];
            }
          }
          todos.options = options;
          try {
            if (options_handler.length === 2) {
              return options_handler.call(obj, options, function() {
                var _status, arg, args, err, i, l, len1;
                err = arguments[0], _status = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
                if (_status) {
                  status = true;
                }
                for (i = l = 0, len1 = args.length; l < len1; i = ++l) {
                  arg = args[i];
                  user_args.push(arg);
                }
                return setImmediate(function() {
                  return exec_callback(err);
                });
              });
            } else {
              options_handler.call(obj, options);
              status_sync = false;
              wait_children = function() {
                if (!todos.length) {
                  status = status_sync;
                  return setImmediate(exec_callback);
                }
                return run(todos.shift(), function(err, status) {
                  if (err) {
                    return exec_callback(err);
                  }
                  if (status) {
                    status_sync = true;
                  }
                  return wait_children();
                });
              };
              return wait_children();
            }
          } catch (error) {
            e = error;
            return exec_callback(e);
          }
        });
      });
    });
  };
  properties.child = {
    get: function() {
      return function() {
        return module.exports(obj.options);
      };
    }
  };
  properties.then = {
    get: function() {
      return function() {
        todos.push({
          type: 'then',
          handler: arguments[0]
        });
        if (todos.length === 1) {
          setImmediate(run);
        }
        return obj;
      };
    }
  };
  properties.end = {
    get: function() {
      return function() {
        var args, l, len1, options, opts;
        args = [].slice.call(arguments);
        options = normalize_options(args, 'end');
        for (l = 0, len1 = options.length; l < len1; l++) {
          opts = options[l];
          todos.push(opts);
        }
        if (todos.length === options.length) {
          setImmediate(run);
        }
        return obj;
      };
    }
  };
  properties.call = {
    get: function() {
      return function() {
        var args, l, len1, options, opts;
        args = [].slice.call(arguments);
        options = normalize_options(args, 'call');
        for (l = 0, len1 = options.length; l < len1; l++) {
          opts = options[l];
          todos.push(opts);
        }
        if (todos.length === options.length) {
          setImmediate(run);
        }
        return obj;
      };
    }
  };
  properties.before = {
    get: function() {
      return function() {
        var l, len1, options, opts;
        if (typeof arguments[0] === 'string') {
          arguments[0] = {
            type: arguments[0]
          };
        }
        options = normalize_options(arguments, null, false);
        for (l = 0, len1 = options.length; l < len1; l++) {
          opts = options[l];
          befores.push(opts);
        }
        return obj;
      };
    }
  };
  properties.after = {
    get: function() {
      return function() {
        throw Error("look at before, doesnt seem ready yet");
        afters.push({
          type: 'after',
          options: arguments
        });
        return obj;
      };
    }
  };
  properties.status = {
    get: function() {
      return function(index) {
        if (arguments.length === 0) {
          return stack[0].status.some(function(status) {
            return !!status;
          });
        } else {
          return stack[0].status[Math.abs(index)];
        }
      };
    }
  };
  proto = Object.defineProperties(obj, properties);
  Object.defineProperty(obj, 'register', {
    get: function() {
      return function(name, handler) {
        var is_registered_locally;
        is_registered_locally = obj.registered(name, true);
        if (handler === null || handler === false) {
          if (is_registered_locally) {
            delete obj.registry[name];
            delete obj[name];
          } else if (module.exports.registered(name)) {
            throw Error('Unregister a global function from local context');
          }
          return obj;
        }
        if (is_registered_locally) {
          throw Error("Function already defined '" + name + "'");
        }
        obj.registry[name] = handler;
        return Object.defineProperty(obj, name, {
          configurable: true,
          get: function() {
            return function() {
              var args, l, len1, options, opts;
              args = [].slice.call(arguments);
              args.unshift(obj.registry[name]);
              options = normalize_options(args, name);
              for (l = 0, len1 = options.length; l < len1; l++) {
                opts = options[l];
                todos.push(opts);
              }
              if (todos.length === options.length) {
                setImmediate(run);
              }
              return obj;
            };
          }
        });
      };
    }
  });
  Object.defineProperty(obj, 'registered', {
    get: function() {
      return function(name, local_only) {
        var global, local;
        if (local_only == null) {
          local_only = false;
        }
        global = Object.prototype.hasOwnProperty.call(module.exports, name);
        local = Object.prototype.hasOwnProperty.call(obj, name);
        if (local_only) {
          return local;
        } else {
          return global || local;
        }
      };
    }
  });
  for (name in registry) {
    handler = registry[name];
    obj.register(name, handler);
  }
  return obj;
};

module.exports.propagated_options = ['ssh', 'log', 'stdout', 'stderr'];

registry = require('./misc/registry');

(function() {
  var handler, name, register, registered;
  register = module.exports.register = function(name, handler, api) {
    if (handler === null || handler === false) {
      if (registered(name)) {
        delete registry[name];
      }
      if (registered(name)) {
        delete module.exports[name];
      }
      return module.exports;
    }
    if (registered(name)) {
      throw Error("Function already defined '" + name + "'");
    }
    if (!api) {
      registry[name] = handler;
    }
    return Object.defineProperty(module.exports, name, {
      configurable: true,
      get: function() {
        return module.exports()[name];
      }
    });
  };
  registered = module.exports.registered = function(name) {
    return Object.prototype.hasOwnProperty.call(module.exports, name);
  };
  for (name in registry) {
    handler = registry[name];
    register(name, handler);
  }
  register('end', module.exports().end, true);
  register('call', module.exports().call, true);
  register('before', module.exports().before, true);
  register('after', module.exports().before, true);
  return register('then', module.exports().then, true);
})();

conditions = require('./misc/conditions');

wrap = require('./misc/wrap');

each = require('each');
