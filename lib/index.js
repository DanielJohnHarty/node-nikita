// Generated by CoffeeScript 1.9.1
var handler, name, register, registered, registry, wrap,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  slice = [].slice;

module.exports = function() {
  var call_async, call_callback, call_sync, handler, j, jump_to_error, len, name, obj, option, properties, proto, ref, run, stack, todos;
  if (arguments.length === 2) {
    obj = arguments[0];
    obj.options = arguments[1];
  } else if (arguments.length === 1) {
    obj = {};
    obj.options = arguments[0];
  } else {
    obj = {};
    obj.options = {};
  }
  if (obj.registry == null) {
    obj.registry = {};
  }
  if (obj.propagated_options == null) {
    obj.propagated_options = [];
  }
  ref = module.exports.propagated_options;
  for (j = 0, len = ref.length; j < len; j++) {
    option = ref[j];
    obj.propagated_options.push(option);
  }
  properties = {};
  stack = [];
  todos = [];
  todos.err = null;
  todos.changed = false;
  todos.throw_if_error = true;
  call_callback = function(fn, args) {
    var err, mtodos;
    stack.unshift(todos);
    todos = [];
    todos.err = null;
    todos.changed = false;
    todos.throw_if_error = true;
    try {
      fn.apply(obj, args);
    } catch (_error) {
      err = _error;
      todos = stack.shift();
      jump_to_error(err);
      return run();
    }
    mtodos = todos;
    todos = stack.shift();
    if (mtodos.length) {
      return todos.unshift.apply(todos, mtodos);
    }
  };
  call_sync = function(fn, args) {
    var err, mtodos, status;
    stack.unshift(todos);
    todos = [];
    todos.err = null;
    todos.changed = false;
    todos.throw_if_error = true;
    try {
      status = fn.apply(obj, args);
    } catch (_error) {
      err = _error;
      todos = stack.shift();
      jump_to_error(err);
      return run();
    }
    mtodos = todos;
    todos = stack.shift();
    if (mtodos.length) {
      todos.unshift.apply(todos, mtodos);
    }
    return status;
  };
  call_async = function(fn, local_options, callback, name) {
    var err, finish, global_options, k, l, len1, len2, len3, local_options_array, local_opts, m, n, options, opts, parent_options, v;
    if (local_options == null) {
      local_options = {};
    }
    global_options = obj.options;
    parent_options = todos.options;
    local_options_array = Array.isArray(local_options);
    if (!local_options_array) {
      local_options = [local_options];
    }
    options = [];
    for (l = 0, len1 = local_options.length; l < len1; l++) {
      local_opts = local_options[l];
      if ((local_opts != null) && typeof local_opts !== 'object') {
        local_opts = {
          argument: local_opts
        };
      }
      opts = {};
      for (k in local_opts) {
        v = local_opts[k];
        opts[k] = local_opts[k];
      }
      options.push(opts);
    }
    for (k in parent_options) {
      v = parent_options[k];
      for (m = 0, len2 = options.length; m < len2; m++) {
        opts = options[m];
        if (opts[k] === void 0 && indexOf.call(obj.propagated_options, k) >= 0) {
          opts[k] = v;
        }
      }
    }
    for (k in global_options) {
      v = global_options[k];
      for (n = 0, len3 = options.length; n < len3; n++) {
        opts = options[n];
        if (opts[k] === void 0) {
          opts[k] = v;
        }
      }
    }
    try {
      stack.unshift(todos);
      todos = [];
      todos.parent = name;
      todos.err = null;
      todos.changed = false;
      todos.throw_if_error = true;
      finish = function(err, changed) {
        var i, len4, o, status, toto;
        toto = (function() {
          var len4, o, results;
          results = [];
          for (o = 0, len4 = changed.length; o < len4; o++) {
            k = changed[o];
            results.push(k);
          }
          return results;
        })();
        if (arguments[0] == null) {
          arguments[0] = null;
        }
        arguments[1] = !!changed.some(function(status) {
          if (!err) {
            return status;
          }
        });
        if (!local_options_array) {
          toto = toto[0];
        }
        if (arguments.length === 0) {
          arguments.length = 2;
        }
        if (todos.length === 0) {
          todos = stack.shift();
        }
        if (err && callback) {
          todos.throw_if_error = false;
        }
        if (err) {
          jump_to_error(err);
        }
        if (Array.isArray(options)) {
          for (i = o = 0, len4 = options.length; o < len4; i = ++o) {
            opts = options[i];
            if (toto[i] && !err && !opts.shy) {
              status = true;
            }
          }
        } else {
          if (toto && !err && !options.shy) {
            status = true;
          }
        }
        if (status) {
          todos.changed = status;
        }
        if (callback) {
          call_callback(callback, arguments);
        }
        return run();
      };
      if (!local_options_array) {
        options = options[0];
      }
      return wrap(obj, [options, finish], function(options, callback) {
        todos.options = options;
        return fn.call(obj, options, function() {
          var args, err, status;
          err = arguments[0], status = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
          return callback.apply(null, [err, status].concat(slice.call(args)));
        });
      });
    } catch (_error) {
      err = _error;
      todos = stack.shift();
      jump_to_error(err);
      return run();
    }
  };
  jump_to_error = function(err) {
    while (todos[0] && todos[0][0] !== 'then') {
      todos.shift();
    }
    return todos.err = err;
  };
  run = function() {
    var changed, err, fn, ref1, todo;
    todo = todos.shift();
    if (!todo) {
      if (todos.err && todos.throw_if_error) {
        throw todos.err;
      }
      return;
    }
    if (todo[0] === 'then') {
      err = todos.err, changed = todos.changed;
      todos.err = null;
      todos.changed = false;
      todos.throw_if_error = true;
      todo[1][0].call(obj, err, changed);
      run();
      return;
    }
    if (todo[0] === 'call') {
      if (todo[1][0].length === 2) {
        return call_async(todo[1][0], null, null, 'call');
      } else {
        changed = call_sync(todo[1][0], []);
        if (changed) {
          todos.changed = true;
        }
        return run();
      }
    }
    todo[1][0].user_args = ((ref1 = todo[1][1]) != null ? ref1.length : void 0) > 2;
    fn = obj.registry[todo[0]] || registry[todo[0]];
    return call_async(fn, todo[1][0], todo[1][1], todo[0]);
  };
  properties.child = {
    get: function() {
      return function() {
        return module.exports(obj.options);
      };
    }
  };
  properties.then = {
    get: function() {
      return function() {
        todos.push(['then', arguments]);
        if (todos.length === 1) {
          process.nextTick(run);
        }
        return obj;
      };
    }
  };
  properties.call = {
    get: function() {
      return function() {
        todos.push(['call', arguments]);
        process.nextTick(function() {});
        if (todos.length === 1) {
          process.nextTick(run);
        }
        return obj;
      };
    }
  };
  proto = Object.defineProperties(obj, properties);
  Object.defineProperty(obj, 'register', {
    get: function() {
      return function(name, handler) {
        var is_registered_locally;
        is_registered_locally = obj.registered(name, true);
        if (handler === null || handler === false) {
          if (is_registered_locally) {
            delete obj.registry[name];
            delete obj[name];
          } else if (module.exports.registered(name)) {
            throw Error('Unregister a global function from local context');
          }
          return obj;
        }
        if (is_registered_locally) {
          throw Error("Function already defined '" + name + "'");
        }
        obj.registry[name] = handler;
        return Object.defineProperty(obj, name, {
          configurable: true,
          get: function() {
            return function() {
              var dest, ref1;
              dest = (ref1 = arguments[0]) != null ? ref1.destination : void 0;
              todos.push([name, arguments]);
              if (todos.length === 1) {
                process.nextTick(run);
              }
              return obj;
            };
          }
        });
      };
    }
  });
  Object.defineProperty(obj, 'registered', {
    get: function() {
      return function(name, local_only) {
        var global, local;
        if (local_only == null) {
          local_only = false;
        }
        global = Object.prototype.hasOwnProperty.call(module.exports, name);
        local = Object.prototype.hasOwnProperty.call(obj, name);
        if (local_only) {
          return local;
        } else {
          return global || local;
        }
      };
    }
  });
  for (name in registry) {
    handler = registry[name];
    obj.register(name, handler);
  }
  return obj;
};

module.exports.propagated_options = ['ssh', 'log', 'stdout', 'stderr'];

register = module.exports.register = function(name, handler) {
  if (handler === null || handler === false) {
    if (registered(name)) {
      delete registry[name];
    }
    if (registered(name)) {
      delete module.exports[name];
    }
    return module.exports;
  }
  if (registered(name)) {
    throw Error("Function already defined '" + name + "'");
  }
  if (name !== 'call') {
    registry[name] = handler;
  }
  return Object.defineProperty(module.exports, name, {
    configurable: true,
    get: function() {
      return module.exports()[name];
    }
  });
};

registered = module.exports.registered = function(name) {
  return Object.prototype.hasOwnProperty.call(module.exports, name);
};

registry = require('./misc/registry');

for (name in registry) {
  handler = registry[name];
  register(name, handler);
}

register('call', module.exports().call);

wrap = require('./misc/wrap');
