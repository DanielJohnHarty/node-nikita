// Generated by CoffeeScript 1.10.0
var _, context, fn, fn1, i, len, name, ref, registry;

module.exports = function() {
  return context.apply(null, arguments);
};

context = require('./context');

registry = require('./misc/registry');

module.exports.register = function(name, handler) {
  if (!handler) {
    return module.exports.unregister(name);
  }
  registry.register(name, handler);
  return Object.defineProperty(module.exports, name, {
    configurable: true,
    get: function() {
      return context()[name];
    }
  });
};

module.exports.unregister = function(name, handler) {
  registry.unregister(name, handler);
  delete module.exports[name];
  return module.exports;
};

module.exports.registered = registry.registered;

fn = function(name) {
  return Object.defineProperty(module.exports, name, {
    configurable: true,
    get: function() {
      return context()[name];
    }
  });
};
for (name in registry) {
  _ = registry[name];
  fn(name);
}

ref = ['end', 'call', 'before', 'after', 'then', 'on'];
fn1 = function(name) {
  return module.exports[name] = function() {
    var obj;
    obj = context();
    return obj[name].apply(obj, arguments);
  };
};
for (i = 0, len = ref.length; i < len; i++) {
  name = ref[i];
  fn1(name);
}
