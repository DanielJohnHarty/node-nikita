// Generated by CoffeeScript 1.9.1
var properties, registry;

module.exports = function() {
  var obj, properties, proto, run, status, todos;
  if (arguments.length === 2) {
    obj = arguments[0];
    obj.options = arguments[1];
  } else if (arguments.length === 1) {
    obj = {};
    obj.options = arguments[0];
  } else {
    obj = {};
    obj.options = {};
  }
  properties = {};
  todos = [];
  status = {
    err: null,
    changed: false,
    throw_if_error: true,
    running: false,
    id: 0
  };
  run = function(force) {
    var changed, err, i, k, len, ref, ref1, ref2, ref3, t, todo, v;
    if (force) {
      status.running = false;
    }
    if (status.running) {
      return;
    }
    todo = todos.shift();
    if (!todo) {
      if (status.err && status.throw_if_error) {
        throw status.err;
      }
      return;
    }
    if (status.err && todo[0] !== 'then') {
      return run(true);
    }
    if (todo[0] === 'then') {
      err = status.err, changed = status.changed;
      status.err = null;
      status.changed = false;
      status.throw_if_error = true;
      return todo[1][0].call(obj, err, changed);
    }
    if (todo[0] === 'call') {
      if (todo[1][0].length) {
        try {
          status.running = true;
          return todo[1][0].call(obj, function(err, changed) {
            if (err) {
              status.err = err;
            } else if (changed) {
              status.changed = true;
            }
            return run(true);
          });
        } catch (_error) {
          err = _error;
          status.err = err;
        }
        run(true);
      } else {
        try {
          changed = todo[1][0].call(obj);
        } catch (_error) {
          err = _error;
        }
        if (err) {
          status.err = err;
        } else if (changed) {
          status.changed = true;
        }
        run(true);
      }
      return;
    }
    if (Array.isArray(todo[1][0])) {
      ref = todo[1][0];
      for (i = 0, len = ref.length; i < len; i++) {
        t = ref[i];
        ref1 = obj.options;
        for (k in ref1) {
          v = ref1[k];
          if (typeof t[k] === 'undefined') {
            t[k] = obj.options[k];
          }
        }
      }
    } else {
      t = todo[1][0];
      ref2 = obj.options;
      for (k in ref2) {
        v = ref2[k];
        if (typeof t[k] === 'undefined') {
          t[k] = obj.options[k];
        }
      }
    }
    todo[1][0].user_args = ((ref3 = todo[1][1]) != null ? ref3.length : void 0) > 2;
    status.running = true;
    return registry[todo[0]].call(obj, todo[1][0], function(err, changed, to) {
      var e, ref4, result;
      result = false;
      try {
        result = (ref4 = todo[1][1]) != null ? ref4.apply(null, arguments) : void 0;
        if (err) {
          status.throw_if_error = false;
        }
        if (result === true) {
          err = null;
        }
      } catch (_error) {
        e = _error;
        if (!err) {
          err = e;
        }
      }
      if (err) {
        status.err = err;
      } else if (changed) {
        status.changed = true;
      }
      return run(true);
    });
  };
  properties.then = {
    get: function() {
      return function() {
        var id;
        id = status.id++;
        todos.push(['then', arguments, id]);
        if (todos.length === 1) {
          process.nextTick(run);
        }
        return obj;
      };
    }
  };
  properties.call = {
    get: function() {
      return function() {
        var id;
        id = status.id++;
        todos.push(['call', arguments, id]);
        process.nextTick(function() {});
        if (todos.length === 1) {
          process.nextTick(run);
        }
        return obj;
      };
    }
  };
  Object.keys(registry).forEach(function(name) {
    return properties[name] = {
      get: function() {
        return function() {
          var dest, id, ref;
          id = status.id++;
          dest = (ref = arguments[0]) != null ? ref.destination : void 0;
          todos.push([name, arguments, id]);
          if (todos.length === 1) {
            process.nextTick(run);
          }
          return obj;
        };
      }
    };
  });
  proto = Object.defineProperties(obj, properties);
  return obj;
};

properties = {};

registry = require('./misc/registry');

Object.keys(registry).forEach(function(name) {
  return properties[name] = {
    get: function() {
      return module.exports()[name];
    }
  };
});

properties.call = {
  get: function() {
    return module.exports().call;
  }
};

Object.defineProperties(module.exports, properties);
