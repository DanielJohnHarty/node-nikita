// Generated by CoffeeScript 1.10.0
var EventEmitter, conditions, domain, each, registry, todos_create, todos_reset, wrap,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = function() {
  var _run_, afters, befores, call_callback, depth, domain_on_error, enrich_options, handle_multiple_call, handler, j, jump_to_error, killed, len, name, normalize_options, obj, option, properties, proto, ref, ref1, run, stack, store, todos;
  if (arguments.length === 2) {
    obj = arguments[0];
    obj.options = arguments[1];
  } else if (arguments.length === 1) {
    obj = new EventEmitter;
    obj.options = arguments[0];
  } else {
    obj = new EventEmitter;
    obj.options = {};
  }
  if (obj.registry == null) {
    obj.registry = {};
  }
  if (obj.propagated_options == null) {
    obj.propagated_options = [];
  }
  ref = module.exports.propagated_options;
  for (j = 0, len = ref.length; j < len; j++) {
    option = ref[j];
    obj.propagated_options.push(option);
  }
  store = {};
  properties = {};
  stack = [];
  todos = todos_create();
  befores = [];
  afters = [];
  depth = 0;
  killed = false;
  if (obj.options.domain === true) {
    obj.options.domain = domain.create();
  }
  domain_on_error = function(err) {
    err.message = "Invalid State Error [" + err.message + "]";
    return handle_multiple_call(err);
  };
  if ((ref1 = obj.options.domain) != null) {
    ref1.on('error', domain_on_error);
  }
  normalize_options = function(_arguments, type, enrich) {
    var a, arg, callback, empty, handler, i, k, l, len1, len2, len3, len4, m, n, options, opts, p, ref2, v;
    if (enrich == null) {
      enrich = true;
    }
    empty = false;
    handler = null;
    callback = null;
    options = [];
    for (l = 0, len1 = _arguments.length; l < len1; l++) {
      arg = _arguments[l];
      if (typeof arg === 'function') {
        if (!handler) {
          handler = arg;
        } else if (!callback) {
          callback = arg;
        } else {
          throw Error("Invalid third function argument");
        }
      } else if (Array.isArray(arg)) {
        if (arg.length === 0) {
          empty = true;
        }
        for (m = 0, len2 = arg.length; m < len2; m++) {
          a = arg[m];
          if (!(typeof a === 'object' && !Array.isArray(a) && a !== null)) {
            a = {
              argument: a
            };
          }
          options.push(a);
        }
      } else {
        if (typeof arg !== 'object' && arg !== null) {
          arg = {
            argument: arg
          };
        }
        if (options.length === 0) {
          options.push(arg);
        } else {
          for (n = 0, len3 = options.length; n < len3; n++) {
            opts = options[n];
            for (k in arg) {
              v = arg[k];
              opts[k] = v;
            }
          }
        }
      }
    }
    if (options.length === 0 && empty) {
      return options;
    }
    if (options.length === 0) {
      options.push({});
    }
    if (options.length && options.filter(function(opts) {
      return !opts.handler;
    }).length === 0) {
      callback = handler;
      handler = null;
    }
    for (i = p = 0, len4 = options.length; p < len4; i = ++p) {
      opts = options[i];
      options[i] = {};
      for (k in opts) {
        v = opts[k];
        options[i][k] = v;
      }
      opts = options[i];
      if (type) {
        opts.type = type;
      }
      if (handler) {
        if (opts.handler == null) {
          opts.handler = handler;
        }
      }
      if (callback) {
        if (opts.callback == null) {
          opts.callback = callback;
        }
      }
      if (enrich && ((ref2 = opts.callback) != null ? ref2.length : void 0) > 2) {
        opts.user_args = true;
      }
      if (enrich && store) {
        if (opts.store == null) {
          opts.store = store;
        }
      }
    }
    return options;
  };
  enrich_options = function(user_options) {
    var _logs, global_options, k, options, parent_options, ref2, v;
    user_options.enriched = true;
    global_options = obj.options;
    parent_options = todos.options;
    options = {};
    for (k in user_options) {
      v = user_options[k];
      options[k] = user_options[k];
    }
    for (k in parent_options) {
      v = parent_options[k];
      if (options[k] === void 0 && indexOf.call(obj.propagated_options, k) >= 0) {
        options[k] = v;
      }
    }
    for (k in global_options) {
      v = global_options[k];
      if (options[k] === void 0) {
        options[k] = v;
      }
    }
    if (!((ref2 = options.log) != null ? ref2.dont : void 0)) {
      if (options.log && !Array.isArray(options.log)) {
        _logs = [options.log];
      } else if (!options.log) {
        _logs = [];
      }
    }
    if (options.log == null) {
      options.log = [];
    }
    if (!Array.isArray(options.log)) {
      options.log = [options.log];
    }
    _logs = options.log;
    if (options.debug) {
      _logs.push(function(log) {
        var msg, ref3;
        if ((ref3 = log.type) === 'stdout' || ref3 === 'stderr') {
          return;
        }
        msg = "[" + log.total_depth + "." + log.level + " " + log.module + "] " + (JSON.stringify(log.message));
        msg = (function() {
          switch (log.type) {
            case 'stdout_stream':
              return "\x1b[36m" + msg + "\x1b[39m";
            case 'stderr_stream':
              return "\x1b[35m" + msg + "\x1b[39m";
            default:
              return "\x1b[32m" + msg + "\x1b[39m";
          }
        })();
        return process.stdout.write(msg + "\n");
      });
    }
    options.log = function(log) {
      var _log, args, file, frame, l, len1, line, method, path, stackTrace;
      if (typeof log === 'string') {
        log = {
          message: log
        };
      }
      if (log.level == null) {
        log.level = 'INFO';
      }
      if (log.time == null) {
        log.time = Date.now();
      }
      if (log.module == null) {
        log.module = void 0;
      }
      if (log.header_depth == null) {
        log.header_depth = depth;
      }
      if (log.total_depth == null) {
        log.total_depth = stack.length;
      }
      if (log.type == null) {
        log.type = 'text';
      }
      args = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];
      stackTrace = require('stack-trace');
      path = require('path');
      frame = stackTrace.get()[1];
      file = path.basename(frame.getFileName());
      line = frame.getLineNumber();
      method = frame.getFunctionName();
      log.file = file;
      log.line = line;
      args.unshift("" + file + ":" + line + " in " + method + "()");
      for (l = 0, len1 = _logs.length; l < len1; l++) {
        _log = _logs[l];
        _log(log);
      }
      return typeof obj.emit === "function" ? obj.emit(log.type, log) : void 0;
    };
    return options;
  };
  call_callback = function(fn, args) {
    var err, error, mtodos;
    stack.unshift(todos);
    todos = todos_create();
    try {
      fn.apply(obj, args);
    } catch (error) {
      err = error;
      todos = stack.shift();
      jump_to_error(err);
      args[0] = err;
      return run();
    }
    mtodos = todos;
    todos = stack.shift();
    if (mtodos.length) {
      return todos.unshift.apply(todos, mtodos);
    }
  };
  handle_multiple_call = function(err) {
    killed = true;
    while (stack.length) {
      todos = stack.shift();
    }
    jump_to_error(err);
    return run();
  };
  jump_to_error = function(err) {
    while (todos[0] && todos[0].type !== 'then') {
      todos.shift();
    }
    return todos.err = err;
  };
  _run_ = function() {
    if (obj.options.domain) {
      return obj.options.domain.run(run);
    } else {
      return run();
    }
  };
  run = function(options, callback) {
    var err, org_options, ref2, ref3, status;
    if (!options) {
      options = todos.shift();
    }
    if (!options) {
      if (stack.length === 0) {
        if ((ref2 = obj.options.domain) != null) {
          ref2.removeListener('error', domain_on_error);
        }
      }
      if (callback) {
        callback(todos.err);
      } else {
        if (stack.length === 0 && todos.err && todos.throw_if_error) {
          throw todos.err;
        }
      }
      return;
    }
    org_options = options;
    options = enrich_options(options);
    if (options.type === 'then') {
      err = todos.err, status = todos.status;
      status = status.some(function(status) {
        return !status.shy && !!status.value;
      });
      todos_reset(todos);
      if ((ref3 = options.handler) != null) {
        ref3.call(obj, err, status);
      }
      run();
      return;
    }
    if (killed) {
      return;
    }
    if (options.type === 'end') {
      return conditions.all(obj, options, function(err) {
        if (callback) {
          callback(err);
        }
        return run();
      }, function() {
        while (todos[0] && todos[0].type !== 'then') {
          todos.shift();
        }
        if (callback) {
          callback(err);
        }
        return run();
      });
    }
    if (options.header) {
      depth++;
    }
    if (options.header) {
      options.log({
        message: options.header,
        type: 'header',
        depth: depth
      });
    }
    todos.status.unshift({
      shy: options.shy,
      value: void 0
    });
    stack.unshift(todos);
    todos = todos_create();
    todos.options = org_options;
    return wrap.options(options, function(err) {
      var copy, do_callback, do_conditions, do_handler, do_intercept_after, do_intercept_before, k, options_callback, options_handler, v;
      copy = {};
      for (k in options) {
        v = options[k];
        copy[k] = v;
      }
      options = copy;
      options_handler = options.handler;
      options.handler = void 0;
      options_callback = options.callback;
      options.callback = void 0;
      do_intercept_before = function() {
        if (options.intercept_before) {
          return do_conditions();
        }
        return each(befores).call(function(before, next) {
          var opts;
          for (k in before) {
            v = before[k];
            if (k === 'handler') {
              continue;
            }
            if (v !== options[k]) {
              return next();
            }
          }
          opts = {
            intercept_before: true
          };
          for (k in before) {
            v = before[k];
            opts[k] = v;
          }
          for (k in options) {
            v = options[k];
            if (k === 'handler' || k === 'callback') {
              continue;
            }
            if (opts[k] == null) {
              opts[k] = v;
            }
          }
          return run(opts, next);
        }).error(function(err) {
          return do_callback([err]);
        }).then(do_conditions);
      };
      do_conditions = function() {
        return conditions.all(obj, options, function(err) {
          return do_callback([err]);
        }, function() {
          for (k in options) {
            v = options[k];
            if (/^if.*/.test(k) || /^unless.*/.test(k)) {
              delete options[k];
            }
          }
          return do_handler();
        });
      };
      do_handler = function() {
        var called, error, status_sync, wait_children;
        called = false;
        try {
          if (options_handler.length === 2) {
            return options_handler.call(obj, options, function() {
              var args;
              if (killed) {
                return;
              }
              if (called) {
                return handle_multiple_call(Error('Multiple call detected'));
              }
              called = true;
              args = [].slice.call(arguments, 0);
              return setImmediate(function() {
                return do_intercept_after(args);
              });
            });
          } else {
            options_handler.call(obj, options);
            if (killed) {
              return;
            }
            if (called) {
              return handle_multiple_call(Error('Multiple call detected'));
            }
            called = true;
            status_sync = false;
            wait_children = function() {
              var loptions;
              if (!todos.length) {
                return setImmediate(function() {
                  return do_intercept_after([null, status_sync]);
                });
              }
              loptions = todos.shift();
              return run(loptions, function(err, status) {
                if (err) {
                  return do_intercept_after([err]);
                }
                if (status && !loptions.shy) {
                  status_sync = true;
                }
                return wait_children();
              });
            };
            return wait_children();
          }
        } catch (error) {
          err = error;
          todos = [];
          return do_intercept_after([err]);
        }
      };
      do_intercept_after = function(args, callback) {
        if (options.intercept_after) {
          return do_callback(args);
        }
        return each(afters).call(function(after, next) {
          var opts;
          for (k in after) {
            v = after[k];
            if (k === 'handler') {
              continue;
            }
            if (v !== options[k]) {
              return next();
            }
          }
          opts = {
            intercept_after: true
          };
          for (k in after) {
            v = after[k];
            opts[k] = v;
          }
          for (k in options) {
            v = options[k];
            if (k === 'handler' || k === 'callback') {
              continue;
            }
            if (opts[k] == null) {
              opts[k] = v;
            }
          }
          opts.callback_arguments = args;
          return run(opts, next);
        }).error(function(err) {
          return do_callback([err]);
        }).then(function() {
          return do_callback(args);
        });
      };
      do_callback = function(args) {
        if (killed) {
          return;
        }
        if (!args[0]) {
          args[0] = void 0;
        }
        args[1] = !!args[1];
        if (todos.length === 0) {
          todos = stack.shift();
        }
        if (args[0] && !options.relax) {
          jump_to_error(args[0]);
        }
        if (args[0] && options_callback) {
          todos.throw_if_error = false;
        }
        todos.status[0].value = args[1];
        if (options_callback) {
          call_callback(options_callback, args);
        }
        if (options.relax) {
          args[0] = null;
        }
        if (options.header) {
          depth--;
        }
        if (callback) {
          callback(args[0], args[1]);
        }
        return run();
      };
      return do_intercept_before();
    });
  };
  properties.child = {
    get: function() {
      return function() {
        return module.exports(obj.options);
      };
    }
  };
  properties.then = {
    get: function() {
      return function() {
        todos.push({
          type: 'then',
          handler: arguments[0]
        });
        if (todos.length === 1) {
          setImmediate(_run_);
        }
        return obj;
      };
    }
  };
  properties.end = {
    get: function() {
      return function() {
        var args, l, len1, options, opts;
        args = [].slice.call(arguments);
        options = normalize_options(args, 'end');
        for (l = 0, len1 = options.length; l < len1; l++) {
          opts = options[l];
          todos.push(opts);
        }
        if (todos.length === options.length) {
          setImmediate(_run_);
        }
        return obj;
      };
    }
  };
  properties.call = {
    get: function() {
      return function() {
        var args, l, len1, len2, m, options, opts;
        args = [].slice.call(arguments);
        options = normalize_options(args, 'call');
        for (l = 0, len1 = options.length; l < len1; l++) {
          opts = options[l];
          if (!opts.handler && typeof opts.argument === 'string') {
            opts.handler = require.main.require(opts.argument);
          }
          if (!opts.handler) {
            throw Error('Missing handler option');
          }
          if (typeof opts.handler !== 'function') {
            throw Error("Handler not a function, got '" + opts.handler + "'");
          }
        }
        for (m = 0, len2 = options.length; m < len2; m++) {
          opts = options[m];
          todos.push(opts);
        }
        if (todos.length === options.length) {
          setImmediate(_run_);
        }
        return obj;
      };
    }
  };
  properties.before = {
    get: function() {
      return function() {
        var l, len1, options, opts;
        if (typeof arguments[0] === 'string') {
          arguments[0] = {
            type: arguments[0]
          };
        }
        options = normalize_options(arguments, null, false);
        for (l = 0, len1 = options.length; l < len1; l++) {
          opts = options[l];
          if (typeof opts.handler !== 'function') {
            throw Error("Invalid handler " + (JSON.stringify(opts.handler)));
          }
          befores.push(opts);
        }
        return obj;
      };
    }
  };
  properties.after = {
    get: function() {
      return function() {
        var l, len1, options, opts;
        if (typeof arguments[0] === 'string') {
          arguments[0] = {
            type: arguments[0]
          };
        }
        options = normalize_options(arguments, null, false);
        for (l = 0, len1 = options.length; l < len1; l++) {
          opts = options[l];
          if (typeof opts.handler !== 'function') {
            throw Error("Invalid handler " + (JSON.stringify(opts.handler)));
          }
          afters.push(opts);
        }
        return obj;
      };
    }
  };
  properties.status = {
    get: function() {
      return function(index) {
        var l, len1, len2, m, ref2, ref3, ref4, status, value;
        if (arguments.length === 0) {
          return stack[0].status.some(function(status) {
            return !status.shy && !!status.value;
          });
        } else if (index === false) {
          value = stack[0].status.some(function(status) {
            return !status.shy && !!status.value;
          });
          ref2 = stack[0].status;
          for (l = 0, len1 = ref2.length; l < len1; l++) {
            status = ref2[l];
            status.value = false;
          }
          return value;
        } else if (index === true) {
          value = stack[0].status.some(function(status) {
            return !status.shy && !!status.value;
          });
          ref3 = stack[0].status;
          for (m = 0, len2 = ref3.length; m < len2; m++) {
            status = ref3[m];
            status.value = true;
          }
          return value;
        } else {
          return (ref4 = stack[0].status[Math.abs(index)]) != null ? ref4.value : void 0;
        }
      };
    }
  };
  proto = Object.defineProperties(obj, properties);
  Object.defineProperty(obj, 'register', {
    get: function() {
      return function(name, handler) {
        var is_registered_locally;
        is_registered_locally = obj.registered(name, true);
        if (handler === null || handler === false) {
          if (is_registered_locally) {
            delete obj.registry[name];
            delete obj[name];
          } else if (module.exports.registered(name)) {
            throw Error('Unregister a global function from local context');
          }
          return obj;
        }
        if (is_registered_locally) {
          throw Error("Function already defined '" + name + "'");
        }
        obj.registry[name] = handler;
        return Object.defineProperty(obj, name, {
          configurable: true,
          get: function() {
            return function() {
              var args, l, len1, options, opts;
              args = [].slice.call(arguments);
              args.unshift(obj.registry[name]);
              options = normalize_options(args, name);
              for (l = 0, len1 = options.length; l < len1; l++) {
                opts = options[l];
                todos.push(opts);
              }
              if (todos.length === options.length) {
                setImmediate(_run_);
              }
              return obj;
            };
          }
        });
      };
    }
  });
  Object.defineProperty(obj, 'registered', {
    get: function() {
      return function(name, local_only) {
        var global, local;
        if (local_only == null) {
          local_only = false;
        }
        global = Object.prototype.hasOwnProperty.call(module.exports, name);
        local = Object.prototype.hasOwnProperty.call(obj, name);
        if (local_only) {
          return local;
        } else {
          return global || local;
        }
      };
    }
  });
  for (name in registry) {
    handler = registry[name];
    obj.register(name, handler);
  }
  return obj;
};

module.exports.propagated_options = ['ssh', 'log', 'stdout', 'stderr', 'debug'];

todos_create = function() {
  var todos;
  todos = [];
  todos_reset(todos);
  return todos;
};

todos_reset = function(todos) {
  todos.err = null;
  todos.status = [];
  return todos.throw_if_error = true;
};

domain = require('domain');

EventEmitter = require('events').EventEmitter;

registry = require('./misc/registry');

(function() {
  var handler, name, register, registered;
  register = module.exports.register = function(name, handler, api) {
    if (handler === null || handler === false) {
      if (registered(name)) {
        delete registry[name];
      }
      if (registered(name)) {
        delete module.exports[name];
      }
      return module.exports;
    }
    if (registered(name)) {
      throw Error("Function already defined '" + name + "'");
    }
    if (!api) {
      registry[name] = handler;
    }
    return Object.defineProperty(module.exports, name, {
      configurable: true,
      get: function() {
        return module.exports()[name];
      }
    });
  };
  registered = module.exports.registered = function(name) {
    return Object.prototype.hasOwnProperty.call(module.exports, name);
  };
  for (name in registry) {
    handler = registry[name];
    register(name, handler);
  }
  register('end', module.exports().end, true);
  register('call', module.exports().call, true);
  register('before', module.exports().before, true);
  register('after', module.exports().after, true);
  register('then', module.exports().then, true);
  return module.exports.on = function() {
    var o, obj;
    obj = module.exports();
    return o = obj.on.apply(obj, arguments);
  };
})();

each = require('each');

conditions = require('./misc/conditions');

wrap = require('./misc/wrap');
