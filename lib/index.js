// Generated by CoffeeScript 1.10.0
var context, registry;

module.exports = new Proxy((function() {
  return context.apply(null, arguments);
}), {
  get: function(target, name) {
    var builder, ctx, proxy, tree;
    ctx = context();
    tree = [];
    tree.push(name);
    builder = function() {
      var a;
      if (name === 'register' || name === 'registered' || name === 'unregister') {
        return registry[name].apply(registry, arguments);
      }
      a = ctx[tree.shift()];
      if (typeof a !== 'function') {
        return a;
      }
      while (name = tree.shift()) {
        a[name];
      }
      return a.apply(ctx, arguments);
    };
    proxy = new Proxy(builder, {
      get: function(target, name) {
        tree.push(name);
        return proxy;
      }
    });
    return proxy;
  }
});

context = require('./context');

registry = require('./registry');

registry.register({
  assert: require('./core/assert'),
  backup: require('./core/backup'),
  cache: require('./core/cache'),
  chmod: require('./core/chmod'),
  chown: require('./core/chown'),
  compress: require('./core/compress'),
  copy: require('./core/copy'),
  download: require('./core/download'),
  execute: require('./core/execute'),
  extract: require('./core/extract'),
  git: require('./core/git'),
  group: require('./core/group'),
  iptables: require('./core/iptables'),
  link: require('./core/link'),
  mkdir: require('./core/mkdir'),
  move: require('./core/move'),
  remove: require('./core/remove'),
  render: require('./core/render'),
  system_limits: require('./core/system_limits'),
  touch: require('./core/touch'),
  upload: require('./core/upload'),
  user: require('./core/user'),
  cron: {
    add: require('./cron/add'),
    remove: require('./cron/remove')
  },
  db: {
    database: {
      '': require('./db/database'),
      exists: require('./db/database/exists'),
      remove: require('./db/database/remove'),
      wait: require('./db/database/wait')
    },
    schema: {
      '': require('./db/schema'),
      remove: require('./db/schema/remove')
    },
    user: {
      '': require('./db/user'),
      exists: require('./db/user/exists'),
      remove: require('./db/user/remove')
    }
  },
  docker: {
    build: require('./docker/build'),
    checksum: require('./docker/checksum'),
    cp: require('./docker/cp'),
    exec: require('./docker/exec'),
    kill: require('./docker/kill'),
    load: require('./docker/load'),
    pause: require('./docker/pause'),
    pull: require('./docker/pull'),
    restart: require('./docker/restart'),
    rm: require('./docker/rm'),
    rmi: require('./docker/rmi'),
    run: require('./docker/run'),
    save: require('./docker/save'),
    service: require('./docker/service'),
    start: require('./docker/start'),
    status: require('./docker/status'),
    stop: require('./docker/stop'),
    unpause: require('./docker/unpause'),
    volume_create: require('./docker/volume_create'),
    volume_rm: require('./docker/volume_rm'),
    wait: require('./docker/wait')
  },
  java: {
    keystore_add: require('./java/keystore_add'),
    keystore_remove: require('./java/keystore_remove')
  },
  krb5: {
    addprinc: require('./krb5/addprinc'),
    delprinc: require('./krb5/delprinc'),
    ktadd: require('./krb5/ktadd')
  },
  ldap: {
    acl: require('./ldap/acl'),
    add: require('./ldap/add'),
    "delete": require('./ldap/delete'),
    index: require('./ldap/index'),
    schema: require('./ldap/schema'),
    user: require('./ldap/user')
  },
  log: {
    fs: require('./log/fs'),
    md: require('./log/md'),
    csv: require('./log/csv')
  },
  service: {
    '': require('./service'),
    install: require('./service/install'),
    remove: require('./service/remove'),
    restart: require('./service/restart'),
    start: require('./service/start'),
    startup: require('./service/startup'),
    status: require('./service/status'),
    stop: require('./service/stop')
  },
  wait: {
    '': require('./wait/time'),
    connect: {
      '': require('./wait/connect')
    },
    execute: {
      '': require('./wait/execute')
    },
    exist: {
      '': require('./wait/exist')
    }
  },
  file: {
    '': require('./file'),
    assert: require('./file/assert'),
    ini: require('./file/ini'),
    json: require('./file/json'),
    properties: require('./file/properties'),
    yaml: require('./file/yaml')
  },
  cron_add: require('./cron/add'),
  cron_remove: require('./cron/remove'),
  docker_build: require('./docker/build'),
  docker_checksum: require('./docker/checksum'),
  docker_cp: require('./docker/cp'),
  docker_exec: require('./docker/exec'),
  docker_kill: require('./docker/kill'),
  docker_load: require('./docker/load'),
  docker_pause: require('./docker/pause'),
  docker_restart: require('./docker/restart'),
  docker_rm: require('./docker/rm'),
  docker_rmi: require('./docker/rmi'),
  docker_run: require('./docker/run'),
  docker_save: require('./docker/save'),
  docker_service: require('./docker/service'),
  docker_start: require('./docker/start'),
  docker_status: require('./docker/status'),
  docker_stop: require('./docker/stop'),
  docker_unpause: require('./docker/unpause'),
  docker_volume_create: require('./docker/volume_create'),
  docker_volume_rm: require('./docker/volume_rm'),
  docker_wait: require('./docker/wait'),
  java_keystore_add: require('./java/keystore_add'),
  java_keystore_remove: require('./java/keystore_remove'),
  krb5_addprinc: require('./krb5/addprinc'),
  krb5_delprinc: require('./krb5/delprinc'),
  krb5_ktadd: require('./krb5/ktadd'),
  ldap_acl: require('./ldap/acl'),
  ldap_add: require('./ldap/add'),
  ldap_delete: require('./ldap/delete'),
  ldap_index: require('./ldap/index'),
  ldap_schema: require('./ldap/schema'),
  ldap_user: require('./ldap/user'),
  service_install: require('./service/install'),
  service_remove: require('./service/remove'),
  service_restart: require('./service/restart'),
  service_start: require('./service/start'),
  service_startup: require('./service/startup'),
  service_status: require('./service/status'),
  service_stop: require('./service/stop'),
  wait_connect: require('./wait/connect'),
  wait_execute: require('./wait/execute'),
  wait_exist: require('./wait/exist'),
  write_ini: require('./file/ini'),
  write_properties: require('./file/properties'),
  write_yaml: require('./file/yaml')
});
