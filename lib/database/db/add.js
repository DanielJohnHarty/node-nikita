// Generated by CoffeeScript 1.10.0
var each, misc;

module.exports = function(options, callback) {
  var adm_cmd, k, modified_db, modified_user, ref, ref1, v;
  if (options.db == null) {
    options.db = {};
  }
  ref = options.db;
  for (k in ref) {
    v = ref[k];
    if (options[k] == null) {
      options[k] = v;
    }
  }
  if (options.host == null) {
    return callback(new Error('Missing hostname'));
  }
  if (options.admin_username == null) {
    return callback(new Error('Missing admin name'));
  }
  if (options.admin_password == null) {
    return callback(new Error('Missing admin password'));
  }
  if (options.database == null) {
    return callback(new Error('Missing database option '));
  }
  if (!Array.isArray(options.database)) {
    options.database = [options.database];
  }
  if (options.user == null) {
    options.user = [];
  }
  if (!Array.isArray(options.user)) {
    options.user = [options.user];
  }
  if (options.engine != null) {
    options.engine = options.engine.toUpperCase();
  }
  if (options.engine == null) {
    options.engine = 'POSTGRES';
  }
  if ((ref1 = options.engine) !== 'MYSQL' && ref1 !== 'POSTGRES') {
    return callback(new Error('Unsupport engine type'));
  }
  if (options.engine == null) {
    options.log('Missing engine type. Defaulting to PostgreSQL');
  }
  options.log({
    message: "Database engine set to " + options.engine,
    level: 'INFO',
    module: 'mecano/database/db/add'
  });
  if (options.port == null) {
    options.port = 5432;
  }
  options.log({
    message: "Database port set to " + options.port,
    level: 'DEBUG',
    module: 'mecano/database/db/add'
  });
  adm_cmd = '';
  switch (options.engine) {
    case 'MYSQL':
      adm_cmd += 'mysql';
      adm_cmd += " -h " + options.host;
      adm_cmd += " -u " + options.admin_username;
      adm_cmd += " -p " + options.admin_password;
      break;
    case 'POSTGRES':
      adm_cmd += "PGPASSWORD=" + options.admin_password + " psql";
      adm_cmd += " -h " + options.host;
      adm_cmd += " -U " + options.admin_username;
      break;
    default:
      break;
  }
  modified_user = false;
  modified_db = false;
  return each(options.database).parallel(false).call((function(_this) {
    return function(db, i, next) {
      if (options.engine !== 'POSTGRES') {
        return;
      }
      _this.call(function() {
        return options.log({
          message: "Check if database " + db + " exists",
          level: 'DEBUG',
          module: 'mecano/database/db/add'
        });
      });
      _this.execute({
        cmd: adm_cmd + " -tAc \"CREATE DATABASE " + db + ";\"",
        unless_exec: adm_cmd + " -d " + db + " -tAc '\\dt';"
      });
      _this.call({
        "if": function() {
          return this.status(-1);
        },
        handler: function() {
          return modified_db = true;
        }
      });
      _this.call({
        handler: function() {
          var j, len, ref2, results, user;
          ref2 = options.user;
          results = [];
          for (j = 0, len = ref2.length; j < len; j++) {
            user = ref2[j];
            this.call(function() {
              return options.log({
                message: "Check if user " + user + " has PRIVILEGES on " + db + " ",
                level: 'DEBUG',
                module: 'mecano/database/db/user'
              });
            });
            this.database.user.exists({
              name: user,
              admin_username: options.admin_username,
              admin_password: options.admin_password,
              port: options.port,
              host: options.host
            });
            this.call({
              unless: function() {
                return this.status(-1);
              },
              handler: function() {
                return options.log({
                  message: "User does exists " + user + ": skipping",
                  level: 'WARNING',
                  module: 'mecano/database/db/add'
                });
              }
            });
            this.execute({
              "if": function() {
                return this.status(-2);
              },
              cmd: adm_cmd + " -d " + db + " -tAc 'GRANT ALL PRIVILEGES ON DATABASE " + db + " TO " + user + "';",
              unless_exec: adm_cmd + " -d " + db + " -tAc \"SELECT datacl FROM  pg_database WHERE  datname = '" + db + "'\" | grep '" + user + "='"
            });
            results.push(this.call({
              "if": function() {
                return this.status(-2);
              },
              handler: function() {
                return modified_user = true;
              }
            }));
          }
          return results;
        }
      });
      return _this.then(next);
    };
  })(this)).then(function(err) {
    if (modified_user) {
      options.log({
        message: "Modified Status for users",
        level: 'DEBUG',
        module: 'mecano/database/db/add'
      });
    }
    if (modified_db) {
      options.log({
        message: "Modified Status for databases",
        level: 'DEBUG',
        module: 'mecano/database/db/add'
      });
    }
    return callback(err, modified_user || modified_db);
  });
};

misc = require('../../misc');

each = require('each');
