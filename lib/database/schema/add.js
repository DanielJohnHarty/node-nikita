// Generated by CoffeeScript 1.10.0
module.exports = function(options, callback) {
  var adm_cmd, error, k, modified, ref, ref1, v;
  if (options.db == null) {
    options.db = {};
  }
  ref = options.db;
  for (k in ref) {
    v = ref[k];
    if (options[k] == null) {
      options[k] = v;
    }
  }
  if (options.host == null) {
    return callback(new Error('Missing hostname'));
  }
  if (options.admin_username == null) {
    return callback(new Error('Missing admin name'));
  }
  if (options.admin_password == null) {
    return callback(new Error('Missing admin password'));
  }
  if (options.database == null) {
    return callback(new Error('Missing database option '));
  }
  if (options.engine != null) {
    options.engine = options.engine.toUpperCase();
  }
  if (options.engine == null) {
    options.engine = 'POSTGRES';
  }
  if ((ref1 = options.engine) !== 'POSTGRES') {
    return callback(new Error('Unsupport engine type'));
  }
  if (options.engine == null) {
    options.log('Missing engine type. Defaulting to PostgreSQL');
  }
  options.log({
    message: "Database engine set to " + options.engine,
    level: 'INFO',
    module: 'mecano/database/db/user'
  });
  if (options.port == null) {
    options.port = 5432;
  }
  options.log({
    message: "Database port set to " + options.port,
    level: 'DEBUG',
    module: 'mecano/database/db/user'
  });
  adm_cmd = '';
  error = null;
  switch (options.engine) {
    case 'MYSQL':
      adm_cmd += 'mysql';
      adm_cmd += " -h " + options.host;
      adm_cmd += " -u " + options.admin_username;
      adm_cmd += " -p " + options.admin_password;
      break;
    case 'POSTGRES':
      adm_cmd += "PGPASSWORD=" + options.admin_password + " psql";
      adm_cmd += " -h " + options.host;
      adm_cmd += " -U " + options.admin_username;
      break;
    default:
      break;
  }
  modified = false;
  this.call({
    "if": options.engine === 'POSTGRES',
    handler: function() {
      this.call(function() {
        return options.log({
          message: "Check if schema " + options.schema + " exists",
          level: 'DEBUG',
          module: 'mecano/database/schema/add'
        });
      });
      this.call(function() {
        return this.execute({
          code_skipped: 2,
          cmd: adm_cmd + " -d " + options.database + " -tAc '\\dt';"
        }, function(err, status, stdout, stderr) {
          if (err) {
            throw err;
          }
          if (!err && !status) {
            throw Error("Database does not exist " + options.database);
          }
        });
      });
      this.execute({
        cmd: adm_cmd + " -d " + options.database + " -tAc \"CREATE SCHEMA " + options.schema + ";\"",
        unless_exec: adm_cmd + " -d " + options.database + " -tAc \"SELECT 1 FROM pg_namespace WHERE nspname = '" + options.schema + "';\" | grep 1"
      });
      this.call({
        "if": function() {
          return options.owner != null;
        },
        handler: function(_, cb) {
          return this.execute({
            code_skipped: 1,
            cmd: adm_cmd + " -d " + options.database + " -tAc \"ALTER SCHEMA " + options.schema + " OWNER TO " + options.owner + ";\" ",
            unless_exec: adm_cmd + " -d " + options.database + " -tAc '\\dn' | grep '" + options.schema + "|" + options.owner + "'"
          }, function(err, status, stdout, stderr) {
            if (/^ERROR:\s\srole.*does\snot\sexist/.test(stderr)) {
              return cb(Error("Owner " + options.owner + " does not exists"));
            }
            return cb(null, status);
          });
        }
      });
      return this.call({
        "if": function() {
          return this.status(-1) || this.status(-2);
        },
        handler: function() {
          return modified = true;
        }
      });
    }
  });
  return this.then(function(err) {
    return callback(err, modified);
  });
};
