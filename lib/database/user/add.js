// Generated by CoffeeScript 1.10.0
var each, misc, postgres;

module.exports = function(options, callback) {
  var adm_cmd, create_cmd, modified, ref;
  if (options.host == null) {
    return callback(new Error('Missing hostname'));
  }
  if (options.admin_name == null) {
    return callback(new Error('Missing admin name'));
  }
  if (options.admin_password == null) {
    return callback(new Error('Missing admin password'));
  }
  if (!((options.name != null) || (options.users != null))) {
    return callback(new Error('Missing new user name'));
  }
  if (!((options.password != null) || (options.users != null))) {
    return callback(new Error('Missing new user password'));
  }
  if (options.db) {
    if (!Array.isArray(options.db)) {
      options.db = [options.db];
    }
  }
  if (options.users == null) {
    options.users = [];
  }
  if (!Array.isArray(options.users)) {
    return callback(new Error('users  must be an array'));
  }
  if (options.name != null) {
    options.users.push({
      name: "" + options.name,
      password: "" + options.password
    });
  }
  if (options.engine != null) {
    options.engine = options.engine.toUpperCase();
  }
  if (options.engine == null) {
    options.engine = 'POSTGRES';
  }
  if ((ref = options.engine) !== 'MYSQL' && ref !== 'POSTGRES') {
    return callback(new Error('Unsupport engine type'));
  }
  options.log({
    message: "Database engine set to " + options.engine,
    level: 'INFO',
    module: 'mecano/database/user/add'
  });
  if (options.port == null) {
    options.port = 5432;
  }
  adm_cmd = '';
  create_cmd = '';
  switch (options.engine) {
    case 'MYSQL':
      adm_cmd += 'mysql';
      adm_cmd += " -h " + options.host;
      adm_cmd += " -u " + options.admin_name;
      adm_cmd += " -p " + options.admin_password;
      break;
    case 'POSTGRES':
      adm_cmd += "PGPASSWORD=" + options.admin_password + " psql";
      adm_cmd += " -h " + options.host;
      adm_cmd += " -U " + options.admin_name;
      break;
    default:
      break;
  }
  modified = false;
  return this.call(function() {
    return each(options.users).parallel(false).call((function(_this) {
      return function(user, i, next) {
        if (options.engine !== 'POSTGRES') {
          return;
        }
        if (user.databases == null) {
          user.databases = [];
        }
        _this.execute({
          cmd: adm_cmd + " -tAc \"CREATE USER " + user.name + " WITH PASSWORD '" + user.password + "';\"",
          unless_exec: adm_cmd + " -tAc \"SELECT 1 FROM pg_roles WHERE rolname='" + user.name + "'\" | grep 1"
        });
        _this.execute({
          cmd: adm_cmd + " -tAc \"ALTER USER " + user.name + " WITH PASSWORD '" + user.password + "';\"",
          if_exec: (postgres.wrap(options)) + " -c \"\\dt\" 2>&1 >/dev/null | grep -e '^psql:\\sFATAL.*password\\sauthentication\\sfailed\\sfor\\suser.*'"
        });
        _this.call({
          "if": function() {
            return (this.status(-1)) || (this.status(-1));
          },
          handler: function() {
            return modified = true;
          }
        });
        _this.call({
          "if": function() {
            return this.status(-3);
          },
          handler: function() {
            return options.log({
              message: "User created: " + user.name,
              level: 'INFO',
              module: 'mecano/database/user/add'
            });
          }
        });
        _this.call({
          unless: function() {
            return this.status(-4);
          },
          handler: function() {
            return options.log({
              message: "User already exist (skipped): " + user.name,
              level: 'INFO',
              module: 'mecano/database/user/add'
            });
          }
        });
        _this.call({
          "if": function() {
            return this.status(-3);
          },
          handler: function() {
            return options.log({
              message: "Modified Password for user: " + user.name,
              level: 'INFO',
              module: 'mecano/database/user/add'
            });
          }
        });
        return _this.then(next);
      };
    })(this)).then(function(err) {
      return callback(err, modified);
    });
  });
};

misc = require('../../misc');

postgres = require('../../misc/database');

each = require('each');
