// Generated by CoffeeScript 1.8.0
var each, execute, ldap, misc, string, wrap;

module.exports = function(goptions, options, callback) {
  return wrap(arguments, function(options, next) {
    var client, do_diff, do_end, do_get_indexes, do_getdn, do_save, modified;
    client = null;
    modified = false;
    do_getdn = function() {
      if (options.hdb_dn) {
        return do_get_indexes();
      }
      if (typeof options.log === "function") {
        options.log("mecano `ldap_index`: get DN of the HDB to modify");
      }
      return execute({
        cmd: "ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config \"(olcSuffix= " + options.suffix + ")\" dn 2>/dev/null | egrep '^dn' | sed -e 's/^dn:\\s*olcDatabase=\\(.*\\)$/\\1/g'",
        ssh: options.ssh,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, _, hdb_dn) {
        if (err) {
          return next(err);
        }
        options.hdb_dn = hdb_dn.trim();
        return do_get_indexes();
      });
    };
    do_get_indexes = function() {
      if (typeof options.log === "function") {
        options.log("mecano `ldap_index`: list all indexes of the directory");
      }
      return execute({
        cmd: "ldapsearch -Y EXTERNAL -H ldapi:/// -b olcDatabase=" + options.hdb_dn + " \"(olcDbIndex=*)\" olcDbIndex",
        ssh: options.ssh,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, _, stdout) {
        var attrlist, indexes, indices, line, match, _i, _len, _ref;
        if (err) {
          return next(err);
        }
        indexes = {};
        _ref = string.lines(stdout);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          if (!(match = /^olcDbIndex:\s+(.*)\s+(.*)/.exec(line))) {
            continue;
          }
          _ = match[0], attrlist = match[1], indices = match[2];
          indexes[attrlist] = indices;
        }
        return do_diff(indexes);
      });
    };
    do_diff = function(orgp) {
      var add, k, modify, v, _ref;
      add = {};
      modify = {};
      _ref = options.indexes;
      for (k in _ref) {
        v = _ref[k];
        if (orgp[k] == null) {
          add[k] = v;
        } else if (v !== orgp[k]) {
          modify[k] = [v, orgp[k]];
        }
      }
      if (Object.keys(add).length || Object.keys(modify).length) {
        return do_save(add, modify);
      } else {
        return do_end();
      }
    };
    do_save = function(add, modify) {
      var cmd, k, v;
      cmd = [];
      for (k in add) {
        v = add[k];
        cmd.push("add: olcDbIndex\nolcDbIndex: " + k + " " + v);
      }
      for (k in modify) {
        v = modify[k];
        cmd.push("delete: olcDbIndex\nolcDbIndex: " + k + " " + v[1] + "\n-\nadd: olcDbIndex\nolcDbIndex: " + k + " " + v[0]);
      }
      return execute({
        cmd: "ldapmodify -Y EXTERNAL -H ldapi:/// <<-EOF\ndn: olcDatabase=" + options.hdb_dn + "\nchangetype: modify\n" + (cmd.join('\n-\n')),
        ssh: options.ssh,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, _, stdout) {
        if (err) {
          return next(err);
        }
        modified = true;
        return do_end();
      });
    };
    do_end = function(err) {
      return next(err, modified);
    };
    return do_getdn();
  });
};

each = require('each');

ldap = require('ldapjs');

execute = require('./execute');

misc = require('./misc');

string = require('./misc/string');

wrap = require('./misc/wrap');
