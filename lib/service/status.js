// Generated by CoffeeScript 1.11.1
module.exports = function(options) {
  options.log({
    message: "Entering service.status",
    level: 'DEBUG',
    module: 'nikita/lib/service/status'
  });
  if (typeof options.argument === 'string') {
    if (options.name == null) {
      options.name = options.argument;
    }
  }
  if (!options.name) {
    throw Error("Invalid Name: " + (JSON.stringify(options.name)));
  }
  options.log({
    message: "Status for service " + options.name,
    level: 'INFO',
    module: 'nikita/lib/service/status'
  });
  if (options.code_stopped !== 3) {
    options.log({
      message: "Option code_stopped is " + options.code_stopped,
      level: 'DEBUG',
      module: 'nikita/lib/service/status'
    });
  }
  if (options.os == null) {
    options.os = {};
  }
  this.system.discover({
    cache: options.cache,
    shy: true
  }, function(err, status, os) {
    var base, base1;
    if ((base = options.os).type == null) {
      base.type = os.type;
    }
    return (base1 = options.os).release != null ? base1.release : base1.release = os.release;
  });
  this.service.discover({
    cache: options.cache,
    shy: true
  }, function(err, status, loader) {
    return options.loader != null ? options.loader : options.loader = loader;
  });
  return this.call(function() {
    return this.system.execute({
      "if": function() {
        var ref;
        return (ref = options.os.type) === 'redhat' || ref === 'centos' || ref === 'ubuntu';
      },
      cmd: "ls /lib/systemd/system/*.service /etc/systemd/system/*.service /etc/rc.d/* /etc/init.d/* 2>/dev/null | grep -w \"" + options.name + "\" || exit 1\ncase \"" + options.loader + "\" in\n  systemctl)\n    systemctl status " + options.name + " || exit 3\n    ;;\n  service)\n    service " + options.name + " status || exit 3\n    ;;\n  *)\n    exit 2 # Unsupported Loader\n    ;;\nesac",
      code: 0,
      code_skipped: 3
    }, function(err, started) {
      var status;
      if (err) {
        throw Error("Invalid Service Name: " + options.name);
      }
      status = started ? 'started' : 'stopped';
      options.log({
        message: "Status for " + options.name + " is " + status,
        level: 'INFO',
        module: 'nikita/lib/service/status'
      });
      if (options.cache) {
        return options.store["nikita.service." + options.name + ".status"] = "" + status;
      }
    });
  });
};
