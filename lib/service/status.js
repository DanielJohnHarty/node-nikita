// Generated by CoffeeScript 1.11.1
var discover;

module.exports = function(options) {
  options.log({
    message: "Entering service.status",
    level: 'DEBUG',
    module: 'mecano/lib/service/status'
  });
  if (typeof options.argument === 'string') {
    if (options.name == null) {
      options.name = options.argument;
    }
  }
  if (!options.name) {
    throw Error("Invalid Name: " + (JSON.stringify(options.name)));
  }
  options.log({
    message: "Status for service " + options.name,
    level: 'INFO',
    module: 'mecano/lib/service/status'
  });
  if (options.code_stopped !== 3) {
    options.log({
      message: "Option code_stopped is " + options.code_stopped,
      level: 'DEBUG',
      module: 'mecano/lib/service/status'
    });
  }
  if (options.loader == null) {
    options.loader = options.store['mecano:service:loader'];
  }
  this.call(discover.loader, function() {
    return options.loader != null ? options.loader : options.loader = options.store['mecano:service:loader'];
  });
  return this.call({
    "if": function() {
      var ref;
      return (ref = options.store['mecano:system:type']) === 'redhat' || ref === 'centos';
    },
    if_exec: "ls /lib/systemd/system/*.service /etc/systemd/system/*.service /etc/rc.d/* | grep " + options.name,
    handler: function() {
      this.execute({
        "if": function() {
          return options.loader === 'systemctl';
        },
        cmd: "systemctl status " + options.name,
        code: 0,
        code_skipped: 3
      }, function(err, started) {
        var status;
        if (err) {
          throw Error("Invalid Service Name: " + options.name);
        }
        status = started ? 'started' : 'stopped';
        options.log({
          message: "Status for " + options.name + " is " + status,
          level: 'INFO',
          module: 'mecano/lib/service/status'
        });
        if (options.cache) {
          return options.store["mecano.service." + options.name + ".status"] = "" + status;
        }
      });
      return this.execute({
        "if": function() {
          return options.loader === 'service';
        },
        cmd: "service " + options.name + " status",
        code: 0,
        code_skipped: 3
      }, function(err, started) {
        var status;
        if (err) {
          throw Error("Invalid Service Name: " + options.name);
        }
        status = started ? 'started' : 'stopped';
        options.log({
          message: "Status for " + options.name + " is " + status,
          level: 'INFO',
          module: 'mecano/lib/service/status'
        });
        if (options.cache) {
          return options.store["mecano.service." + options.name + ".status"] = "" + status;
        }
      });
    }
  });
};

discover = require('../misc/discover');
