// Generated by CoffeeScript 1.12.4
var string;

module.exports = function(options) {
  var cacheonly;
  options.log({
    message: "Entering service.install",
    level: 'DEBUG',
    module: 'nikita/lib/service/install'
  });
  if (typeof options.argument === 'string') {
    if (options.name == null) {
      options.name = options.argument;
    }
  }
  if (options.cache) {
    if (options.installed == null) {
      options.installed = options.store['nikita:execute:installed'];
    }
  }
  if (options.cache) {
    if (options.outpdated == null) {
      options.outpdated = options.store['nikita:execute:outpdated'];
    }
  }
  cacheonly = options.cacheonly ? '-C' : '';
  if (!options.name) {
    throw Error("Invalid Name: " + (JSON.stringify(options.name)));
  }
  options.log({
    message: "Install service " + options.name,
    level: 'INFO',
    module: 'nikita/lib/service/install'
  });
  this.system.execute({
    unless: options.installed != null,
    cmd: "if which yum >/dev/null 2>&1; then\n  rpm -qa --qf \"%{NAME}\n\"\nelif which pacman >/dev/null 2>&1; then\n  pacman -Qqe\nelif which apt-get >/dev/null 2>&1; then\n  dpkg -l | grep \'^ii\' | awk \'{print $2}\'\nelse\n  echo \"Failed Package Installed\" >&2\n  exit 2\nfi",
    code_skipped: 1,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir,
    stdout_log: false,
    shy: true
  }, function(err, status, stdout) {
    var pkg;
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Failed Package Installed");
    }
    if (err) {
      throw err;
    }
    if (!status) {
      return;
    }
    options.log({
      message: "Installed packages retrieved",
      level: 'INFO',
      module: 'nikita/lib/service/install'
    });
    return options.installed = (function() {
      var i, len, ref, results;
      ref = string.lines(stdout);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        pkg = ref[i];
        results.push(pkg);
      }
      return results;
    })();
  });
  this.system.execute({
    unless: options.outpdated != null,
    "if": function() {
      return options.installed.indexOf(options.name) === -1;
    },
    cmd: "if which yum >/dev/null 2>&1; then\n  yum " + cacheonly + " list updates | egrep updates$ | sed 's/\\([^\\.]*\\).*/\\1/'\nelif which pacman >/dev/null 2>&1; then\n  pacman -Qu | sed 's/\\([^ ]*\\).*/\\1/'\nelif which apt-get >/dev/null 2>&1; then\n  apt-get -u upgrade --assume-no | grep '^\\s' | sed 's/\\s/\\n/g'\nelse\n  echo \"Failed Package Updates\" >&2\n  exit 2\nfi",
    code_skipped: 1,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir,
    stdout_log: false,
    shy: true
  }, function(err, status, stdout) {
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Failed Package Updates");
    }
    if (err) {
      throw err;
    }
    if (!status) {
      return options.outpdated = [];
    }
    options.log({
      message: "Outpdated package list retrieved",
      level: 'INFO',
      module: 'nikita/lib/service/install'
    });
    return options.outpdated = string.lines(stdout.trim());
  });
  this.system.execute({
    "if": function() {
      return options.installed.indexOf(options.name) === -1 || options.outpdated.indexOf(options.name) !== -1;
    },
    cmd: "if which yum >/dev/null 2>&1; then\n  yum install -y " + cacheonly + " " + options.name + "\nelif which yaourt >/dev/null 2>&1; then\n  yaourt --noconfirm -S " + options.name + "\nelif which pacman >/dev/null 2>&1; then\n  pacman --noconfirm -S " + options.name + "\nelif which apt-get >/dev/null 2>&1; then\n  apt-get install -y " + options.name + "\nelse\n  echo \"Unsupported Package Manager: yum, pacman, apt-get supported\" >&2\n  exit 2\nfi",
    code_skipped: options.code_skipped,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir
  }, function(err, status) {
    var installedIndex, outpdatedIndex;
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Unsupported Package Manager: yum, yaourt, pacman, apt-get supported");
    }
    if (err) {
      throw err;
    }
    options.log(status ? {
      message: "Package \"" + options.name + "\" is installed",
      level: 'WARN',
      module: 'nikita/lib/service/install'
    } : {
      message: "Package \"" + options.name + "\" is already installed",
      level: 'INFO',
      module: 'nikita/lib/service/install'
    });
    installedIndex = options.installed.indexOf(options.name);
    if (installedIndex === -1) {
      options.installed.push(options.name);
    }
    if (options.outpdated) {
      outpdatedIndex = options.outpdated.indexOf(options.name);
      if (outpdatedIndex !== -1) {
        return options.outpdated.splice(outpdatedIndex, 1);
      }
    }
  });
  return this.call({
    "if": options.cache,
    handler: function() {
      options.log({
        message: "Caching installed on \"nikita:execute:installed\"",
        level: 'INFO',
        module: 'nikita/lib/service/install'
      });
      options.store['nikita:execute:installed'] = options.installed;
      options.log({
        message: "Caching outpdated list on \"nikita:execute:outpdated\"",
        level: 'INFO',
        module: 'nikita/lib/service/install'
      });
      return options.store['nikita:execute:outpdated'] = options.outpdated;
    }
  });
};

string = require('../misc/string');
