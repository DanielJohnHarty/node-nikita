// Generated by CoffeeScript 1.11.1
var string;

module.exports = function(options) {
  var cacheonly, installed, updates;
  options.log({
    message: "Entering service.install",
    level: 'DEBUG',
    module: 'nikita/lib/service/install'
  });
  if (typeof options.argument === 'string') {
    if (options.name == null) {
      options.name = options.argument;
    }
  }
  options.log({
    message: "Install service " + options.name,
    level: 'INFO',
    module: 'nikita/lib/service/install'
  });
  installed = updates = null;
  if (options.cache) {
    installed = options.store['nikita:execute:installed'];
    updates = options.store['nikita:execute:updates'];
  }
  if (options.manager == null) {
    options.manager = options.store['nikita:service:manager'];
  }
  if (!options.name) {
    throw Error("Invalid Name: " + (JSON.stringify(options.name)));
  }
  cacheonly = options.cacheonly ? '-C' : '';
  this.system.execute({
    cmd: "if which yum >/dev/null; then\n  rpm -qa --qf \"%{NAME}\n\"\nelif which apt-get >/dev/null; then\n  dpkg -l | grep \'^ii\' | awk \'{print $2}\'\nfi",
    code_skipped: 1,
    stdout_log: false,
    shy: true,
    unless: installed != null
  }, function(err, status, stdout) {
    var pkg;
    if (err) {
      throw err;
    }
    if (!status) {
      return;
    }
    options.log({
      message: "Installed packages retrieved",
      level: 'INFO',
      module: 'nikita/service/install'
    });
    return installed = (function() {
      var i, len, ref, results;
      ref = string.lines(stdout);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        pkg = ref[i];
        results.push(pkg);
      }
      return results;
    })();
  });
  this.system.execute({
    cmd: "if which yum >/dev/null; then\n  yum " + cacheonly + " list updates | egrep updates$ | sed 's/\\([^\\.]*\\).*/\\1/'\nelif which apt-get >/dev/null; then\n  apt-get -u upgrade --assume-no | grep '^\\s' | sed 's/\\s/\\n/g'\nfi",
    code_skipped: 1,
    stdout_log: false,
    shy: true,
    unless: updates != null,
    "if": function() {
      return installed.indexOf(options.name) === -1;
    }
  }, function(err, status, stdout) {
    if (err) {
      throw err;
    }
    if (!status) {
      return updates = [];
    }
    options.log({
      message: "Available updates retrieved",
      level: 'INFO',
      module: 'nikita/service/install'
    });
    return updates = string.lines(stdout.trim());
  });
  this.system.execute({
    cmd: "if which yum >/dev/null; then\n  yum install -y " + cacheonly + " " + options.name + "\nelif which apt-get >/dev/null; then\n  apt-get install -y " + options.name + "\nfi",
    code_skipped: options.code_skipped,
    "if": function() {
      return installed.indexOf(options.name) === -1 || updates.indexOf(options.name) !== -1;
    }
  }, function(err, status) {
    var installedIndex, updatesIndex;
    if (err) {
      throw err;
    }
    options.log(status ? {
      message: "Package \"" + options.name + "\" is installed",
      level: 'WARN',
      module: 'nikita/service/install'
    } : {
      message: "Package \"" + options.name + "\" is already installed",
      level: 'WARN',
      module: 'nikita/service/install'
    });
    installedIndex = installed.indexOf(options.name);
    if (installedIndex === -1) {
      installed.push(options.name);
    }
    if (updates) {
      updatesIndex = updates.indexOf(options.name);
      if (updatesIndex !== -1) {
        return updates.splice(updatesIndex, 1);
      }
    }
  });
  return this.call({
    "if": options.cache,
    handler: function() {
      options.log({
        message: "Caching installed on \"nikita:execute:installed\"",
        level: 'INFO',
        module: 'nikita/service/install'
      });
      options.store['nikita:execute:installed'] = installed;
      options.log({
        message: "Caching updates on \"nikita:execute:updates\"",
        level: 'INFO',
        module: 'nikita/service/install'
      });
      return options.store['nikita:execute:updates'] = updates;
    }
  });
};

string = require('../misc/string');
