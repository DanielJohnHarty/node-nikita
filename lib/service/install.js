// Generated by CoffeeScript 1.10.0
var string;

module.exports = function(options) {
  var cacheonly, installed, modified, updates;
  options.log({
    message: "Entering service",
    level: 'DEBUG',
    module: 'mecano/lib/service/install'
  });
  installed = updates = null;
  modified = false;
  if (options.cache) {
    installed = options.store['mecano:execute:installed'];
    updates = options.store['mecano:execute:updates'];
  }
  cacheonly = options.cacheonly ? '-C' : '';
  this.execute({
    cmd: 'rpm -qa --qf "%{NAME}\n"',
    code_skipped: 1,
    stdout_log: false,
    shy: true,
    "if": function() {
      return !options.cache || !installed;
    }
  }, function(err, executed, stdout) {
    var pkg;
    if (err) {
      throw err;
    }
    if (!executed) {
      return;
    }
    options.log({
      message: "Installed packages retrieved",
      level: 'INFO',
      module: 'mecano/service/install'
    });
    return installed = (function() {
      var i, len, ref, results;
      ref = string.lines(stdout);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        pkg = ref[i];
        results.push(pkg);
      }
      return results;
    })();
  });
  this.execute({
    cmd: "yum " + cacheonly + " list updates",
    code_skipped: 1,
    unless: updates,
    stdout_log: false,
    shy: true,
    "if": function() {
      return installed.indexOf(options.name) === -1;
    }
  }, function(err, executed, stdout) {
    var pkg, start;
    if (err) {
      throw err;
    }
    if (!executed) {
      return;
    }
    options.log({
      message: "Available updates retrieved",
      level: 'INFO',
      module: 'mecano/service/install'
    });
    start = false;
    return updates = (function() {
      var i, len, ref, results;
      ref = string.lines(stdout);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        pkg = ref[i];
        if (pkg.trim() === 'Updated Packages') {
          start = true;
        }
        if (!start) {
          continue;
        }
        if (!(pkg = /^([^\. ]+?)\./.exec(pkg))) {
          continue;
        }
        results.push(pkg[1]);
      }
      return results;
    })();
  });
  this.execute({
    cmd: "yum install -y " + cacheonly + " " + options.name,
    "if": [
      function() {
        return installed.indexOf(options.name) === -1;
      }, function() {
        return updates.indexOf(options.name) === -1;
      }
    ]
  }, function(err, succeed) {
    var installedIndex, updatesIndex;
    if (err) {
      throw err;
    }
    options.log(succeed ? {
      message: "Package \"" + options.name + "\" is installed",
      level: 'WARN',
      module: 'mecano/service/install'
    } : {
      message: "Package \"" + options.name + "\" is already installed",
      level: 'WARN',
      module: 'mecano/service/install'
    });
    installedIndex = installed.indexOf(options.name);
    if (installedIndex === -1) {
      installed.push(options.name);
    }
    if (updates) {
      updatesIndex = updates.indexOf(options.name);
      if (updatesIndex !== -1) {
        return updates.splice(updatesIndex, 1);
      }
    }
  });
  return this.call({
    "if": options.cache,
    handler: function() {
      options.log({
        message: "Caching installed on \"mecano:execute:installed\"",
        level: 'INFO',
        module: 'mecano/service/install'
      });
      options.store['mecano:execute:installed'] = installed;
      options.log({
        message: "Caching updates on \"mecano:execute:updates\"",
        level: 'INFO',
        module: 'mecano/service/install'
      });
      return options.store['mecano:execute:updates'] = updates;
    }
  });
};

string = require('../misc/string');
