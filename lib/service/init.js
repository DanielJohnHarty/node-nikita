// Generated by CoffeeScript 1.11.1
var fs, path;

module.exports = function(options) {
  options.log({
    message: "Entering service.init",
    level: 'DEBUG',
    module: 'nikita/lib/service/init'
  });
  if (options.source == null) {
    throw Error('Missing source');
  }
  if (options.engine == null) {
    options.engine = 'nunjunks';
  }
  if (options.mode == null) {
    options.mode = 0x1ed;
  }
  if (options.name == null) {
    options.name = path.basename(options.source).split('.')[0];
  }
  if (options.target == null) {
    options.target = "/etc/init.d/" + options.name;
  }
  if (options.os == null) {
    options.os = {};
  }
  this.system.discover(function(err, status, os) {
    var base, base1;
    if ((base = options.os).type == null) {
      base.type = os.type;
    }
    return (base1 = options.os).release != null ? base1.release : base1.release = os.release;
  });
  this.service.discover(function(err, status, loader) {
    return options.loader != null ? options.loader : options.loader = loader;
  });
  return this.call(function() {
    var cmd, ref, ref1, ref2, ref3, ref4;
    cmd = "systemctl status " + options.name + " 2>\&1 ";
    switch (options.loader) {
      case 'service':
        if ((ref = options.os.type) === 'redhat' || ref === 'centos') {
          cmd += "| grep '(Reason: No such file or directory)'";
        }
        if ((ref1 = options.os.type) === 'ubuntu') {
          cmd += "| grep '(" + options.name + ": unrecognized service)'";
        }
        break;
      case 'systemctl':
        if (((ref2 = options.os.type) === 'redhat' || ref2 === 'centos') && /^7.1/.exec(options.os.release)) {
          cmd += "| grep '(Reason: No such file or directory)'";
        }
        if (((ref3 = options.os.type) === 'redhat' || ref3 === 'centos') && /^7.2/.exec(options.os.release)) {
          cmd += "| grep 'Unit " + options.name + ".service could not be found.'";
        }
        if (((ref4 = options.os.type) === 'redhat' || ref4 === 'centos') && /^7.3/.exec(options.os.release)) {
          cmd += "| grep 'Unit " + options.name + ".service could not be found.'";
        }
    }
    this.file.render({
      target: options.target,
      source: options.source,
      mode: options.mode,
      uid: options.uid,
      gid: options.gid,
      backup: options.backup,
      context: options.context,
      local: options.local
    });
    this.system.execute({
      "if": function() {
        return (options.loader === 'systemctl') && (path.dirname(options.target) === '/etc/init.d');
      },
      shy: true,
      cmd: cmd,
      code_skipped: 1
    });
    return this.system.execute({
      "if": function() {
        return this.status(-1);
      },
      cmd: 'systemctl daemon-reload'
    });
  });
};

fs = require('ssh2-fs');

path = require('path');
