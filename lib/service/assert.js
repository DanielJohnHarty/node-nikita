// Generated by CoffeeScript 1.12.5
module.exports = function(options) {
  options.log({
    message: "Entering service.install",
    level: 'DEBUG',
    module: 'nikita/lib/service/install'
  });
  if (typeof options.argument === 'string') {
    if (options.name == null) {
      options.name = options.argument;
    }
  }
  if (options.srv_name == null) {
    options.srv_name = options.name;
  }
  if (typeof options.name === 'string') {
    options.name = [options.name];
  }
  if (!options.name) {
    throw Error("Invalid Name: " + (JSON.stringify(options.name)));
  }
  this.system.execute({
    "if": options.installed != null,
    cmd: "if command -v yum >/dev/null 2>&1; then\n  rpm -qa --qf \"%{NAME}\n\" | grep '^" + (options.name.join('|')) + "$'\nelif command -v pacman >/dev/null 2>&1; then\n  pacman -Qqe | grep '^" + (options.name.join('|')) + "$'\nelif command -v apt-get >/dev/null 2>&1; then\n  dpkg -l | grep \'^ii\' | awk \'{print $2}\' | grep '^" + (options.name.join('|')) + "$'\nelse\n  echo \"Unsupported Package Manager\" >&2\n  exit 2\nfi",
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir,
    stdin_log: true,
    stdout_log: false,
    shy: true
  }, function(err) {
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Unsupported Package Manager");
    }
    if (err) {
      throw Error("Uninstalled Package: " + options.name);
    }
  });
  return this.system.execute({
    "if": (options.started != null) || (options.stopped != null),
    cmd: "ls /lib/systemd/system/*.service /etc/systemd/system/*.service /etc/rc.d/* /etc/init.d/* 2>/dev/null | grep -w \"" + options.srv_name + "\" || exit 3\nif command -v systemctl >/dev/null 2>&1; then\n  systemctl status " + options.srv_name + " || exit 3\nelif command -v service >/dev/null 2>&1; then\n  service " + options.srv_name + " status || exit 3\nelse\n  echo \"Unsupported Loader\" >&2\n  exit 2\nfi",
    code: 0,
    code_skipped: 3,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir
  }, function(err, status) {
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Unsupported Loader");
    }
    if (err) {
      return;
    }
    if (options.started != null) {
      if (options.started && !status) {
        throw Error("Service Not Started: " + options.srv_name);
      }
      if (!options.started && status) {
        throw Error("Service Started: " + options.srv_name);
      }
    }
    if (options.stopped != null) {
      if (options.stopped && status) {
        throw Error("Service Not Stopped: " + options.srv_name);
      }
      if (!options.stopped && !status) {
        throw Error("Service Stopped: " + options.srv_name);
      }
    }
  });
};
