// Generated by CoffeeScript 1.11.1
module.exports = function(options) {
  options.log({
    message: "Entering service.start",
    level: 'DEBUG',
    module: 'mecano/lib/service/start'
  });
  if (typeof options.argument === 'string') {
    if (options.name == null) {
      options.name = options.argument;
    }
  }
  if (!options.name) {
    throw Error("Invalid Name: " + (JSON.stringify(options.name)));
  }
  options.log({
    message: "Start service " + options.name,
    level: 'INFO',
    module: 'mecano/lib/service/start'
  });
  if (options.os == null) {
    options.os = {};
  }
  this.system.discover({
    cache: options.cache,
    shy: true
  }, function(err, status, os) {
    var base, base1;
    if ((base = options.os).type == null) {
      base.type = os.type;
    }
    return (base1 = options.os).release != null ? base1.release : base1.release = os.release;
  });
  this.service.discover({
    cache: options.cache,
    shy: true
  }, function(err, status, loader) {
    return options.loader != null ? options.loader : options.loader = loader;
  });
  return this.call({
    "if": function() {
      var ref;
      return (ref = options.os.type) === 'redhat' || ref === 'centos' || ref === 'ubuntu';
    },
    if_exec: "ls /lib/systemd/system/*.service /etc/systemd/system/*.service /etc/rc.d/* /etc/init.d/* 2>/dev/null | grep " + options.name
  }, function() {
    this.service.status({
      name: options.name,
      code_started: options.code_started,
      code_stopped: options.code_stopped,
      shy: true
    });
    return this.system.execute({
      cmd: (function() {
        switch (options.loader) {
          case 'systemctl':
            return "systemctl start " + options.name;
          case 'service':
            return "service " + options.name + " start";
          default:
            throw Error('Init System not supported');
        }
      })(),
      unless: [
        function() {
          return this.status(-1);
        }, function() {
          return options.cache && options.store["mecano.service." + options.name + ".status"] === 'started';
        }
      ]
    }, function(err, started) {
      if (err) {
        throw err;
      }
      if (!err && options.cache) {
        return options.store["mecano.service." + options.name + ".status"] = 'started';
      }
    });
  });
};
