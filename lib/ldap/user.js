// Generated by CoffeeScript 2.3.1
// # `nikita.ldap.user`

// Create and modify a user store inside an OpenLDAP server.   

// ## Options

// * `binddn`   
//   Distinguished Name to bind to the LDAP directory.   
// * `passwd`   
//   Password for simple authentication.   
// * `name`   
//   Distinguish name storing the "olcAccess" property, using the database adress
//   (eg: "olcDatabase={2}bdb,cn=config").   
// * `overwrite`   
//   Overwrite existing "olcAccess", default is to merge.   
// * `uri`   
//   Specify URI referring to the ldap server.   
// * `user`   
//   User object.   

// ## Example

// ```js
// require('nikita')
// .ldap.user({
//   url: 'ldap://openldap.server/',
//   binddn: 'cn=admin,cn=config',
//   passwd: 'password',
//   user: {
//   }
// }, function(err, {status}){
//   console.log(err ? err.message : 'Index modified: ' + status);
// });
// ```

// ## Source Code
var each;

module.exports = function({options}, callback) {
  var binddn, modified, passwd, uri;
  // Auth related options
  binddn = options.binddn ? `-D ${options.binddn}` : '';
  passwd = options.passwd ? `-w ${options.passwd}` : '';
  if (options.url) {
    console.log("Nikita: option 'options.url' is deprecated, use 'options.uri'");
    if (options.uri == null) {
      options.uri = options.url;
    }
  }
  if (options.uri === true) {
    options.uri = 'ldapi:///';
  }
  uri = options.uri ? `-H ${options.uri}` : ''; // URI is obtained from local openldap conf unless provided
  if (!options.user) {
    // User related options
    return callback(Error("Nikita `ldap.user`: required property 'user'"));
  }
  if (!Array.isArray(options.user)) {
    options.user = [options.user];
  }
  modified = false;
  return each(options.user).call((user, callback) => {
    var do_checkpass, do_end, do_ldappass, do_user;
    do_user = () => {
      var entry, k, v;
      entry = {};
      for (k in user) {
        v = user[k];
        if (k === 'userPassword' && !/^\{SASL\}/.test(user.userPassword)) {
          continue;
        }
        entry[k] = v;
      }
      return this.ldap.add({
        entry: entry,
        uri: options.uri,
        binddn: options.binddn,
        passwd: options.passwd
      }, function(err, updated, added) {
        if (err) {
          return callback(err);
        }
        if (added) {
          this.log({
            message: "User added",
            level: 'WARN',
            module: 'nikita/ldap/user'
          });
        } else if (updated) {
          this.log({
            message: "User updated",
            level: 'WARN',
            module: 'nikita/ldap/user'
          });
        }
        if (updated || added) {
          modified = true;
        }
        if (added) {
          return do_ldappass();
        } else {
          return do_checkpass();
        }
      });
    };
    do_checkpass = () => {
      if (!(user.userPassword || /^\{SASL\}/.test(user.userPassword))) {
        return do_end();
      }
      return this.system.execute({
        // See https://onemoretech.wordpress.com/2011/09/22/verifying-ldap-passwords/
        cmd: `ldapsearch -D ${user.dn} -w ${user.userPassword} ${uri} -b "" -s base "objectclass=*"`,
        code_skipped: 49
      }, function(err, data) {
        if (err) {
          return callback(err);
        }
        if (data.status) {
          return do_end();
        } else {
          return do_ldappass();
        }
      });
    };
    do_ldappass = () => {
      if (!(user.userPassword || /^\{SASL\}/.test(user.userPassword))) {
        return do_end();
      }
      return this.system.execute({
        cmd: `ldappasswd ${binddn} ${passwd} ${uri} -s ${user.userPassword} '${user.dn}'`
      }, function(err) {
        if (err) {
          return callback(err);
        }
        this.log({
          message: "Password modified",
          level: 'WARN',
          module: 'nikita/ldap/user'
        });
        modified = true;
        return do_end();
      });
    };
    do_end = function() {
      return callback();
    };
    return do_user();
  }).next(function(err) {
    return callback(err, modified);
  });
};

// ## Note

// A user can modify it's own password with the "ldappasswd" command if ACL allows
// it. Here's an example:

// ```bash
// ldappasswd -D cn=myself,ou=users,dc=ryba -w oldpassword \
//   -H ldaps://master3.ryba:636 \
//   -s newpassword 'cn=myself,ou=users,dc=ryba'
// ```

// ## Dependencies
each = require('each');

// [index]: http://www.zytrax.com/books/ldap/apa/indeces.html
