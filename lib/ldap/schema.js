// Generated by CoffeeScript 1.12.4
module.exports = function(options) {
  var binddn, conf, ldif, passwd, schema, tempdir, uri;
  binddn = options.binddn ? "-D " + options.binddn : '';
  passwd = options.passwd ? "-w " + options.passwd : '';
  if (options.url) {
    console.log("Nikita: option 'options.url' is deprecated, use 'options.uri'");
    if (options.uri == null) {
      options.uri = options.url;
    }
  }
  if (options.uri === true) {
    options.uri = 'ldapi:///';
  }
  uri = options.uri ? "-H " + options.uri : '';
  if (!options.name) {
    throw Error("Missing name");
  }
  if (!options.schema) {
    throw Error("Missing schema");
  }
  options.schema = options.schema.trim();
  tempdir = options.tempdir || ("/tmp/nikita_ldap.schema_" + (Date.now()));
  schema = tempdir + "/" + options.name + ".schema";
  conf = tempdir + "/schema.conf";
  ldif = tempdir + "/ldif";
  this.system.execute({
    cmd: "ldapsearch -LLL " + binddn + " " + passwd + " " + uri + " -b \"cn=schema,cn=config\" | grep -E cn=\\{[0-9]+\\}" + options.name + ",cn=schema,cn=config",
    code: 1,
    code_skipped: 0
  });
  this.call({
    "if": (function() {
      return this.status(-1);
    })
  }, function() {
    this.system.mkdir({
      target: ldif,
      ssh: options.ssh
    }, function(err) {
      return options.log('Directory ldif created');
    });
    this.system.copy({
      source: options.schema,
      target: schema,
      ssh: options.ssh
    }, function(err) {
      return options.log('Schema copied');
    });
    this.file({
      content: "include " + schema,
      target: conf,
      ssh: options.ssh,
      log: options.log
    }, function(err) {
      return options.log('Configuration generated');
    });
    this.system.execute({
      cmd: "slaptest -f " + conf + " -F " + ldif
    }, function(err) {
      if (!err) {
        return options.log('Configuration validated');
      }
    });
    this.system.move({
      source: ldif + "/cn=config/cn=schema/cn={0}" + options.name + ".ldif",
      target: ldif + "/cn=config/cn=schema/cn=" + options.name + ".ldif",
      force: true
    }, function(err, status) {
      if (!status) {
        throw Error('No generated schema');
      }
      return options.log('Configuration renamed');
    });
    this.file({
      target: ldif + "/cn=config/cn=schema/cn=" + options.name + ".ldif",
      write: [
        {
          match: /^dn: cn.*$/mg,
          replace: "dn: cn=" + options.name + ",cn=schema,cn=config"
        }, {
          match: /^cn: {\d+}(.*)$/mg,
          replace: 'cn: $1'
        }, {
          match: /^structuralObjectClass.*/mg,
          replace: ''
        }, {
          match: /^entryUUID.*/mg,
          replace: ''
        }, {
          match: /^creatorsName.*/mg,
          replace: ''
        }, {
          match: /^createTimestamp.*/mg,
          replace: ''
        }, {
          match: /^entryCSN.*/mg,
          replace: ''
        }, {
          match: /^modifiersName.*/mg,
          replace: ''
        }, {
          match: /^modifyTimestamp.*/mg,
          replace: ''
        }
      ]
    }, function(err) {
      if (!err) {
        return options.log("File ldif ready");
      }
    });
    return this.system.execute({
      cmd: "ldapadd " + uri + " " + binddn + " " + passwd + " -f " + ldif + "/cn=config/cn=schema/cn=" + options.name + ".ldif"
    }, function(err) {
      if (err) {
        throw err;
      }
      return options.log("Schema added: " + options.name);
    });
  });
  return this.system.remove({
    "if": function() {
      return this.status(-1);
    },
    target: tempdir
  });
};
