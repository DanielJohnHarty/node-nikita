// Generated by CoffeeScript 1.10.0
var merge;

module.exports = {
  backup: {
    '': require('./core/backup')
  },
  cache: {
    '': require('./core/cache')
  },
  chmod: {
    '': require('./core/chmod')
  },
  chown: {
    '': require('./core/chown')
  },
  compress: {
    '': require('./core/compress')
  },
  copy: {
    '': require('./core/copy')
  },
  download: {
    '': require('./core/download')
  },
  execute: {
    '': require('./core/execute')
  },
  extract: {
    '': require('./core/extract')
  },
  git: {
    '': require('./core/git')
  },
  group: {
    '': require('./core/group')
  },
  iptables: {
    '': require('./core/iptables')
  },
  link: {
    '': require('./core/link')
  },
  mkdir: {
    '': require('./core/mkdir')
  },
  move: {
    '': require('./core/move')
  },
  remove: {
    '': require('./core/remove')
  },
  render: {
    '': require('./core/render')
  },
  system_limits: {
    '': require('./core/system_limits')
  },
  touch: {
    '': require('./core/touch')
  },
  upload: {
    '': require('./core/upload')
  },
  user: {
    '': require('./core/user')
  },
  cron_add: {
    '': require('./cron/add')
  },
  cron_remove: {
    '': require('./cron/remove')
  },
  docker_build: {
    '': require('./docker/build')
  },
  docker_checksum: {
    '': require('./docker/checksum')
  },
  docker_cp: {
    '': require('./docker/cp')
  },
  docker_exec: {
    '': require('./docker/exec')
  },
  docker_kill: {
    '': require('./docker/kill')
  },
  docker_load: {
    '': require('./docker/load')
  },
  docker_pause: {
    '': require('./docker/pause')
  },
  docker_restart: {
    '': require('./docker/restart')
  },
  docker_rm: {
    '': require('./docker/rm')
  },
  docker_rmi: {
    '': require('./docker/rmi')
  },
  docker_run: {
    '': require('./docker/run')
  },
  docker_save: {
    '': require('./docker/save')
  },
  docker_service: {
    '': require('./docker/service')
  },
  docker_start: {
    '': require('./docker/start')
  },
  docker_status: {
    '': require('./docker/status')
  },
  docker_stop: {
    '': require('./docker/stop')
  },
  docker_unpause: {
    '': require('./docker/unpause')
  },
  docker_volume_create: {
    '': require('./docker/volume_create')
  },
  docker_volume_rm: {
    '': require('./docker/volume_rm')
  },
  docker_wait: {
    '': require('./docker/wait')
  },
  java_keystore_add: {
    '': require('./java/keystore_add')
  },
  java_keystore_remove: {
    '': require('./java/keystore_remove')
  },
  krb5_addprinc: {
    '': require('./krb5/addprinc')
  },
  krb5_delprinc: {
    '': require('./krb5/delprinc')
  },
  krb5_ktadd: {
    '': require('./krb5/ktadd')
  },
  ldap_acl: {
    '': require('./ldap/acl')
  },
  ldap_add: {
    '': require('./ldap/add')
  },
  ldap_delete: {
    '': require('./ldap/delete')
  },
  ldap_index: {
    '': require('./ldap/index')
  },
  ldap_schema: {
    '': require('./ldap/schema')
  },
  ldap_user: {
    '': require('./ldap/user')
  },
  service: {
    '': require('./service')
  },
  service_install: {
    '': require('./service/install')
  },
  service_remove: {
    '': require('./service/remove')
  },
  service_restart: {
    '': require('./service/restart')
  },
  service_start: {
    '': require('./service/start')
  },
  service_startup: {
    '': require('./service/startup')
  },
  service_status: {
    '': require('./service/status')
  },
  service_stop: {
    '': require('./service/stop')
  },
  wait: {
    '': require('./wait/time')
  },
  wait_connect: {
    '': require('./wait/connect')
  },
  wait_execute: {
    '': require('./wait/execute')
  },
  wait_exist: {
    '': require('./wait/exist')
  },
  write: {
    '': require('./write')
  },
  write_ini: {
    '': require('./write/ini')
  },
  write_properties: {
    '': require('./write/properties')
  },
  write_yaml: {
    '': require('./write/yaml')
  }
};

Object.defineProperty(module.exports, 'get', {
  configurable: true,
  enumerable: false,
  get: function() {
    return function(name) {
      var cnames, i, j, len, n;
      if (typeof name === 'string') {
        name = [name];
      }
      cnames = module.exports;
      for (i = j = 0, len = name.length; j < len; i = ++j) {
        n = name[i];
        if (!cnames[n]) {
          return null;
        }
        if (cnames[n] && cnames[n][''] && i === name.length - 1) {
          return cnames[n][''];
        }
        cnames = cnames[n];
      }
      return null;
    };
  }
});

Object.defineProperty(module.exports, 'register', {
  configurable: true,
  enumerable: false,
  get: function() {
    return function(name, handler) {
      var cleanup, cnames, j, n, name1, names, ref;
      if (typeof name === 'string') {
        name = [name];
      }
      if (Array.isArray(name)) {
        cnames = names = module.exports;
        for (n = j = 0, ref = name.length - 1; 0 <= ref ? j < ref : j > ref; n = 0 <= ref ? ++j : --j) {
          n = name[n];
          if (cnames[n] == null) {
            cnames[n] = {};
          }
          cnames = cnames[n];
        }
        if (cnames[name1 = name[name.length - 1]] == null) {
          cnames[name1] = {};
        }
        cnames[name[name.length - 1]][''] = handler;
        return merge(module.exports, names);
      } else {
        cleanup = function(obj) {
          var k, results, v;
          results = [];
          for (k in obj) {
            v = obj[k];
            if (typeof v === 'string') {
              v = require.main.require(v);
            }
            if (v && typeof v === 'object' && !Array.isArray(v && !v.handler)) {
              results.push(cleanup(v));
            } else {
              if (k !== '') {
                results.push(obj[k] = {
                  '': v
                });
              } else {
                results.push(void 0);
              }
            }
          }
          return results;
        };
        cleanup(name);
        return merge(module.exports, name);
      }
    };
  }
});

Object.defineProperty(module.exports, 'registered', {
  configurable: true,
  enumerable: false,
  get: function() {
    return function(name) {
      var cnames, i, j, len, n;
      if (typeof name === 'string') {
        name = [name];
      }
      cnames = module.exports;
      for (i = j = 0, len = name.length; j < len; i = ++j) {
        n = name[i];
        if (!cnames[n]) {
          return false;
        }
        if (cnames[n][''] && i === name.length - 1) {
          return true;
        }
        cnames = cnames[n];
      }
      return false;
    };
  }
});

Object.defineProperty(module.exports, 'unregister', {
  configurable: true,
  enumerable: false,
  get: function() {
    return function(name) {
      var cnames, i, j, len, n;
      if (typeof name === 'string') {
        name = [name];
      }
      cnames = module.exports;
      for (i = j = 0, len = name.length; j < len; i = ++j) {
        n = name[i];
        if (i === name.length - 1) {
          delete cnames[n];
        }
        cnames = cnames[n];
        if (!cnames) {
          return;
        }
      }
    };
  }
});

merge = require('./misc').merge;
