// Generated by CoffeeScript 1.9.1
var each, execute, misc, string, wrap;

module.exports = function(options, callback) {
  return wrap(this, arguments, function(options, callback) {
    var do_compare, do_create, do_info, do_modify, do_password, groups_info, modified, user_info;
    if (!options.name) {
      return callback(new Error("Option 'name' is required"));
    }
    if (options.shell === false) {
      options.shell = "/sbin/nologin";
    }
    if (options.shell === true) {
      options.shell = "/bin/bash";
    }
    if (options.system == null) {
      options.system = false;
    }
    if (options.gid == null) {
      options.gid = null;
    }
    if (typeof options.groups === 'string') {
      options.groups = options.groups.split(',');
    }
    if (typeof options.shell === "function" ? options.shell(typeof options.shell !== 'string') : void 0) {
      return callback(new Error("Invalid option 'shell': " + (JSON.strinfigy(options.shell))));
    }
    modified = false;
    user_info = groups_info = null;
    do_info = function() {
      var ref;
      if (typeof options.log === "function") {
        options.log("Get user information for " + options.name);
      }
      if ((ref = options.ssh) != null) {
        ref.passwd = null;
      }
      return misc.ssh.passwd(options.ssh, function(err, users) {
        var ref1;
        if (err) {
          return callback(err);
        }
        if (typeof options.log === "function") {
          options.log("Got " + (JSON.stringify(users[options.name])));
        }
        user_info = users[options.name];
        if (!user_info) {
          return do_create();
        }
        if (!options.groups) {
          return do_compare();
        }
        if ((ref1 = options.ssh) != null) {
          ref1.cache_group = null;
        }
        return misc.ssh.group(options.ssh, function(err, groups) {
          if (err) {
            return callback(err);
          }
          groups_info = groups;
          return do_compare();
        });
      });
    };
    do_create = function() {
      var cmd;
      cmd = 'useradd';
      if (options.system) {
        cmd += " -r";
      }
      if (!options.home) {
        cmd += " -M";
      }
      if (options.home) {
        cmd += " -d " + options.home;
      }
      if (options.shell) {
        cmd += " -s " + options.shell;
      }
      if (options.comment) {
        cmd += " -c " + (string.escapeshellarg(options.comment));
      }
      if (options.uid) {
        cmd += " -u " + options.uid;
      }
      if (options.gid) {
        cmd += " -g " + options.gid;
      }
      if (options.expiredate) {
        cmd += " -e " + options.expiredate;
      }
      if (options.inactive) {
        cmd += " -f " + options.inactive;
      }
      if (options.groups) {
        cmd += " -G " + (options.groups.join(','));
      }
      if (options.skel) {
        cmd += " -k " + options.skel;
      }
      cmd += " " + options.name;
      return execute({
        ssh: options.ssh,
        cmd: cmd,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr,
        code_skipped: 9
      }, function(err, created) {
        if (err) {
          return callback(err);
        }
        if (created) {
          modified = true;
          return do_password();
        } else {
          if (typeof options.log === "function") {
            options.log("User defined elsewhere than '/etc/passwd', exit code is 9");
          }
          return callback(null, modified);
        }
      });
    };
    do_compare = function() {
      var group, i, j, k, len, len1, ref, ref1;
      ref = ['uid', 'home', 'shell', 'comment', 'gid'];
      for (i = 0, len = ref.length; i < len; i++) {
        k = ref[i];
        if ((options[k] != null) && user_info[k] !== options[k]) {
          modified = true;
        }
      }
      if (options.groups) {
        ref1 = options.groups;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          group = ref1[j];
          if (!groups_info[group]) {
            return callback(err("Group does not exist: " + group));
          }
          if (groups_info[group].user_list.indexOf(options.name) === -1) {
            modified = true;
          }
        }
      }
      if (typeof options.log === "function") {
        options.log("Did user information changed: " + modified);
      }
      if (modified) {
        return do_modify();
      } else {
        return do_password();
      }
    };
    do_modify = function() {
      var cmd;
      cmd = 'usermod';
      if (options.home) {
        cmd += " -d " + options.home;
      }
      if (options.shell) {
        cmd += " -s " + options.shell;
      }
      if (options.comment != null) {
        cmd += " -c " + (string.escapeshellarg(options.comment));
      }
      if (options.gid) {
        cmd += " -g " + options.gid;
      }
      if (options.groups) {
        cmd += " -G " + (options.groups.join(','));
      }
      if (options.uid) {
        cmd += " -u " + options.uid;
      }
      cmd += " " + options.name;
      return execute({
        ssh: options.ssh,
        cmd: cmd,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err, _, __, stderr) {
        if ((err != null ? err.code : void 0) === 8) {
          return callback(new Error("User " + options.name + " is logged in"));
        }
        if (err) {
          return callback(err);
        }
        return do_password();
      });
    };
    do_password = function() {
      if (!options.password) {
        return callback(null, modified);
      }
      return execute({
        ssh: options.ssh,
        cmd: "echo " + user.password + " | passwd --stdin " + user.username,
        log: options.log,
        stdout: options.stdout,
        stderr: options.stderr
      }, function(err) {
        return callback(err, modified);
      });
    };
    return do_info();
  });
};

each = require('each');

misc = require('./misc');

string = require('./misc/string');

wrap = require('./misc/wrap');

execute = require('./execute');
