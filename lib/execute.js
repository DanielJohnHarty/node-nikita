// Generated by CoffeeScript 1.8.0
var child, conditions, each, exec, misc, wrap;

module.exports = function(goptions, options, callback) {
  var stds;
  callback = arguments[arguments.length - 1];
  if (typeof callback !== 'function') {
    callback = null;
  }
  stds = callback ? callback.length > 2 : false;
  return wrap(arguments, function(options, next) {
    if (typeof options.log === "function") {
      options.log("Mecano `execute`");
    }
    if (typeof options === 'string') {
      options = {
        cmd: options
      };
    }
    if (options.cmd == null) {
      return next(new Error("Missing cmd: " + options.cmd));
    }
    if (options.code == null) {
      options.code = [0];
    }
    if (!Array.isArray(options.code)) {
      options.code = [options.code];
    }
    if (options.code_skipped == null) {
      options.code_skipped = [];
    }
    if (!Array.isArray(options.code_skipped)) {
      options.code_skipped = [options.code_skipped];
    }
    if (options.trap_on_error) {
      options.cmd = "set -e\n" + options.cmd;
    }
    return conditions.all(options, next, function() {
      var run, stderr, stdout;
      if (typeof options.log === "function") {
        options.log("Mecano `execute`: " + options.cmd);
      }
      run = exec(options);
      stdout = stderr = [];
      if (options.stdout) {
        run.stdout.pipe(options.stdout, {
          end: false
        });
      }
      if (stds) {
        run.stdout.on('data', function(data) {
          return stdout.push(data);
        });
      }
      if (options.stderr) {
        run.stderr.pipe(options.stderr, {
          end: false
        });
      }
      if (stds) {
        run.stderr.on('data', function(data) {
          return stderr.push(data);
        });
      }
      return run.on("exit", function(code) {
        return setTimeout(function() {
          var err, executed;
          stdout = stds ? stdout.join('') : void 0;
          stderr = stds ? stderr.join('') : void 0;
          if (options.stdout) {
            run.stdout.unpipe(options.stdout);
          }
          if (options.stderr) {
            run.stderr.unpipe(options.stderr);
          }
          if (options.code.indexOf(code) === -1 && options.code_skipped.indexOf(code) === -1) {
            if (typeof options.log === "function") {
              options.log("Mecano `execute`: invalid exit code \"" + code + "\"");
            }
            err = new Error("Invalid Exit Code: " + code);
            err.code = code;
            return next(err);
          }
          if (options.code_skipped.indexOf(code) === -1) {
            executed = true;
          } else {
            if (typeof options.log === "function") {
              options.log("Mecano `execute`: skip exit code \"" + code + "\"");
            }
          }
          return next(null, executed, stdout, stderr);
        }, 1);
      });
    });
  });
};

each = require('each');

exec = require('ssh2-exec');

misc = require('./misc');

wrap = require('./misc/wrap');

conditions = require('./misc/conditions');

child = require('./misc/child');
