// Generated by CoffeeScript 2.0.2
// # `nikita.system.execute.assert(options)`

// Assert a shell command.

// ## Options

// * `cmd`   
//   String, Object or array; Command to execute.
// * `not` (boolean)   
//   Negates the validation.   

// ## Assert a command stdout

// ```javascript
// nikita.system.execute({
//   cmd: 'echo hello'
//   assert: 'hello'
// }, function(err){
//   console.log(err || 'ok');
// });
// ```

// ## Source Code
module.exports = function(options) {
  this.call({
    if: (options.content != null) && (typeof options.content === 'string' || Buffer.isBuffer(options.content))
  }, function() {
    return this.system.execute(options.cmd, function(err, _, stdout) {
      if (err) {
        throw err;
      }
      if (!options.not) {
        if (stdout !== options.content) {
          if (options.error == null) {
            options.error = "Invalid content";
          }
          err = Error(options.error);
        }
      } else {
        if (stdout === options.content) {
          if (options.error == null) {
            options.error = "Unexpected content";
          }
          err = Error(options.error);
        }
      }
      if (err) {
        throw err;
      }
    });
  });
  return this.call({
    if: (options.content != null) && options.content instanceof RegExp
  }, function() {
    return this.system.execute(options.cmd, function(err, _, stdout) {
      if (err) {
        throw err;
      }
      if (!options.not) {
        if (!options.content.test(stdout)) {
          if (options.error == null) {
            options.error = "Invalid content match";
          }
          err = Error(options.error);
        }
      } else {
        if (options.content.test(stdout)) {
          if (options.error == null) {
            options.error = "Unexpected content match";
          }
          err = Error(options.error);
        }
      }
      if (err) {
        throw err;
      }
    });
  });
};
