// Generated by CoffeeScript 2.0.2
// # `nikita.system.move(options, [callback])`

// Move files and directories. It is ok to overwrite the target file if it
// exists, in which case the source file will no longer exists.

// ## Options

// * `target`   
//   Final name of the moved resource.   
// * `force`   
//   Force the replacement of the file without checksum verification, speed up
//   the action and disable the `moved` indicator in the callback.   
// * `source`   
//   File or directory to move.   
// * `target_md5`   
//   Destination md5 checkum if known, otherwise computed if target
//   exists.   
// * `source_md5`   
//   Source md5 checkum if known, otherwise computed.   

// ## Callback parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   Value is "true" if resource was moved.   

// ## Example

// ```js
// require('nikita').system.move({
//   source: __dirname,
//   desination: '/tmp/my_dir'
// }, function(err, status){
//   console.log(err ? err.message : 'File moved: ' + !!status);
// });
// ```

// ## Source Code
var file, fs;

module.exports = function(options, callback) {
  var do_chkhash, do_dsthash, do_exists, do_move, do_remove_src, do_replace_dest, do_srchash;
  options.log({
    message: "Entering move",
    level: 'DEBUG',
    module: 'nikita/lib/system/move'
  });
  do_exists = function() {
    options.log({
      message: "Stat target",
      level: 'DEBUG',
      module: 'nikita/lib/system/move'
    });
    return fs.stat(options.ssh, options.target, function(err, stat) {
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return do_move();
      }
      if (err) {
        return callback(err);
      }
      if (options.force) {
        return do_replace_dest();
      } else {
        return do_srchash();
      }
    });
  };
  do_srchash = function() {
    if (options.source_md5) {
      return do_dsthash();
    }
    options.log({
      message: "Get source md5",
      level: 'DEBUG',
      module: 'nikita/lib/system/move'
    });
    return file.hash(options.ssh, options.source, 'md5', function(err, hash) {
      if (err) {
        return callback(err);
      }
      options.log({
        message: "Source md5 is \"hash\"",
        level: 'INFO',
        module: 'nikita/lib/system/move'
      });
      options.source_md5 = hash;
      return do_dsthash();
    });
  };
  do_dsthash = function() {
    if (options.target_md5) {
      return do_chkhash();
    }
    options.log({
      message: "Get target md5",
      level: 'DEBUG',
      module: 'nikita/lib/system/move'
    });
    return file.hash(options.ssh, options.target, 'md5', function(err, hash) {
      if (err) {
        return callback(err);
      }
      options.log({
        message: "Destination md5 is \"hash\"",
        level: 'INFO',
        module: 'nikita/lib/system/move'
      });
      options.target_md5 = hash;
      return do_chkhash();
    });
  };
  do_chkhash = function() {
    if (options.source_md5 === options.target_md5) {
      return do_remove_src();
    } else {
      return do_replace_dest();
    }
  };
  do_replace_dest = () => {
    options.log({
      message: `Remove ${options.target}`,
      level: 'WARN',
      module: 'nikita/lib/system/move'
    });
    return this.system.remove({
      target: options.target
    }, function(err, removed) {
      if (err) {
        return callback(err);
      }
      return do_move();
    });
  };
  do_move = function() {
    options.log({
      message: `Rename ${options.source} to ${options.target}`,
      level: 'WARN',
      module: 'nikita/lib/system/move'
    });
    return fs.rename(options.ssh, options.source, options.target, function(err) {
      if (err) {
        return callback(err);
      }
      return callback(null, true);
    });
  };
  do_remove_src = () => {
    options.log({
      message: `Remove ${options.source}`,
      level: 'WARN',
      module: 'nikita/lib/system/move'
    });
    return this.system.remove({
      target: options.source
    }, function(err, removed) {
      return callback(err);
    });
  };
  return do_exists();
};

// ## Dependencies
fs = require('ssh2-fs');

file = require('../misc/file');
