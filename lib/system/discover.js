// Generated by CoffeeScript 1.12.6
var string;

module.exports = {
  shy: true,
  handler: function(options, callback) {
    var detected, os;
    detected = false;
    os = {};
    os.type = null;
    os.release = null;
    if (options.strict == null) {
      options.strict = false;
    }
    if (options.cache == null) {
      options.cache = false;
    }
    if (options.cache && options.store['nikita:system:type']) {
      return callback(null, false, {
        type: options.store['nikita:system:type'],
        release: options.store['nikita:system:release']
      });
    }
    this.system.execute({
      cmd: 'cat /etc/redhat-release',
      if_exec: "cat /etc/redhat-release | egrep '(Red\\sHat)|(CentOS)'",
      unless: options.store['nikita:system:type'] != null
    }, function(err, status, stdout, stderr) {
      var line, ref, splits;
      if (err) {
        throw err;
      }
      if (!status) {
        return;
      }
      line = string.lines(stdout)[0];
      if (/^CentOS/.test(line)) {
        os.type = 'centos';
        splits = line.split(' ');
        os.release = splits[splits.indexOf('release') + 1];
      }
      if (/^Red\sHat/.test(line)) {
        os.type = 'redhat';
        splits = line.split(' ');
        os.release = splits[splits.indexOf('release') + 1];
      }
      if (/^Oracle/.test(line)) {
        os.type = 'oracle';
        splits = line.split(' ');
        os.release = splits[splits.indexOf('release') + 1];
      }
      if (options.cache) {
        options.store['nikita:system:type'] = os.type;
        options.store['nikita:system:release'] = os.release;
      }
      if (options.strict && ((ref = os.type) !== 'redhat' && ref !== 'centos' && ref !== 'oracle')) {
        throw Error('OS not supported');
      }
    });
    this.system.execute({
      cmd: ". /etc/lsb-release\necho \"$DISTRIB_ID,$DISTRIB_RELEASE\"",
      if_exec: "cat /etc/lsb-release | egrep 'Ubuntu'",
      unless: function() {
        return options.store['nikita:system:type'] != null;
      }
    }, function(err, status, stdout, stderr) {
      var distrib_id, distrib_release, ref, ref1;
      if (err) {
        throw err;
      }
      if (!status) {
        return;
      }
      ref = stdout.trim().split(','), distrib_id = ref[0], distrib_release = ref[1];
      os.type = distrib_id.toLowerCase();
      os.release = distrib_release;
      if (options.cache) {
        options.store['nikita:system:type'] = os.type;
        options.store['nikita:system:release'] = os.release;
      }
      if (options.strict && ((ref1 = os.type) !== 'ubuntu')) {
        throw Error('OS not supported');
      }
    });
    return this.then(function(err, status) {
      return callback(err, status, os);
    });
  }
};

string = require('../misc/string');
