// Generated by CoffeeScript 1.11.1
var string;

module.exports = function(options, callback) {
  var detected, os;
  detected = false;
  os = {};
  os.type = null;
  os.release = null;
  if (options.strict == null) {
    options.strict = false;
  }
  if (options.shy == null) {
    options.shy = true;
  }
  if (options.cache == null) {
    options.cache = true;
  }
  this.system.execute({
    cmd: 'cat /etc/system-release',
    if_exec: "cat /etc/system-release | egrep '(Red\\sHat)|(CentOS)'",
    unless: options.store['mecano:system:type'] != null,
    shy: options.shy
  }, function(err, status, stdout, stderr) {
    var line, splits;
    if (err) {
      throw err;
    }
    if (stdout) {
      line = string.lines(stdout)[0];
      if (/CentOS/.test(line)) {
        os.type = 'centos';
        splits = line.split(' ');
        os.release = splits[splits.indexOf('release') + 1];
      }
      if (/Red\sHat/.test(line)) {
        os.type = 'redhat';
        splits = line.split(' ');
        os.release = splits[splits.indexOf('release') + 1];
      }
      if (options.cache) {
        options.store['mecano:system:type'] = os.type;
        return options.store['mecano:system:release'] = os.release;
      }
    }
  });
  this.system.execute({
    cmd: ". /etc/lsb-release\necho \"$DISTRIB_ID,$DISTRIB_RELEASE\"",
    if_exec: "cat /etc/lsb-release | egrep 'Ubuntu'",
    unless: function() {
      return options.store['mecano:system:type'] != null;
    },
    shy: options.shy
  }, function(err, status, stdout, stderr) {
    var distrib_id, distrib_release, ref;
    if (err) {
      throw err;
    }
    if (stdout) {
      ref = stdout.trim().split(','), distrib_id = ref[0], distrib_release = ref[1];
      os.type = distrib_id.toLowerCase();
      os.release = distrib_release;
      if (options.cache) {
        options.store['mecano:system:type'] = os.type;
        options.store['mecano:system:release'] = os.release;
      }
      if (!((distrib_id === 'Ubuntu') || options.strict)) {
        return callback(Error('Os not supported'));
      }
    }
  });
  return this.then(function(err, status) {
    if (options.cache) {
      if (os.type == null) {
        os.type = options.store['mecano:system:type'];
      }
      if (os.release == null) {
        os.release = options.store['mecano:system:release'];
      }
    }
    if (!(os.type || options.strict || err)) {
      err = Error('OS not discovered');
    }
    return callback(err, status, os);
  });
};

string = require('../misc/string');
