// Generated by CoffeeScript 1.9.3
module.exports = function(options, callback) {
  var i, j, len, len1, opt, ref, ref1, ref2, write;
  if (!options.user) {
    return callback(Error("Missing required option 'user'"));
  }
  ref = ['nofile', 'nproc'];
  for (i = 0, len = ref.length; i < len; i++) {
    opt = ref[i];
    if ((options[opt] != null) && ((ref1 = typeof options[opt]) !== 'boolean' && ref1 !== 'number')) {
      return callback(Error("Invalid option '" + opt + "'"));
    }
  }
  ref2 = ['as', 'core', 'cpu', 'data', 'fsize', 'locks', 'maxlogins', 'maxsyslogins', 'memlock', 'msgqueue', 'nice', 'priority', 'rss', 'sigpending', 'stack', 'rtprio'];
  for (j = 0, len1 = ref2.length; j < len1; j++) {
    opt = ref2[j];
    if ((options[opt] != null) && typeof options[opt] !== 'number') {
      return callback(Error("Invalid option '" + opt + "'"));
    }
  }
  if (options.destination == null) {
    options.destination = "/etc/security/limits.d/" + options.user + ".conf";
  }
  write = [];
  return this.execute({
    cmd: "cat /proc/sys/fs/file-max",
    shy: true,
    "if": options.nofile === true
  }, function(err, status, stdout) {
    if (err) {
      return callback(err);
    }
    if (!status) {
      return;
    }
    return options.nofile = stdout.trim();
  }).execute({
    cmd: "cat /proc/sys/kernel/pid_max",
    shy: true,
    "if": options.nproc === true
  }, function(err, status, stdout) {
    if (err) {
      return callback(err);
    }
    if (!status) {
      return;
    }
    return options.nproc = stdout.trim();
  }).call(function() {
    var k, len2, ref3;
    ref3 = ['as', 'core', 'cpu', 'data', 'fsize', 'locks', 'maxlogins', 'maxsyslogins', 'memlock', 'msgqueue', 'nice', 'nofile', 'nproc', 'priority', 'rss', 'sigpending', 'stack', 'rtprio'];
    for (k = 0, len2 = ref3.length; k < len2; k++) {
      opt = ref3[k];
      if (options[opt] != null) {
        write.push({
          match: RegExp("^" + options.user + ".+" + opt + ".+$", 'm'),
          replace: options.user + "    -    " + opt + "   " + options[opt],
          append: true
        });
      }
    }
    return false;
  }).write({
    destination: options.destination,
    write: write,
    eof: true,
    uid: options.uid,
    gid: options.gid,
    "if": function() {
      return write.length;
    }
  }).then(callback);
};
