// Generated by CoffeeScript 1.12.5
var fs, glob, misc, path, string, url;

module.exports = function(options) {
  var remote_files, repoids;
  options.log({
    message: "Entering tools.repo",
    level: 'DEBUG',
    module: 'nikita/lib/tools/repo'
  });
  if (options.source && options.content) {
    throw Error("Can not specify source and content");
  }
  if (!(options.source || options.content)) {
    throw Error("Missing source or content: ");
  }
  if (options.source != null) {
    if (options.target == null) {
      options.target = "/etc/yum.repos.d/" + (path.basename(options.source));
    }
  }
  options.target = path.posix.resolve('/etc/yum.repos.d', options.target);
  if (options.target == null) {
    throw Error(" Missing target");
  }
  if (options.verify == null) {
    options.verify = true;
  }
  if (options.local == null) {
    options.local = false;
  }
  if (options.clean == null) {
    options.clean = true;
  }
  if (options.update == null) {
    options.update = false;
  }
  if (options.gpg_dir == null) {
    options.gpg_dir = '/etc/pki/rpm-gpg';
  }
  remote_files = [];
  repoids = [];
  this.call({
    "if": options.clean != null
  }, function(_, callback) {
    options.log({
      message: "Searching repositories inside \"/etc/yum.repos.d/\"",
      level: 'DEBUG',
      module: 'nikita/lib/tools/repo'
    });
    return glob(options.ssh, "/etc/yum.repos.d/" + options.clean, function(err, files) {
      var file;
      if (err) {
        return callback(err);
      }
      remote_files = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          if (file === options.target) {
            continue;
          }
          results.push(file);
        }
        return results;
      })();
      return callback();
    });
  });
  this.call(function() {
    return this.system.remove(remote_files);
  });
  this.file.download({
    "if": options.source != null,
    source: options.source,
    target: options.target,
    headers: options.headers,
    md5: options.md5,
    proxy: options.proxy,
    location: options.location,
    cache: false
  });
  this.file.types.yum_repo({
    "if": options.content != null,
    content: options.content,
    mode: options.mode,
    uid: options.uid,
    gid: options.gid,
    target: options.target
  });
  this.call({
    "if": function() {
      return options.verify;
    }
  }, function() {
    var keys;
    keys = [];
    options.log("Download " + options.target + "'s GPG keys", {
      level: 'INFO',
      module: 'nikita/lib/tools/repo'
    });
    this.call(function(_, callback) {
      options.log("Read GPG keys from " + options.target, {
        level: 'DEBUG',
        module: 'nikita/lib/tools/repo'
      });
      return fs.readFile(options.ssh, options.target, 'utf8', (function(_this) {
        return function(err, content) {
          var data, name, section;
          if (err) {
            return callback(err);
          }
          data = misc.ini.parse_multi_brackets(content);
          keys = (function() {
            var results;
            results = [];
            for (name in data) {
              section = data[name];
              repoids.push(name);
              if (section.gpgcheck !== '1') {
                continue;
              }
              if (section.gpgkey == null) {
                throw Error('Missing gpgkey');
              }
              if (!/^http(s)??:\/\//.test(section.gpgkey)) {
                continue;
              }
              results.push(section.gpgkey);
            }
            return results;
          })();
          return callback();
        };
      })(this));
    });
    return this.call(function() {
      var i, key, len, results;
      results = [];
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        options.log("Downloading GPG keys from " + key, {
          level: 'DEBUG',
          module: 'nikita/lib/tools/repo'
        });
        this.file.download({
          source: key,
          target: options.gpg_dir + "/" + (path.basename(key))
        });
        results.push(this.system.execute({
          "if": function() {
            return this.status(-1);
          },
          cmd: "rpm --import " + options.gpg_dir + "/" + (path.basename(key))
        }));
      }
      return results;
    });
  });
  this.system.execute({
    "if": function() {
      return options.clean && this.status();
    },
    cmd: 'yum clean metadata; yum repolist'
  });
  return this.system.execute({
    "if": function() {
      return options.update && this.status();
    },
    cmd: "yum update -y --disablerepo=* --enablerepo=" + (repoids.join(',')) + "; yum repolist"
  });
};

fs = require('ssh2-fs');

string = require('../misc/string');

path = require('path');

glob = require('../misc/glob');

misc = require('../misc');

url = require('url');
