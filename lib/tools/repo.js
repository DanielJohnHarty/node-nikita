// Generated by CoffeeScript 1.12.5
var fs, glob, misc, path, string, url;

module.exports = function(options) {
  var file_name, keys, remote_files;
  options.log({
    message: "Entering tools.repo",
    level: 'DEBUG',
    module: 'nikita/lib/tools/repo'
  });
  if (!options.source) {
    throw Error("Missing source: " + options.source);
  }
  options.source = path.resolve('/etc/yum.repos.d', options.source);
  if (options.target == null) {
    options.target = path.basename(options.source);
  }
  options.target = path.resolve('/etc/yum.repos.d', options.target);
  if (options.verify == null) {
    options.verify = true;
  }
  if (options.local == null) {
    options.local = false;
  }
  remote_files = [];
  keys = [];
  file_name = path.basename(options.source);
  if (options.target == null) {
    options.target = path.resolve('/etc/yum.repos.d/', file_name);
  }
  this.call({
    "if": options.replace != null
  }, function(_, callback) {
    options.log({
      message: "Searching repositories inside \"/etc/yum.repos.d/\"",
      level: 'DEBUG',
      module: 'nikita/lib/tools/repo'
    });
    return glob(options.ssh, "/etc/yum.repos.d/" + options.replace, function(err, files) {
      var file;
      if (err) {
        return callback(err);
      }
      remote_files = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          if (file === file_name) {
            continue;
          }
          results.push("/etc/yum.repos.d/" + file);
        }
        return results;
      })();
      return callback();
    });
  });
  this.system.remove(remote_files);
  this.file.types.yum_repo({
    source: options.source,
    local: options.local,
    content: options.content,
    mode: options.mode,
    uid: options.uid,
    gid: options.gid,
    target: options.target
  });
  this.call({
    "if": function() {
      return options.verify;
    }
  }, function() {
    options.log("Download " + options.source + "'s GPG keys", {
      level: 'INFO',
      module: 'nikita/lib/tools/repo'
    });
    this.call(function(_, callback) {
      options.log("Read GPG keys from " + options.source, {
        level: 'DEBUG',
        module: 'nikita/lib/tools/repo'
      });
      return fs.readFile(options.ssh, options.target, 'utf8', (function(_this) {
        return function(err, content) {
          var data, name, section;
          if (err) {
            return callback(err);
          }
          data = misc.ini.parse_multi_brackets(content);
          keys = (function() {
            var results;
            results = [];
            for (name in data) {
              section = data[name];
              if (section.gpgcheck !== '1') {
                continue;
              }
              if (section.gpgkey == null) {
                throw Error('Missing data.gpgkey');
              }
              if (!/^http(s)??:\/\//.test(section.gpgkey)) {
                continue;
              }
              results.push(section.gpgkey);
            }
            return results;
          })();
          return callback();
        };
      })(this));
    });
    return this.call({
      "if": function() {
        return keys.length !== 0;
      }
    }, function() {
      return this.each(keys, function(options) {
        var gpgkey;
        gpgkey = options.key;
        options.log("Downloading GPG keys from " + gpgkey, {
          level: 'DEBUG',
          module: 'nikita/lib/tools/repo'
        });
        this.file.download({
          source: gpgkey,
          target: "/etc/pki/rpm-gpg/" + (path.basename(gpgkey))
        });
        return this.system.execute({
          "if": function() {
            return this.status(-1);
          },
          cmd: "rpm --import  /etc/pki/rpm-gpg/" + (path.basename(gpgkey))
        });
      });
    });
  });
  return this.system.execute({
    cmd: 'yum clean metadata; yum repolist',
    "if": function() {
      return options.update && this.status();
    }
  });
};

fs = require('ssh2-fs');

string = require('../misc/string');

path = require('path');

glob = require('../misc/glob');

misc = require('../misc');

url = require('url');
