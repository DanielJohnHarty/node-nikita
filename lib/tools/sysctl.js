// Generated by CoffeeScript 1.12.5
var fs, string,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = function(options) {
  var current, final;
  options.log({
    message: "Entering sysctl",
    level: 'DEBUG',
    module: 'nikita/lib/tools/sysctl'
  });
  if (options.load == null) {
    options.load = true;
  }
  if (options.target == null) {
    options.target = '/etc/sysctl.conf';
  }
  current = {};
  this.call(function(_, callback) {
    var status;
    status = false;
    options.log({
      message: "Read target: " + options.target,
      level: 'DEBUG',
      module: 'nikita/lib/tools/sysctl'
    });
    return fs.readFile(options.ssh, options.target, 'ascii', (function(_this) {
      return function(err, data) {
        var i, key, len, line, ref, ref1, value;
        if (err && err.code === 'ENOENT') {
          return callback();
        }
        if (err) {
          return callback(err);
        }
        ref = string.lines(data);
        for (i = 0, len = ref.length; i < len; i++) {
          line = ref[i];
          if (/^#/.test(line)) {
            if (options.comment) {
              current[line] = null;
            }
            continue;
          }
          if (/^\s*$/.test(line)) {
            current[line] = null;
            continue;
          }
          ref1 = line.split('='), key = ref1[0], value = ref1[1];
          key = key.trim();
          value = value.trim();
          if (indexOf.call(options.properties, key) >= 0 && (options.properties[key] == null)) {
            options.log("Removing Property: " + key + ", was " + value, {
              level: 'INFO',
              module: 'nikita/lib/tools/sysctl'
            });
            status = true;
            continue;
          }
          current[key] = value;
        }
        return callback(null, status);
      };
    })(this));
  });
  final = {};
  this.call(function(_, callback) {
    var k, key, ref, status, v, value;
    if (options.merge) {
      for (k in current) {
        v = current[k];
        final[k] = v;
      }
    }
    status = false;
    ref = options.properties;
    for (key in ref) {
      value = ref[key];
      if (value == null) {
        continue;
      }
      if (typeof value === 'number') {
        value = "" + value;
      }
      if (current[key] === value) {
        continue;
      }
      options.log("Update Property: key \"" + key + "\" from \"" + final[key] + "\" to \"" + value + "\"", {
        level: 'INFO',
        module: 'nikita/lib/tools/sysctl'
      });
      final[key] = value;
      status = true;
    }
    return callback(null, status);
  });
  this.call({
    "if": function() {
      return this.status();
    }
  }, function() {
    var key, value;
    return this.file({
      target: "" + options.target,
      content: ((function() {
        var results;
        results = [];
        for (key in final) {
          value = final[key];
          if (value != null) {
            results.push(key + " = " + value);
          } else {
            results.push("" + key);
          }
        }
        return results;
      })()).join('\n')
    });
  });
  return this.system.execute({
    "if": [
      options.load, function() {
        return this.status();
      }
    ],
    cmd: "sysctl -p " + options.target
  });
};

fs = require('ssh2-fs');

string = require('../misc/string');
