// Generated by CoffeeScript 1.12.5
var semver, string;

module.exports = function(options) {
  var base, current_gems, name1;
  options.log({
    message: "Entering rubygem.install",
    level: 'DEBUG',
    module: 'nikita/lib/tools/rubygem/install'
  });
  if (options.gem_bin == null) {
    options.gem_bin = 'gem';
  }
  if (options.gems == null) {
    options.gems = {};
  }
  if (options.name) {
    if ((base = options.gems)[name1 = options.name] == null) {
      base[name1] = options.version;
    }
  }
  current_gems = {};
  this.system.execute({
    cmd: "gem list --versions",
    shy: true
  }, function(err, _, stdout) {
    var i, len, line, name, ref, ref1, results, version;
    ref = string.lines(stdout);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      if (line.trim() === '') {
        continue;
      }
      ref1 = line.match(/(.*?)(?:$| \(([\d\., ]+)\))/).slice(1, 4), name = ref1[0], version = ref1[1];
      results.push(current_gems[name] = version.split(', '));
    }
    return results;
  });
  this.call(function() {
    var is_version_matching, name, ref, results, version;
    ref = options.gems;
    results = [];
    for (name in ref) {
      version = ref[name];
      if (!current_gems[name]) {
        continue;
      }
      is_version_matching = current_gems[name].some(function(current_version) {
        return semver.satisfies(version, current_version);
      });
      if (version && !is_version_matching) {
        continue;
      }
      results.push(delete options.gems[name]);
    }
    return results;
  });
  return this.call(function() {
    var name, version;
    return this.system.execute({
      "if": Object.keys(options.gems).length,
      cmd: ((function() {
        var ref, results;
        ref = options.gems;
        results = [];
        for (name in ref) {
          version = ref[name];
          results.push(["" + options.gem_bin, "install", "" + options.name, options.bindir ? "--bindir '" + options.bindir + "'" : void 0, options.target ? "--install-dir '" + options.target + "'" : void 0, options.version && !options.source ? "--version '" + options.version + "'" : void 0, options.source ? "--local '" + options.source + "'" : void 0, options.build_flags ? "--build-flags options.build_flags" : void 0].join(' '));
        }
        return results;
      })()).join('\n'),
      code: [0, 2]
    });
  });
};

semver = require('semver');

string = require('../../misc/string');
