// Generated by CoffeeScript 1.12.5
var glob, path, semver, string,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = function(options) {
  var base, current_gems, k, name1, ref, v;
  options.log({
    message: "Entering rubygem.install",
    level: 'DEBUG',
    module: 'nikita/lib/tools/rubygem/install'
  });
  if (options.ruby == null) {
    options.ruby = {};
  }
  ref = options.ruby;
  for (k in ref) {
    v = ref[k];
    if (options[k] == null) {
      options[k] = v;
    }
  }
  if (options.gem_bin == null) {
    options.gem_bin = 'gem';
  }
  if (options.gems == null) {
    options.gems = {};
  }
  if (options.name) {
    if ((base = options.gems)[name1 = options.name] == null) {
      base[name1] = options.version;
    }
  }
  if (options.sources == null) {
    options.sources = [];
  }
  current_gems = {};
  this.system.execute({
    cmd: options.gem_bin + " list --versions",
    shy: true,
    bash: options.bash
  }, function(err, _, stdout) {
    var i, len, line, name, ref1, ref2, results, version;
    ref1 = string.lines(stdout);
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      line = ref1[i];
      if (line.trim() === '') {
        continue;
      }
      ref2 = line.match(/(.*?)(?:$| \((?:default:\s+)?([\d\., ]+)\))/).slice(1, 4), name = ref2[0], version = ref2[1];
      results.push(current_gems[name] = version.split(', '));
    }
    return results;
  });
  this.call({
    "if": options.source
  }, function(_, callback) {
    return glob(options.ssh, options.source, function(err, sources) {
      if (err) {
        return callback(err);
      }
      options.source = sources.filter(function(source) {
        var current_filenames, filename, n;
        filename = path.basename(source);
        current_filenames = (function() {
          var results;
          results = [];
          for (n in current_gems) {
            v = current_gems[n];
            results.push(n + "-" + v + ".gem");
          }
          return results;
        })();
        if (indexOf.call(current_filenames, filename) < 0) {
          return true;
        }
      });
      return callback();
    });
  });
  this.call(function() {
    var is_version_matching, name, ref1, results, version;
    ref1 = options.gems;
    results = [];
    for (name in ref1) {
      version = ref1[name];
      if (!current_gems[name]) {
        continue;
      }
      is_version_matching = current_gems[name].some(function(current_version) {
        return semver.satisfies(version, current_version);
      });
      if (version && !is_version_matching) {
        continue;
      }
      results.push(delete options.gems[name]);
    }
    return results;
  });
  this.call(function() {
    return {
      "if": options.sources.length
    };
  }, function() {
    var source;
    return this.system.execute({
      "if": options.sources.length,
      cmd: ((function() {
        var i, len, ref1, results;
        ref1 = options.sources;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          source = ref1[i];
          results.push(["" + options.gem_bin, "install", options.bindir ? "--bindir '" + options.bindir + "'" : void 0, options.target ? "--install-dir '" + options.target + "'" : void 0, options.source ? "--local '" + options.source + "'" : void 0, options.build_flags ? "--build-flags options.build_flags" : void 0].join(' '));
        }
        return results;
      })()).join('\n'),
      code: [0, 2],
      bash: options.bash
    });
  });
  return this.call(function() {
    var name, version;
    return this.system.execute({
      "if": Object.keys(options.gems).length,
      cmd: ((function() {
        var ref1, results;
        ref1 = options.gems;
        results = [];
        for (name in ref1) {
          version = ref1[name];
          results.push(["" + options.gem_bin, "install", "" + options.name, options.bindir ? "--bindir '" + options.bindir + "'" : void 0, options.target ? "--install-dir '" + options.target + "'" : void 0, options.version ? "--version '" + options.version + "'" : void 0, options.build_flags ? "--build-flags options.build_flags" : void 0].join(' '));
        }
        return results;
      })()).join('\n'),
      code: [0, 2],
      bash: options.bash
    });
  });
};

path = require('path');

semver = require('semver');

glob = require('../../misc/glob');

string = require('../../misc/string');
