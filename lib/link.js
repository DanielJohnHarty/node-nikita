// Generated by CoffeeScript 1.8.0
var fs, mkdir, path, wrap;

module.exports = function(goptions, options, callback) {
  return wrap(arguments, function(options, callback) {
    var do_dispatch, do_end, do_mkdir, exec_create, exec_exists, linked, sym_create, sym_exists;
    linked = 0;
    sym_exists = function(options, callback) {
      return fs.exists(options.ssh, options.destination, function(err, exists) {
        if (!exists) {
          return callback(null, false);
        }
        return fs.readlink(options.ssh, options.destination, function(err, resolvedPath) {
          if (err) {
            return callback(err);
          }
          if (resolvedPath === options.source) {
            return callback(null, true);
          }
          return fs.unlink(options.ssh, options.destination, function(err) {
            if (err) {
              return callback(err);
            }
            return callback(null, false);
          });
        });
      });
    };
    sym_create = function(options, callback) {
      return fs.symlink(options.ssh, options.source, options.destination, function(err) {
        if (err) {
          return callback(err);
        }
        linked++;
        return callback();
      });
    };
    exec_exists = function(options, callback) {
      return fs.exists(options.ssh, options.destination, function(err, exists) {
        if (!exists) {
          return callback(null, false);
        }
        return fs.readFile(options.ssh, options.destination, 'utf8', function(err, content) {
          var exec_cmd;
          if (err) {
            return callback(err);
          }
          exec_cmd = /exec (.*) \$@/.exec(content)[1];
          return callback(null, exec_cmd && exec_cmd === options.source);
        });
      });
    };
    exec_create = function(options, callback) {
      var content;
      content = "#!/bin/bash\nexec " + options.source + " $@";
      return fs.writeFile(options.ssh, options.destination, content, function(err) {
        if (err) {
          return callback(err);
        }
        return fs.chmod(options.ssh, options.destination, options.mode, function(err) {
          if (err) {
            return callback(err);
          }
          linked++;
          return callback();
        });
      });
    };
    if (!options.source) {
      return callback(new Error("Missing source, got " + (JSON.stringify(options.source))));
    }
    if (!options.destination) {
      return callback(new Error("Missing destination, got " + (JSON.stringify(options.destination))));
    }
    if (options.mode == null) {
      options.mode = 0x1ed;
    }
    do_mkdir = function() {
      return mkdir({
        ssh: options.ssh,
        destination: path.dirname(options.destination)
      }, function(err, created) {
        if (err && err.code !== 'EEXIST') {
          return callback(err);
        }
        return do_dispatch();
      });
    };
    do_dispatch = function() {
      if (options.exec) {
        return exec_exists(options, function(err, exists) {
          if (exists) {
            return do_end();
          }
          return exec_create(options, do_end);
        });
      } else {
        return sym_exists(options, function(err, exists) {
          if (exists) {
            return do_end();
          }
          return sym_create(options, do_end);
        });
      }
    };
    do_end = function() {
      return callback(null, linked);
    };
    return do_mkdir();
  });
};

fs = require('ssh2-fs');

path = require('path');

wrap = require('./misc/wrap');

mkdir = require('./mkdir');
