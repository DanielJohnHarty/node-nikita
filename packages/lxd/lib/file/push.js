// Generated by CoffeeScript 2.3.2
// # `nikita.lxd.file.push`

// Push files into containers.

// ## Options

// * `name` (string, required)   
//   The name of the container.
// * `create_dirs` (boolean, optional, false)
//   Create any directories necessary.
// * `gid` (integer, optional)   
//   Set the file's gid on push.
//   overwrite the `source` option.
// * `lxd_target` (string, required)   
//   File destination in the form of "[<remote>:]<container>/<path>",
//   overwrite the `target` option.
// * `mode` (integer|string, optional)   
//   Set the file's perms on push.
// * `source` (string, required)   
//   File to push in the form of "<path>".
// * `target` (string, required)   
//   File destination in the form of "<path>".
// * `uid` (integer, optional)   
//   Set the file's uid on push.

// ## Example

// ```
// require('nikita')
// .lxd.file.push({
//   name: "myubuntu"
// }, function(err, {status}) {
//   console.log( err ? err.message : 'The container was deleted')
// });

// ```

// ## Todo

// * Push recursive directories
// * Handle unmatched target permissions
// * Handle unmatched target ownerships
// * Detect name from lxd_target

// ## Source Code
var path;

module.exports = function({options}) {
  var cmd_push;
  this.log({
    message: "Entering lxd.file.push",
    level: 'DEBUG',
    module: '@nikitajs/lxd/lib/push'
  });
  if (!options.name) { // note, name could be obtained from lxd_target
    throw Error("Invalid Option: name is required");
  }
  if (!options.source) {
    throw Error("Invalid Option: source is required");
  }
  if (!(options.target || options.lxd_target)) {
    throw Error("Invalid Option: target is required");
  }
  if (options.algo == null) {
    options.algo = 'md5';
  }
  if (options.lxd_target == null) {
    options.lxd_target = `${path.join(options.name, options.target)}`;
  }
  // Execution
  cmd_push = ['lxc', options.name, options.source, options.lxd_target, options.create_dirs ? '--create-dirs' : void 0, options.gid ? '--gid' : void 0, options.uid ? '--uid' : void 0, options.mode ? '--mode' : void 0].join(' ');
  return this.system.execute({
    cmd: `# Ensure source is a file\n[ -f "${options.target}" ] && exit 2\ncommand -v openssl >/dev/null || exit 3\nsourceDgst=\`openssl dgst -${options.algo} ${options.source} | sed 's/^.* \\([a-z0-9]*\\)$/\\1/g'\`\n# Get target hash\ntargetDgst=\`cat <<EOF | lxc exec ${options.name} -- bash\n# Ensure openssl is available\ncommand -v openssl >/dev/null || exit 4\nopenssl dgst -${options.algo} ${options.target} | sed 's/^.* \\([a-z0-9]*\\)$/\\1/g'\nEOF\`\n[ "$sourceDgst" == "$targetDgst" ] && exit 42\n${cmd_push}`,
    code_skipped: 42,
    trap: true,
    trim: true
  }, function(err, {status, stdout}) {
    if ((err != null ? err.code : void 0) === 2) {
      throw Error(`Invalid Option: source is not a file ${JSON.stringify(options.source)}`);
    }
    if ((err != null ? err.code : void 0) === 3) {
      throw Error("Invalid Requirement: openssl not installed on host");
    }
    if ((err != null ? err.code : void 0) === 4) {
      throw Error("Invalid Requirement: openssl not installed on container");
    }
  });
};

// ## Dependencies
path = require('path');
