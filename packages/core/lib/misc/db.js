// Generated by CoffeeScript 2.4.1
  // # Misc DB

  // ## Escape

  // Escape SQL for Bash processing.
var misc,
  indexOf = [].indexOf;

module.exports.escape = function(sql) {
  return sql.replace(/[\\"]/g, "\\$&");
};

// ## Build a Unix command
module.exports.cmd = function(...opts) {
  var i, k, len, opt, options, password, properties, username, v;
  properties = ['engine', 'cmd', 'admin_username', 'admin_password', 'username', 'password', 'host', 'port', 'database', 'silent'];
  options = {};
  for (i = 0, len = opts.length; i < len; i++) {
    opt = opts[i];
    if (typeof opt === 'string') {
      opt = {
        cmd: opt
      };
    }
    for (k in opt) {
      v = opt[k];
      if (indexOf.call(properties, k) < 0) {
        continue;
      }
      options[k] = v;
    }
  }
  // Deprecation
  if (options.engine === 'postgres') {
    console.log('Deprecated Value: options "postgres" is deprecated in favor of "postgresql"');
    options.engine = 'postgresql';
  }
  options.engine = options.engine.toLowerCase();
  if (!options.admin_username) {
    options.admin_password = null;
  }
  if (options.silent == null) {
    options.silent = true;
  }
  if (!options.engine) {
    throw Error('Required Option: "engine"');
  }
  if (!options.host) {
    throw Error('Required Option: "host"');
  }
  if (options.admin_username) {
    if (!options.admin_password) {
      throw Error('Required Option: "admin_password"');
    }
    username = options.admin_username;
    password = options.admin_password;
  } else if (options.username) {
    if (!options.password) {
      throw Error('Required Option: "password"');
    }
    username = options.username;
    password = options.password;
  } else {
    throw Error('Required Option: "admin_username" or "username"');
  }
  switch (options.engine) {
    case 'mariadb':
    case 'mysql':
      if (options.path == null) {
        options.path = 'mysql';
      }
      if (options.port == null) {
        options.port = '3306';
      }
      return [
        "mysql",
        `-h${options.host}`,
        `-P${options.port}`,
        `-u${username}`,
        `-p'${password}'`,
        options.database ? `-D${options.database}` : void 0,
        options.mysql_options ? `${options.mysql_options}` : void 0,
        // -N, --skip-column-names   Don't write column names in results.
        // -s, --silent              Be more silent. Print results with a tab as separator, each row on new line.
        // -r, --raw                 Write fields without conversion. Used with --batch.
        options.silent ? "-N -s -r" : void 0,
        options.cmd ? `-e "${module.exports.escape(options.cmd)}"` : void 0
      ].join(' ');
    case 'postgresql':
      if (options.path == null) {
        options.path = 'psql';
      }
      if (options.port == null) {
        options.port = '5432';
      }
      return [
        `PGPASSWORD=${options.admin_password || options.password}`,
        "psql",
        `-h ${options.host}`,
        `-p ${options.port}`,
        `-U ${options.admin_username || options.username}`,
        options.database ? `-d ${options.database}` : void 0,
        options.postgres_options ? `${options.postgres_options}` : void 0,
        // -t, --tuples-only        Print rows only
        // -A, --no-align           Unaligned table output mode
        // -q, --quiet              Run quietly (no messages, only query output)
        "-tAq",
        options.cmd ? `-c "${options.cmd}"` : void 0
      ].join(' ');
    default:
      throw Error(`Unsupported engine: ${JSON.stringify(options.engine)}`);
  }
};

// ## Parse JDBC URL

// Enrich the result of `url.parse` with the "engine" and "db" properties.

// Exemple:

// ```
// parse 'jdbc:mysql://host1:3306,host2:3306/hive?createDatabaseIfNotExist=true'
// { engine: 'mysql',
//   addresses:
//    [ { host: 'host1', port: '3306' },
//      { host: 'host2', port: '3306' } ],
//   database: 'hive' }
// ```
module.exports.jdbc = function(jdbc) {
  var _, addresses, database, engine;
  if (/^jdbc:mysql:/.test(jdbc)) {
    [_, engine, addresses, database] = /^jdbc:(.*?):\/+(.*?)\/(.*?)(\?(.*)|$)/.exec(jdbc);
    addresses = addresses.split(',').map(function(address) {
      var host, port;
      [host, port] = address.split(':');
      return {
        host: host,
        port: port || 3306
      };
    });
    return {
      engine: 'mysql',
      addresses: addresses,
      database: database
    };
  } else if (/^jdbc:postgresql:/.test(jdbc)) {
    [_, engine, addresses, database] = /^jdbc:(.*?):\/+(.*?)\/(.*?)(\?(.*)|$)/.exec(jdbc);
    addresses = addresses.split(',').map(function(address) {
      var host, port;
      [host, port] = address.split(':');
      return {
        host: host,
        port: port || 5432
      };
    });
    return {
      engine: 'postgresql',
      addresses: addresses,
      database: database
    };
  } else {
    throw Error('Invalid JDBC URL');
  }
};

// ## Dependencies
misc = require('.');
