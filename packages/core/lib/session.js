// Generated by CoffeeScript 2.3.2
// # Nikita Session
var EventEmitter, array, conditions, each, mixme, path, promise, registry, state_create_level, state_reset_level, string, util;

module.exports = function() {
  var call_callback, handle_get, handle_multiple_call, jump_to_error, make_context, normalize_options, obj, proxy, reg, run, run_next, state;
  if (arguments.length === 2) {
    obj = arguments[0];
    obj.options = arguments[1];
  } else if (arguments.length === 1) {
    obj = new EventEmitter;
    obj.options = arguments[0];
  } else {
    obj = new EventEmitter;
    obj.options = {};
  }
  if (obj.registry == null) {
    obj.registry = {};
  }
  if (obj.store == null) {
    obj.store = {};
  }
  obj.cascade = {...module.exports.cascade, ...obj.options.cascade};
  // Internal state
  state = {};
  state.properties = {};
  state.parent_levels = [];
  state.current_level = state_create_level();
  state.befores = [];
  state.afters = [];
  state.once = {};
  state.killed = false;
  state.index_counter = 0;
  // Proxify
  proxy = new Proxy(obj, {
    has: function(target, name) {
      return console.warns('proxy has is being called', name);
    },
    apply: function(target, thisArg, argumentsList) {
      return console.warn('apply');
    },
    get: function(target, name) {
      var get_proxy_builder;
      if (obj[name] != null) {
        return target[name];
      }
      if (name === '_events' || name === '_maxListeners' || name === 'internal') {
        return target[name];
      }
      proxy.action = [];
      proxy.action.push(name);
      if (!obj.registry.registered(proxy.action, {
        parent: true
      }) && !registry.registered(proxy.action, {
        parent: true
      })) {
        proxy.action = [];
        return void 0;
      }
      get_proxy_builder = function() {
        var builder;
        builder = function() {
          var args, get, len, m, options, opts, values;
          args = [].slice.call(arguments);
          options = normalize_options(args, proxy.action);
          proxy.action = [];
          ({get, values} = handle_get(proxy, options));
          if (get) {
            return values;
          }
          for (m = 0, len = options.length; m < len; m++) {
            opts = options[m];
            state.current_level.todos.push(opts);
          }
          if (state.current_level.todos.length === options.length) { // Activate the pump
            setImmediate(run_next);
          }
          return proxy;
        };
        return new Proxy(builder, {
          get: function(target, name) {
            if (target[name] != null) {
              return target[name];
            }
            proxy.action.push(name);
            if (!obj.registry.registered(proxy.action, {
              parent: true
            }) && !registry.registered(proxy.action, {
              parent: true
            })) {
              proxy.action = [];
              return void 0;
            }
            return get_proxy_builder();
          }
        });
      };
      return get_proxy_builder();
    }
  });
  obj.internal = {};
  obj.internal.options = function(_arguments, action_name) {
    var __argument, __arguments, action, actions, args, i, j, k, len, len1, len2, len3, m, middleware, n, newaction, newactions, o, opt, option, p, v;
    if (_arguments.length === 0) {
      _arguments = [{}];
    }
// Convert every argument to an array
    for (i = m = 0, len = _arguments.length; m < len; i = ++m) {
      args = _arguments[i];
      if (!Array.isArray(args)) {
        _arguments[i] = [args];
      }
    }
    if (Array.isArray(action_name)) {
      // Get middleware
      middleware = obj.registry.get(action_name) || registry.get(action_name);
    }
    // Multiply arguments
    actions = null;
    for (i = n = 0, len1 = _arguments.length; n < len1; i = ++n) {
      __arguments = _arguments[i];
      newactions = (function() {
        var len2, o, results;
        results = [];
        for (j = o = 0, len2 = __arguments.length; o < len2; j = ++o) {
          __argument = __arguments[j];
          if (i === 0) {
            results.push([[middleware, __argument]]);
          } else {
            results.push((function() {
              var len3, p, results1;
              results1 = [];
              for (i = p = 0, len3 = actions.length; p < len3; i = ++p) {
                action = actions[i];
                results1.push([...action, __argument]);
              }
              return results1;
            })());
          }
        }
        return results;
      })();
      actions = array.flatten(newactions, 0);
    }
    // Load module
    if (!middleware) {
      for (o = 0, len2 = actions.length; o < len2; o++) {
        action = actions[o];
        middleware = null;
        for (p = 0, len3 = action.length; p < len3; p++) {
          option = action[p];
          if (typeof option === 'string') {
            middleware = option;
            if (option.substr(0, 1) === '.') {
              middleware = path.resolve(process.cwd(), option);
            }
            middleware = require.main.require(middleware);
          }
        }
        if (middleware) {
          action.unshift(middleware);
        }
      }
    }
    // Build actions
    actions = (function() {
      var len4, len5, q, r, results;
      results = [];
      for (q = 0, len4 = actions.length; q < len4; q++) {
        action = actions[q];
        newaction = {};
        for (r = 0, len5 = action.length; r < len5; r++) {
          opt = action[r];
          if (action == null) {
            continue;
          }
          if (typeof opt === 'string') {
            if (!newaction.argument) {
              opt = {
                argument: opt
              };
            } else {
              throw Error('Invalid option: encountered a string while argument is already defined');
            }
          }
          if (typeof opt === 'function') {
            // todo: handler could be registed later by an external module,
            // in such case, the user provided function should be interpreted
            // as a callback
            if (!newaction.handler) {
              opt = {
                handler: opt
              };
            } else if (!newaction.callback) {
              opt = {
                callback: opt
              };
            } else {
              throw Error('Invalid option: encountered a function while both handler and callback options are defined.');
            }
          }
          if (typeof opt !== 'object') {
            opt = {
              argument: opt
            };
          }
          for (k in opt) {
            v = opt[k];
            if (newaction[k] !== void 0 && v === void 0) {
              continue;
            }
            newaction[k] = v;
          }
        }
        results.push(newaction);
      }
      return results;
    })();
    // Normalize
    actions = (function() {
      var len4, q, results;
      results = [];
      for (q = 0, len4 = actions.length; q < len4; q++) {
        action = actions[q];
        if (action_name) {
          action.action = action_name;
        }
        if (!Array.isArray(action.action)) {
          action.action = [action.action];
        }
        if (action.once === true) {
          action.once = ['handler'];
        }
        if (action.once === false) {
          delete action.once;
        }
        if (Array.isArray(action.once)) {
          action.once = action.once.sort();
        }
        if (Array.isArray(action.once)) {
          action.once = action.once.sort();
        }
        results.push(action);
      }
      return results;
    })();
    return actions;
  };
  normalize_options = obj.internal.options;
  make_context = function(options_global, options_parent, options_action) {
    var base, base1, base2, base3, base4, context, headers, k, match, push_headers, ref, ref1, v;
    context = {
      internal: {},
      options: {},
      original: (function() { // Create original and filter with cascade
        var k, options, v;
        options = options_action;
        for (k in options_parent) {
          v = options_parent[k];
          if (options[k] === void 0 && obj.cascade[k] === true) {
            options[k] = v;
          }
        }
        return options;
      })()
    };
    context.internal.parent = options_parent;
    // Merge cascade action options with default session options
    context.internal.cascade = {...module.exports.cascade, ...options_global.cascade, ...options_action.cascade};
// Copy initial options
    for (k in options_action) {
      v = options_action[k];
      if (k === 'cascade') {
        continue;
      }
      context.internal[k] = options_action[k];
    }
// Merge parent cascaded options
    for (k in options_parent) {
      v = options_parent[k];
      if (context.internal.cascade[k] !== true) {
        continue;
      }
      if (context.internal[k] === void 0) {
        context.internal[k] = v;
      }
    }
// Merge action options with default session options 
    for (k in options_global) {
      v = options_global[k];
      if (k === 'cascade') {
        continue;
      }
      if (context.internal[k] === void 0) {
        context.internal[k] = v;
      }
    }
    // Build headers option
    headers = [];
    push_headers = function(options) {
      if (options.header) {
        headers.push(options.header);
      }
      if (options.parent) {
        return push_headers(options.parent);
      }
    };
    push_headers(context.internal);
    context.internal.headers = headers.reverse();
    // Default values
    if ((base = context.internal).sleep == null) {
      base.sleep = 3000; // Wait 3s between retry
    }
    if ((base1 = context.internal).retry == null) {
      base1.retry = 0;
    }
    if ((base2 = context.internal).disabled == null) {
      base2.disabled = false;
    }
    if ((base3 = context.internal).status == null) {
      base3.status = true;
    }
    context.internal.depth = context.internal.depth != null ? context.internal.depth : (((ref = context.internal.parent) != null ? ref.depth : void 0) || 0) + 1;
    context.internal.attempt = -1; // Clone and filter cascaded options
    // throw Error 'Incompatible Options: status "false" implies shy "true"' if options.status is false and options.shy is false # Room for argument, leave it strict for now until we come accross a usecase justifying it.
    // options.shy ?= true if options.status is false
    if ((base4 = context.internal).shy == null) {
      base4.shy = false;
    }
    // Goodies
    if (context.internal.source && (match = /~($|\/.*)/.exec(context.internal.source))) {
      if (!obj.store['nikita:ssh:connection']) {
        context.internal.source = path.join(process.env.HOME, match[1]);
      } else {
        context.internal.source = path.posix.join('.', match[1]);
      }
    }
    if (context.internal.target && (match = /~($|\/.*)/.exec(context.internal.target))) {
      if (!obj.store['nikita:ssh:connection']) {
        context.internal.target = path.join(process.env.HOME, match[1]);
      } else {
        context.internal.target = path.posix.join('.', match[1]);
      }
    }
    ref1 = context.internal;
    // Filter cascaded options
    for (k in ref1) {
      v = ref1[k];
      if (context.internal.cascade[k] === false) {
        continue;
      }
      context.options[k] = v;
    }
    return context;
  };
  handle_get = function(proxy, options) {
    var context, values;
    if (options.length !== 1) {
      return {
        get: false
      };
    }
    options = options[0];
    if (options.get !== true) {
      return {
        get: false
      };
    }
    context = make_context(obj.options, state.current_level.options, options);
    values = context.internal.handler.call(proxy, {
      options: context.options
    }, context.internal.callback);
    return {
      get: true,
      values: values
    };
  };
  call_callback = function(context) {
    var current_level, error, options;
    options = state.current_level.options;
    state.parent_levels.unshift(state.current_level);
    state.current_level = state_create_level();
    state.current_level.options = options;
    try {
      context.callback.call(proxy, context.error, context.output, ...(context.args || []));
    } catch (error1) {
      error = error1;
      state.current_level = state.parent_levels.shift();
      // error.fatal = true
      context.error_in_callback = true;
      context.error = error;
      jump_to_error();
      return;
    }
    current_level = state.current_level;
    state.current_level = state.parent_levels.shift();
    if (current_level.todos.length) {
      return state.current_level.todos.unshift(...current_level.todos);
    }
  };
  handle_multiple_call = function(context, error) {
    state.killed = true;
    while (state.parent_levels.length) {
      state.current_level = state.parent_levels.shift();
    }
    context.error = error;
    state.current_level.history.push(context);
    // state.current_level.current = output: {}
    jump_to_error();
    return run_next();
  };
  jump_to_error = function() {
    var ref, results;
    results = [];
    while (state.current_level.todos[0] && ((ref = state.current_level.todos[0].action) !== 'catch' && ref !== 'next' && ref !== 'promise')) {
      results.push(state.current_level.todos.shift());
    }
    return results;
  };
  run_next = function() {
    var error, errors, options;
    options = state.current_level.todos.shift();
    // Nothing more to do in current queue
    if (!options) {
      errors = state.current_level.history.map(function(context) {
        return (context.error_in_callback || !context.internal.tolerant && !context.original.relax) && context.error;
      });
      error = errors[errors.length - 1];
      if (!state.killed && state.parent_levels.length === 0 && error && state.current_level.throw_if_error) {
        if (obj.listenerCount('error') === 0) {
          throw error;
        } else {
          obj.emit('error', error);
        }
      }
      if (state.parent_levels.length === 0) {
        if (!error) {
          obj.emit('end', {
            level: 'INFO'
          });
        }
      }
      return;
    }
    return run(options, function() {
      return run_next();
    });
  };
  run = function(options, callback) {
    var context, error, errors, index, options_parent, ref, ref1, status;
    if (!(options && callback)) {
      throw Error('Invalid Argument');
    }
    if (options.action === 'next') {
      errors = state.current_level.history.map(function(context) {
        return (context.error_in_callback || !context.internal.tolerant && !context.original.relax) && context.error;
      });
      error = errors[errors.length - 1];
      status = state.current_level.history.some(function(context) {
        return !context.original.shy && context.status;
      });
      if ((ref = options.handler) != null) {
        ref.call(proxy, error, {
          status: status
        });
      }
      state_reset_level(state.current_level);
      return callback(null, {});
    }
    if (options.action === 'promise') {
      errors = state.current_level.history.map(function(context) {
        return (context.error_in_callback || !context.internal.tolerant && !context.original.relax) && context.error;
      });
      // context.error and (context.error.fatal or (not context.internal.tolerant and not context.original.relax))
      error = errors[errors.length - 1];
      status = state.current_level.history.some(function(context) {
        return !context.original.shy && context.status;
      });
      if ((ref1 = options.handler) != null) {
        ref1.call(proxy, error, status);
      }
      if (!error) {
        options.deferred.resolve(status);
      } else {
        options.deferred.reject(error);
      }
      state_reset_level(state.current_level);
      return callback(null, {});
    }
    if (state.killed) {
      return;
    }
    if (array.compare(options.action, ['end'])) {
      return conditions.all(proxy, {
        options: options
      }, function() {
        var ref2;
        while (state.current_level.todos[0] && ((ref2 = state.current_level.todos[0].action) !== 'next' && ref2 !== 'promise')) {
          state.current_level.todos.shift();
        }
        return callback(null, {});
      }, function(error) {
        return callback(error, {});
      });
    }
    index = state.index_counter++;
    options_parent = state.current_level.options;
    context = make_context(obj.options, options_parent, options);
    // Prepare the Context
    context.session = proxy;
    context.handler = context.internal.handler;
    context.internal.handler = void 0;
    context.callback = context.internal.callback;
    context.internal.callback = void 0;
    state.parent_levels.unshift(state.current_level);
    state.current_level.context = context;
    state.current_level = state_create_level();
    state.current_level.options = context.internal;
    if (context.internal.header) {
      proxy.log({
        message: context.internal.header,
        type: 'header',
        index: index,
        headers: context.internal.headers
      });
    }
    return (function() {
      var do_callback, do_conditions, do_disabled, do_end, do_handler, do_intercept_after, do_intercept_before, do_once, do_options, do_options_after, do_options_before;
      do_options = function() {
        try {
          if (!(typeof context.internal.sleep === 'number' && context.internal.sleep >= 0)) {
            // Validate sleep option, more can be added
            throw Error(`Invalid options sleep, got ${JSON.stringify(context.internal.sleep)}`);
          }
        } catch (error1) {
          error = error1;
          context.error = error;
          context.output = {
            status: false
          };
          do_callback();
          return;
        }
        return do_disabled();
      };
      do_disabled = function() {
        if (!context.internal.disabled) {
          proxy.log({
            type: 'lifecycle',
            message: 'disabled_false',
            level: 'DEBUG',
            index: index,
            error: null,
            status: false
          });
          return do_once();
        } else {
          proxy.log({
            type: 'lifecycle',
            message: 'disabled_true',
            level: 'INFO',
            index: index,
            error: null,
            status: false
          });
          context.error = void 0;
          context.output = {
            status: false
          };
          return do_callback();
        }
      };
      do_once = function() {
        var hash, hashme;
        hashme = function(value) {
          if (typeof value === 'string') {
            value = `string:${string.hash(value)}`;
          } else if (typeof value === 'boolean') {
            value = `boolean:${value}`;
          } else if (typeof value === 'function') {
            value = `function:${string.hash(value.toString())}`;
          } else if (value === void 0 || value === null) {
            value = 'null';
          } else if (Array.isArray(value)) {
            value = 'array:' + value.sort().map(function(value) {
              return hashme(value);
            }).join(':');
          } else if (typeof value === 'object') {
            value = 'object';
          } else {
            throw Error(`Invalid data type: ${JSON.stringify(value)}`);
          }
          return value;
        };
        if (context.internal.once) {
          if (typeof context.internal.once === 'string') {
            hash = string.hash(context.internal.once);
          } else if (Array.isArray(context.internal.once)) {
            hash = string.hash(context.internal.once.map(function(k) {
              if (k === 'handler') {
                return hashme(context.handler);
              } else {
                return hashme(context.internal[k]);
              }
            }).join('|'));
          } else {
            throw Error(`Invalid Option 'once': ${JSON.stringify(context.internal.once)} must be a string or an array of string`);
          }
          if (state.once[hash]) {
            context.error = void 0;
            context.output = {
              status: false
            };
            return do_callback();
          }
          state.once[hash] = true;
        }
        return do_options_before();
      };
      do_options_before = function() {
        var base;
        if (context.original.options_before) {
          return do_intercept_before();
        }
        if ((base = context.internal).before == null) {
          base.before = [];
        }
        if (!Array.isArray(context.internal.before)) {
          context.internal.before = [context.internal.before];
        }
        return each(context.internal.before).call(function(before, next) {
          var _opts, k, ref2, v;
          [before] = normalize_options([before], 'call');
          _opts = {
            options_before: true
          };
          for (k in before) {
            v = before[k];
            _opts[k] = v;
          }
          ref2 = context.options;
          for (k in ref2) {
            v = ref2[k];
            if (_opts[k] == null) {
              _opts[k] = v;
            }
          }
          return run(_opts, next);
        }).error(function(error) {
          context.error = error;
          context.output = {
            status: false
          };
          return do_callback();
        }).next(do_intercept_before);
      };
      do_intercept_before = function() {
        if (context.options.intercepting) {
          return do_conditions();
        }
        return each(state.befores).call(function(before, next) {
          var _opts, k, ref2, v;
          for (k in before) {
            v = before[k];
            switch (k) {
              case 'handler':
                continue;
              case 'action':
                if (!array.compare(v, context.options[k])) {
                  return next();
                }
                break;
              default:
                if (v !== context.options[k]) {
                  return next();
                }
            }
          }
          _opts = {
            intercepting: true
          };
          for (k in before) {
            v = before[k];
            _opts[k] = v;
          }
          ref2 = context.options;
          for (k in ref2) {
            v = ref2[k];
            if (_opts[k] == null) {
              _opts[k] = v;
            }
          }
          return run(_opts, next);
        }).error(function(error) {
          context.error = error;
          context.output = {
            status: false
          };
          return do_callback();
        }).next(do_conditions);
      };
      do_conditions = function() {
        var _opts, k, ref2, v;
        _opts = {};
        ref2 = context.options;
        for (k in ref2) {
          v = ref2[k];
          // continue if k in ['handler', 'callback', 'header', 'after', 'before']
          if (_opts[k] == null) {
            _opts[k] = v;
          }
        }
        return conditions.all(proxy, {
          options: _opts
        }, function() {
          var ref3;
          proxy.log({
            type: 'lifecycle',
            message: 'conditions_passed',
            index: index,
            error: null,
            status: false
          });
          ref3 = context.options;
          // Remove conditions from options
          for (k in ref3) {
            v = ref3[k];
            if (/^if.*/.test(k) || /^unless.*/.test(k)) {
              delete context.options[k];
            }
          }
          return setImmediate(function() {
            return do_handler();
          });
        }, function(error) {
          proxy.log({
            type: 'lifecycle',
            message: 'conditions_failed',
            index: index,
            error: error,
            status: false
          });
          return setImmediate(function() {
            context.error = error;
            context.output = {
              status: false
            };
            return do_callback();
          });
        });
      };
      do_handler = function() {
        var called, do_next, handle_async_and_promise, promise_returned, ref2, ref3, result, status_sync, wait_children;
        context.options.attempt++;
        do_next = function({error, output, args}) {
          var base, base1;
          context.error = error != null ? error : void 0; // ensure null is converted to undefined 
          context.output = output;
          context.args = args;
          if (error && !(error instanceof Error)) {
            error = Error('First argument not a valid error');
            context.error = error;
            if (context.output == null) {
              context.output = {};
            }
            if ((base = context.output).status == null) {
              base.status = false;
            }
          } else {
            if (typeof output === 'boolean') {
              context.output = {
                status: output
              };
            } else if (!output) {
              context.output = {
                status: false
              };
            } else if (typeof output !== 'object') {
              context.error = Error(`Invalid Argument: expect an object or a boolean, got ${JSON.stringify(output)}`);
            } else {
              if ((base1 = context.output).status == null) {
                base1.status = false;
              }
            }
          }
          if (error) {
            proxy.log({
              message: error.message,
              level: 'ERROR',
              index: index,
              module: 'nikita'
            });
          }
          if (error && (context.options.retry === true || context.options.attempt < context.options.retry - 1)) {
            proxy.log({
              message: `Retry on error, attempt ${context.options.attempt + 1}`,
              level: 'WARN',
              index: index,
              module: 'nikita'
            });
            return setTimeout(do_handler, context.options.sleep);
          }
          return do_intercept_after();
        };
        if (context.handler == null) {
          context.handler = ((ref2 = obj.registry.get(context.options.action)) != null ? ref2.handler : void 0) || ((ref3 = registry.get(context.options.action)) != null ? ref3.handler : void 0);
        }
        if (!context.handler) {
          return handle_multiple_call(context, Error(`Unregistered Middleware: ${context.options.action.join('.')}`));
        }
        called = false;
        try {
          if (context.options.deprecate) {
            // Handle deprecation
            context.handler = (function(options_handler) {
              return util.deprecate(function() {
                return options_handler.apply(this, arguments);
              }, context.internal.deprecate === true ? `${context.internal.action.join('/')} is deprecated` : `${context.internal.action.join('/')} is deprecated, use ${context.internal.deprecate}`);
            })(context.handler);
          }
          handle_async_and_promise = function() {
            var args, output;
            [error, output, ...args] = arguments;
            if (state.killed) {
              return;
            }
            if (called) {
              return handle_multiple_call(context, Error('Multiple call detected'));
            }
            called = true;
            return setImmediate(function() {
              return do_next({
                error: error,
                output: output,
                args: args
              });
            });
          };
          // Async style
          if (context.handler.length === 2) {
            promise_returned = false;
            result = context.handler.call(proxy, context, function() {
              if (promise_returned) {
                return;
              }
              return handle_async_and_promise.apply(null, arguments);
            });
            if (promise.is(result)) {
              promise_returned = true;
              return handle_async_and_promise(Error('Invalid Promise: returning promise is not supported in asynchronuous mode')); // Sync style
            }
          } else {
            result = context.handler.call(proxy, context);
            if (promise.is(result)) {
              return result.then(function(value) {
                var args, output;
                if (Array.isArray(value)) {
                  [output, ...args] = value;
                } else {
                  output = value;
                  args = [];
                }
                return handle_async_and_promise(void 0, output, ...args);
              }, function(reason) {
                if (reason == null) {
                  reason = Error('Rejected Promise: reject called without any arguments');
                }
                return handle_async_and_promise(reason);
              });
            } else {
              if (state.killed) {
                return;
              }
              if (called) {
                return handle_multiple_call(context, Error('Multiple call detected'));
              }
              called = true;
              status_sync = false;
              wait_children = function() {
                var loptions;
                if (!state.current_level.todos.length) {
                  return setImmediate(function() {
                    return do_next({
                      output: {
                        status: status_sync
                      }
                    });
                  });
                }
                loptions = state.current_level.todos.shift();
                return run(loptions, function(error, {status}) {
                  if (error) {
                    return do_next({
                      error: error
                    });
                  }
                  if (status && !loptions.shy) {
                    // Discover status of all unshy children
                    status_sync = true;
                  }
                  return wait_children();
                });
              };
              return wait_children();
            }
          }
        } catch (error1) {
          error = error1;
          state.current_level = state_create_level();
          return do_next({
            error: error
          });
        }
      };
      do_intercept_after = function() {
        if (context.options.intercepting) {
          return do_options_after();
        }
        return each(state.afters).call(function(after, next) {
          var _opts, k, ref2, v;
          for (k in after) {
            v = after[k];
            switch (k) {
              case 'handler':
                continue;
              case 'action':
                if (!array.compare(v, context.options[k])) {
                  return next();
                }
                break;
              default:
                if (v !== context.options[k]) {
                  return next();
                }
            }
          }
          _opts = {
            intercepting: true
          };
          for (k in after) {
            v = after[k];
            _opts[k] = v;
          }
          ref2 = context.options;
          for (k in ref2) {
            v = ref2[k];
            if (_opts[k] == null) {
              _opts[k] = v;
            }
          }
          return run(_opts, next);
        }).error(function(error) {
          context.error = error;
          context.output = {
            status: false
          };
          return do_callback();
        }).next(function() {
          return do_options_after();
        });
      };
      do_options_after = function() {
        var base;
        if (context.original.options_after) {
          return do_callback();
        }
        if ((base = context.internal).after == null) {
          base.after = [];
        }
        if (!Array.isArray(context.internal.after)) {
          context.internal.after = [context.internal.after];
        }
        return each(context.internal.after).call(function(after, next) {
          var _opts, k, ref2, v;
          [after] = normalize_options([after], 'call');
          _opts = {
            options_after: true
          };
          for (k in after) {
            v = after[k];
            _opts[k] = v;
          }
          ref2 = context.options;
          for (k in ref2) {
            v = ref2[k];
            // continue if k in ['handler', 'callback']
            if (_opts[k] == null) {
              _opts[k] = v;
            }
          }
          return run(_opts, next);
        }).error(function(error) {
          context.error = error;
          context.output = {
            status: false
          };
          return do_callback();
        }).next(function() {
          return do_callback();
        });
      };
      do_callback = function() {
        proxy.log({
          type: 'handled',
          index: index,
          error: context.error,
          status: context.output.status
        });
        if (state.killed) {
          return;
        }
        state.current_level = state.parent_levels.shift(); // Exit action state and move back to parent state
        if (context.error && context.callback) {
          state.current_level.throw_if_error = false;
        }
        context.status = context.internal.status ? context.output.status : false;
        if (context.error && !context.internal.relax) {
          jump_to_error();
        }
        if (context.callback) {
          call_callback(context);
        }
        return do_end(context);
      };
      do_end = function(context) {
        state.current_level.history.push(context);
        // state.current_level.current = output: {}
        error = (context.error_in_callback || !context.internal.tolerant && !context.original.relax) && context.error;
        return callback(error, context.output);
      };
      return do_options();
    })();
  };
  state.properties.child = {
    get: function() {
      return function() {
        return module.exports(obj.options);
      };
    }
  };
  state.properties.next = {
    get: function() {
      return function() {
        state.current_level.todos.push({
          action: 'next',
          handler: arguments[0]
        });
        if (state.current_level.todos.length === 1) { // Activate the pump
          setImmediate(run_next);
        }
        return proxy;
      };
    }
  };
  state.properties.promise = {
    get: function() {
      return function() {
        var deferred, promise;
        deferred = {};
        promise = new Promise(function(resolve, reject) {
          deferred.resolve = resolve;
          return deferred.reject = reject;
        });
        state.current_level.todos.push({
          action: 'promise',
          deferred: deferred
        });
        if (state.current_level.todos.length === 1) { // Activate the pump
          setImmediate(run_next);
        }
        return promise;
      };
    }
  };
  state.properties.end = {
    get: function() {
      return function() {
        var args, len, m, options, opts;
        args = [].slice.call(arguments);
        options = normalize_options(args, 'end');
        for (m = 0, len = options.length; m < len; m++) {
          opts = options[m];
          state.current_level.todos.push(opts);
        }
        if (state.current_level.todos.length === options.length) { // Activate the pump
          setImmediate(run_next);
        }
        return proxy;
      };
    }
  };
  state.properties.call = {
    get: function() {
      return function() {
        var args, get, len, m, options, opts, values;
        args = [].slice.call(arguments);
        options = normalize_options(args, 'call');
        ({get, values} = handle_get(proxy, options));
        if (get) {
          return values;
        }
        for (m = 0, len = options.length; m < len; m++) {
          opts = options[m];
          state.current_level.todos.push(opts);
        }
        if (state.current_level.todos.length === options.length) { // Activate the pump
          setImmediate(run_next);
        }
        return proxy;
      };
    }
  };
  state.properties.each = {
    get: function() {
      return function() {
        var arg, args, key, len, len1, m, n, options, opts, value;
        args = [].slice.call(arguments);
        arg = args.shift();
        if ((arg == null) || typeof arg !== 'object') {
          throw Error(`Invalid Argument: first argument must be an array or an object to iterate, got ${JSON.stringify(arg)}`);
        }
        options = normalize_options(args, 'call');
        for (m = 0, len = options.length; m < len; m++) {
          opts = options[m];
          if (Array.isArray(arg)) {
            for (n = 0, len1 = arg.length; n < len1; n++) {
              key = arg[n];
              opts.key = key;
              this.call(opts);
            }
          } else {
            for (key in arg) {
              value = arg[key];
              opts.key = key;
              opts.value = value;
              this.call(opts);
            }
          }
        }
        return proxy;
      };
    }
  };
  state.properties.before = {
    get: function() {
      return function() {
        var len, m, options, opts;
        if (typeof arguments[0] === 'string' || Array.isArray(arguments[0])) {
          arguments[0] = {
            action: arguments[0]
          };
        }
        options = normalize_options(arguments, null);
        for (m = 0, len = options.length; m < len; m++) {
          opts = options[m];
          if (typeof opts.handler !== 'function') {
            throw Error(`Invalid handler ${JSON.stringify(opts.handler)}`);
          }
          state.befores.push(opts);
        }
        return proxy;
      };
    }
  };
  state.properties.after = {
    get: function() {
      return function() {
        var len, m, options, opts;
        if (typeof arguments[0] === 'string' || Array.isArray(arguments[0])) {
          arguments[0] = {
            action: arguments[0]
          };
        }
        options = normalize_options(arguments, null);
        for (m = 0, len = options.length; m < len; m++) {
          opts = options[m];
          if (typeof opts.handler !== 'function') {
            throw Error(`Invalid handler ${JSON.stringify(opts.handler)}`);
          }
          state.afters.push(opts);
        }
        return proxy;
      };
    }
  };
  state.properties.status = {
    get: function() {
      return function(index) {
        var action, l, len, len1, m, n, ref, ref1, ref2, ref3, ref4, status;
        if (arguments.length === 0) {
          return state.parent_levels[0].history.some(function(action) {
            return !action.original.shy && action.status;
          });
        } else if (index === false) {
          status = state.parent_levels[0].history.some(function(action) {
            return !action.original.shy && action.status;
          });
          ref = state.parent_levels[0].history;
          for (m = 0, len = ref.length; m < len; m++) {
            action = ref[m];
            action.status = false;
          }
          return status;
        } else if (index === true) {
          status = state.parent_levels[0].history.some(function(action) {
            return !action.original.shy && action.status;
          });
          ref1 = state.parent_levels[0].history;
          for (n = 0, len1 = ref1.length; n < len1; n++) {
            action = ref1[n];
            action.status = true;
          }
          return status;
        } else if (index === 0) {
          return (ref2 = state.parent_levels[0].context) != null ? (ref3 = ref2.output) != null ? ref3.status : void 0 : void 0;
        } else {
          l = state.parent_levels[0].history.length;
          if (index < 0) {
            index = l + index;
          }
          return (ref4 = state.parent_levels[0].history[index]) != null ? ref4.status : void 0;
        }
      };
    }
  };
  Object.defineProperties(obj, state.properties);
  reg = registry.registry({});
  Object.defineProperty(obj.registry, 'get', {
    get: function() {
      return function(name, handler) {
        return reg.get(...arguments);
      };
    }
  });
  Object.defineProperty(obj.registry, 'register', {
    get: function() {
      return function(name, handler) {
        reg.register(...arguments);
        return proxy;
      };
    }
  });
  Object.defineProperty(obj.registry, 'registered', {
    get: function() {
      return function(name, handler) {
        return reg.registered(...arguments);
      };
    }
  });
  Object.defineProperty(obj.registry, 'unregister', {
    get: function() {
      return function(name, handler) {
        reg.unregister(...arguments);
        return proxy;
      };
    }
  });
  // Todo: remove
  if (obj.options.ssh) {
    if (obj.options.ssh.config) {
      obj.store['nikita:ssh:connection'] = obj.options.ssh;
      delete obj.options.ssh;
    } else {
      if (!obj.options.no_ssh) {
        proxy.ssh.open(obj.options.ssh);
      }
    }
  }
  return proxy;
};

module.exports.cascade = {
  after: false,
  before: false,
  callback: false,
  cascade: true,
  cwd: true,
  debug: true,
  depth: null,
  disabled: false,
  handler: false,
  header: null,
  log: true,
  once: false,
  relax: false,
  shy: false,
  sleep: false,
  ssh: true,
  stdout: true,
  stderr: true,
  sudo: true,
  tolerant: false
};

// ## Helper functions
state_create_level = function() {
  var level;
  return level = {
    error: void 0,
    history: [],
    // current:
    //   options: {}
    //   status: undefined
    //   output: null
    //   args: null
    todos: [],
    throw_if_error: true
  };
};

// Called after next and promise
state_reset_level = function(level) {
  level.error = void 0;
  level.history = [];
  return level.throw_if_error = true;
};

// ## Dependencies
registry = require('./registry');

each = require('each');

mixme = require('mixme');

path = require('path');

util = require('util');

array = require('./misc/array');

promise = require('./misc/promise');

conditions = require('./misc/conditions');

string = require('./misc/string');

({EventEmitter} = require('events'));
