// Generated by CoffeeScript 2.3.2
var array, path, registry;

registry = require('../registry');

array = require('../misc/array');

path = require('path');

module.exports = function(action_global, _arguments, action_name) {
  var __argument, __arguments, action, actions, args, i, j, k, l, len, len1, len2, len3, m, middleware, n, newaction, newactions, o, opt, option, v;
  if (_arguments.length === 0) {
    _arguments = [{}];
  }
// Convert every argument to an array
  for (i = l = 0, len = _arguments.length; l < len; i = ++l) {
    args = _arguments[i];
    if (!Array.isArray(args)) {
      _arguments[i] = [args];
    }
  }
  if (Array.isArray(action_name)) {
    // Get middleware
    middleware = action_global.registry.get(action_name) || registry.get(action_name);
  }
  // Multiply arguments
  actions = null;
  for (i = m = 0, len1 = _arguments.length; m < len1; i = ++m) {
    __arguments = _arguments[i];
    newactions = (function() {
      var len2, n, results;
      results = [];
      for (j = n = 0, len2 = __arguments.length; n < len2; j = ++n) {
        __argument = __arguments[j];
        if (i === 0) {
          results.push([[middleware, __argument]]);
        } else {
          results.push((function() {
            var len3, o, results1;
            results1 = [];
            for (i = o = 0, len3 = actions.length; o < len3; i = ++o) {
              action = actions[i];
              results1.push([...action, __argument]);
            }
            return results1;
          })());
        }
      }
      return results;
    })();
    actions = array.flatten(newactions, 0);
  }
  // Load module
  if (!middleware) {
    for (n = 0, len2 = actions.length; n < len2; n++) {
      action = actions[n];
      middleware = null;
      for (o = 0, len3 = action.length; o < len3; o++) {
        option = action[o];
        if (typeof option === 'string') {
          middleware = option;
          if (option.substr(0, 1) === '.') {
            middleware = path.resolve(process.cwd(), option);
          }
          middleware = require.main.require(middleware);
        }
      }
      if (middleware) {
        action.unshift(middleware);
      }
    }
  }
  // Build actions
  actions = (function() {
    var len4, len5, p, q, results;
    results = [];
    for (p = 0, len4 = actions.length; p < len4; p++) {
      action = actions[p];
      newaction = {};
      for (q = 0, len5 = action.length; q < len5; q++) {
        opt = action[q];
        if (action == null) {
          continue;
        }
        if (typeof opt === 'string') {
          if (!newaction.argument) {
            opt = {
              argument: opt
            };
          } else {
            throw Error('Invalid option: encountered a string while argument is already defined');
          }
        }
        if (typeof opt === 'function') {
          // todo: handler could be registed later by an external module,
          // in such case, the user provided function should be interpreted
          // as a callback
          if (!newaction.handler) {
            opt = {
              handler: opt
            };
          } else if (!newaction.callback) {
            opt = {
              callback: opt
            };
          } else {
            throw Error('Invalid option: encountered a function while both handler and callback options are defined.');
          }
        }
        if (typeof opt !== 'object') {
          opt = {
            argument: opt
          };
        }
        for (k in opt) {
          v = opt[k];
          if (newaction[k] !== void 0 && v === void 0) {
            continue;
          }
          newaction[k] = v;
        }
      }
      results.push(newaction);
    }
    return results;
  })();
  // Normalize
  actions = (function() {
    var len4, p, results;
    results = [];
    for (p = 0, len4 = actions.length; p < len4; p++) {
      action = actions[p];
      if (action_name) {
        action.action = action_name;
      }
      if (!Array.isArray(action.action)) {
        action.action = [action.action];
      }
      if (action.once === true) {
        action.once = ['handler'];
      }
      if (action.once === false) {
        delete action.once;
      }
      if (Array.isArray(action.once)) {
        action.once = action.once.sort();
      }
      if (Array.isArray(action.once)) {
        action.once = action.once.sort();
      }
      results.push(action);
    }
    return results;
  })();
  return actions;
};
