// Generated by CoffeeScript 2.5.0
// # `nikita.log.stream`

// Write log to custom destinations in a user provided format.

// ## Options

// * `stream` (WritableStream)   
//   Destination to which data is written.
// * `serializer` (object)   
//   An object of key value pairs where keys are the event types and the value is a
//   function which must be implemented to serialize the information.

// Global options can be alternatively set with the "log_stream" property.

// ## Source Code
var fs, mustache, path;

module.exports = {
  ssh: false,
  handler: function({options}) {
    var k, ref, v;
    // Obtains options from "log_stream" namespace
    if (options.log_stream == null) {
      options.log_stream = {};
    }
    ref = options.log_stream;
    for (k in ref) {
      v = ref[k];
      options[k] = v;
    }
    if (!options.stream) {
      // Validate options
      throw Error('Missing option: "stream"');
    }
    if (!options.serializer) {
      throw Error('Missing option: "serializer"');
    }
    // Normalize
    if (options.end == null) {
      options.end = true;
    }
    // Events
    return this.call(function() {
      var close;
      close = function() {
        return setTimeout(function() {
          if (options.end) {
            return options.stream.close();
          }
        }, 100);
      };
      this.on('lifecycle', function(log) {
        var data;
        if (!options.serializer.lifecycle) {
          return;
        }
        data = options.serializer.lifecycle(log);
        if (data != null) {
          return options.stream.write(data);
        }
      });
      this.on('text', function(log) {
        var data;
        if (!options.serializer.text) {
          return;
        }
        data = options.serializer.text(log);
        if (data != null) {
          return options.stream.write(data);
        }
      });
      this.on('header', function(log) {
        var data;
        if (!options.serializer.header) {
          return;
        }
        data = options.serializer.header(log);
        if (data != null) {
          return options.stream.write(data);
        }
      });
      this.on('stdin', function(log) {
        var data;
        if (!options.serializer.stdin) {
          return;
        }
        data = options.serializer.stdin(log);
        if (data != null) {
          return options.stream.write(data);
        }
      });
      this.on('diff', function(log) {
        var data;
        if (!options.serializer.diff) {
          return;
        }
        data = options.serializer.diff(log);
        if (data != null) {
          return options.stream.write(data);
        }
      });
      this.on('handled', function(log) {
        var data;
        if (!options.serializer.handled) {
          return;
        }
        data = options.serializer.handled(log);
        if (data != null) {
          return options.stream.write(data);
        }
      });
      this.on('stdout_stream', function(log) {
        var data;
        if (!options.serializer.stdout_stream) {
          return;
        }
        data = options.serializer.stdout_stream(log);
        if (data != null) {
          return options.stream.write(data);
        }
      });
      this.on('stderr', function(log) {
        var data;
        if (!options.serializer.stderr) {
          return;
        }
        data = options.serializer.stderr(log);
        if (data != null) {
          return options.stream.write(data);
        }
      });
      this.on('end', function(log) {
        var data;
        if (!options.serializer.end) {
          return;
        }
        data = options.serializer.end(log);
        if (data != null) {
          options.stream.write(data);
        }
        return close();
      });
      return this.on('error', function(err) {
        var data;
        if (!options.serializer.error) {
          return;
        }
        data = options.serializer.error(err);
        if (data != null) {
          options.stream.write(data);
        }
        return close();
      });
    });
  }
};

// ## Dependencies
fs = require('fs');

path = require('path');

mustache = require('mustache');
