// Generated by CoffeeScript 2.5.1
  // # `nikita.tools.gem.install`

// Install a Ruby gem.

// Ruby gems package a ruby library with a common layout. Inside gems are the 
  // following components:

// - Code (including tests and supporting utilities)
  // - Documentation
  // - gemspec

// ## Options

// * `bindir` (string)   
  //   Directory where binary files are located.
  // * `build_flags` (string)   
  //   Pass flags to the compiler.
  // * `gem_bin` (string)   
  //   Path to the gem command, default to 'gem'
  // * `name` (string)   
  //   Name of the gem, required.   
  // * `target` (string)   
  //   Install directory.
  // * `version` (string)   
  //   Version of the gem.

// ## Callback parameters

// * `err`   
  //   Error object if any.
  // * `status`   
  //   Indicate if a gem was installed.

// ## Exemples

// Install a gem from its name and version:

// ```js
  // require('nikita')
  // .tools.rubygems.install({
  //   name: 'json',
  //   version: '2.1.0',
  // }, function(err, {status}){
  //   console.log( err ? err.messgage : 'Gem installed: ' + status);
  // });
  // ```

// Install a gem from a local file:

// ```js
  // require('nikita')
  // .tools.rubygems.install({
  //   source: '/path/to/json-2.1.0.gem',
  // }, function(err, {status}){
  //   console.log( err ? err.messgage : 'Gem installed: ' + status);
  // });
  // ```

// Install gems from a glob expressoin:

// ```js
  // require('nikita')
  // .tools.rubygems.install({
  //   source: '/path/to/*.gem',
  // }, function(err, {status}){
  //   console.log( err ? err.messgage : 'Gem installed: ' + status);
  // });
  // ```

// ## Source code
var path, semver, string,
  indexOf = [].indexOf;

module.exports = function({options}) {
  var base, current_gems, k, name1, ref, ssh, v;
  this.log({
    message: "Entering rubygem.install",
    level: 'DEBUG',
    module: 'nikita/lib/tools/rubygem/install'
  });
  // SSH connection
  ssh = this.ssh(options.ssh);
  // Global Options
  if (options.ruby == null) {
    options.ruby = {};
  }
  ref = options.ruby;
  for (k in ref) {
    v = ref[k];
    if (options[k] == null) {
      options[k] = v;
    }
  }
  if (options.gem_bin == null) {
    options.gem_bin = 'gem';
  }
  if (options.gems == null) {
    options.gems = {};
  }
  if (options.name) {
    if ((base = options.gems)[name1 = options.name] == null) {
      base[name1] = options.version;
    }
  }
  if (options.sources == null) {
    options.sources = [];
  }
  current_gems = {};
  this.system.execute({
    cmd: `${options.gem_bin} list --versions`,
    shy: true,
    bash: options.bash
  }, function(err, {stdout}) {
    var i, len, line, name, ref1, results, version;
    ref1 = string.lines(stdout);
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      line = ref1[i];
      if (line.trim() === '') {
        continue;
      }
      [name, version] = line.match(/(.*?)(?:$| \((?:default:\s+)?([\d\., ]+)\))/).slice(1, 4);
      results.push(current_gems[name] = version.split(', '));
    }
    return results;
  });
  this.call({
    if: options.source
  }, function(_, callback) {
    return this.file.glob(options.source, function(err, {files}) {
      if (err) {
        return callback(err);
      }
      options.source = files.filter(function(source) {
        var current_filenames, filename, n;
        filename = path.basename(source);
        current_filenames = (function() {
          var results;
          results = [];
          for (n in current_gems) {
            v = current_gems[n];
            results.push(`${n}-${v}.gem`);
          }
          return results;
        })();
        if (indexOf.call(current_filenames, filename) < 0) {
          return true;
        }
      });
      return callback();
    });
  });
  this.call(function() {
    var is_version_matching, name, ref1, results, version;
    ref1 = options.gems;
    results = [];
    for (name in ref1) {
      version = ref1[name];
      if (!current_gems[name]) {
        // Install if Gem isnt yet there
        continue;
      }
      // Install if a version is demanded and no installed versio satisfy it
      is_version_matching = current_gems[name].some(function(current_version) {
        return semver.satisfies(version, current_version);
      });
      if (version && !is_version_matching) {
        continue;
      }
      results.push(delete options.gems[name]);
    }
    return results;
  });
  this.call(function() {
    return {
      if: options.sources.length
    };
  }, function() {
    var source;
    return this.system.execute({
      if: options.sources.length,
      cmd: ((function() {
        var i, len, ref1, results;
        ref1 = options.sources;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          source = ref1[i];
          results.push([`${options.gem_bin}`, "install", options.bindir ? `--bindir '${options.bindir}'` : void 0, options.target ? `--install-dir '${options.target}'` : void 0, options.source ? `--local '${options.source}'` : void 0, options.build_flags ? "--build-flags options.build_flags" : void 0].join(' '));
        }
        return results;
      })()).join('\n'),
      code: [0, 2],
      bash: options.bash
    });
  });
  return this.call(function() {
    var name, version;
    return this.system.execute({
      if: Object.keys(options.gems).length,
      cmd: ((function() {
        var ref1, results;
        ref1 = options.gems;
        results = [];
        for (name in ref1) {
          version = ref1[name];
          results.push([`${options.gem_bin}`, "install", `${options.name}`, options.bindir ? `--bindir '${options.bindir}'` : void 0, options.target ? `--install-dir '${options.target}'` : void 0, options.version ? `--version '${options.version}'` : void 0, options.build_flags ? "--build-flags options.build_flags" : void 0].join(' '));
        }
        return results;
      })()).join('\n'),
      code: [0, 2],
      bash: options.bash
    });
  });
};


// ## Dependencies
path = require('path');

semver = require('semver');

string = require('@nikitajs/core/lib/misc/string');
