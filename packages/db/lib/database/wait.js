// Generated by CoffeeScript 2.5.1
// # `nikita.db.database.wait`

// Wait for the creation of a database.

// ## Options

// * `admin_username`   
//   The login of the database administrator.   
// * `admin_password`   
//   The password of the database administrator.   
// * `database` (Array or String)   
//   The database name to check for existance.   
// * `engine`   
//   The engine type, can be MySQL or PostgreSQL, required.   
// * `host`   
//   The hostname of the database.   
// * `port`   
//   Port to the associated database.   
// * `user` Array or String   
//   Contains  user(s) to add to the database, optional.   

// ## Create Database example

// ```js
// require('nikita')
// .database.db.wait({
//   admin_username: 'test',
//   admin_password: 'test',
//   database: 'my_db'
// }, function(err, {status}){
//   console.info(err ? err.message : 'Did database existed initially: ' + !status);
// });
// ```

// ## Source Code
var cmd;

module.exports = function({metadata, options}) {
  var k, ref, ref1, v;
  // Import options from `options.db`
  if (options.db == null) {
    options.db = {};
  }
  ref = options.db;
  for (k in ref) {
    v = ref[k];
    if (options[k] == null) {
      options[k] = v;
    }
  }
  if (options.database == null) {
    options.database = metadata.argument;
  }
  // Deprecation
  if (options.engine === 'postgres') {
    console.log('Deprecated Value: options "postgres" is deprecated in favor of "postgresql"');
    options.engine = 'postgresql';
  }
  // Defines and check the engine type
  options.engine = options.engine.toLowerCase();
  if ((ref1 = options.engine) !== 'mariadb' && ref1 !== 'mysql' && ref1 !== 'postgresql') {
    throw Error(`Unsupport engine: ${JSON.stringify(options.engine)}`);
  }
  // Command
  return this.wait.execute({
    cmd: (function() {
      switch (options.engine) {
        case 'mariadb':
        case 'mysql':
          return cmd(options, {
            database: null
          }, "show databases") + ` | grep '${options.database}'`;
        case 'postgresql':
          return cmd(options, {
            database: null
          }, null) + ` -l | cut -d \\| -f 1 | grep -qw '${options.database}'`;
      }
    })()
  });
};

// ## Dependencies
({cmd} = require('../query'));
