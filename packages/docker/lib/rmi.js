// Generated by CoffeeScript 2.3.2
// # `nikita.docker_rmi`

// Remove images. All container using image should be stopped to delete it unless
// force options is set.

// ## Options

// * `boot2docker` (boolean)   
//   Whether to use boot2docker or not, default to false.
// * `image` (string)   
//   Name of the image, required.
// * `machine` (string)   
//   Name of the docker-machine, required if docker-machine installed.
// * `no_prune` (boolean)   
//   Do not delete untagged parents.

// ## Callback parameters

// * `err`   
//   Error object if any.
// * `status`   
//   True if image was removed.

// ## Source Code
var docker, util;

module.exports = function({options}) {
  var cmd_images, cmd_rmi, i, k, len, opt, ref, ref1, v;
  this.log({
    message: "Entering Docker rmi",
    level: 'DEBUG',
    module: 'nikita/lib/docker/rmi'
  });
  // Global options
  if (options.docker == null) {
    options.docker = {};
  }
  ref = options.docker;
  for (k in ref) {
    v = ref[k];
    if (options[k] == null) {
      options[k] = v;
    }
  }
  if (options.image == null) {
    // Validate parameters and madatory conditions
    throw Error('Missing image parameter');
  }
  cmd_images = 'images';
  cmd_images += ` | grep '${options.image} '`;
  if (options.tag != null) {
    cmd_images += ` | grep ' ${options.tag} '`;
  }
  cmd_rmi = 'rmi';
  ref1 = ['force', 'no_prune'];
  for (i = 0, len = ref1.length; i < len; i++) {
    opt = ref1[i];
    if (options[opt] != null) {
      cmd_rmi += ` --${opt.replace('_', '-')}`;
    }
  }
  cmd_rmi += ` ${options.image}`;
  if (options.tag != null) {
    cmd_rmi += `:${options.tag}`;
  }
  this.system.execute({
    cmd: docker.wrap(options, cmd_images),
    code_skipped: 1
  }, docker.callback);
  return this.system.execute({
    cmd: docker.wrap(options, cmd_rmi),
    if: function() {
      return this.status(-1);
    }
  }, docker.callback);
};

// ## Modules Dependencies
docker = require('@nikitajs/core/lib/misc/docker');

util = require('util');
