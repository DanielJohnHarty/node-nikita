// Generated by CoffeeScript 2.3.2
// # `nikita.ipa.user`

// Add or modify a user in FreeIPA.

// ## Options

// * `attributes` (object, required)    
// * `referer` (string, ?required)   
//   The HTTP referer of the request, required unless provided inside the `Referer`
//   header.
// * `uid` (string, required)   
//   UID of the user to add, same as the username.
// * `username` (string, required)   
//   UID of the user to add, alias of `uid`.
// * `url` (string, required)    
//   The IPA HTTP endpoint, for example "https://ipa.domain.com/ipa/session/json"

// ## Exemple

// ```js
// require('nikita')
// .ipa.user.add({
//   uid: 'someone',
//   attributes: {},
//   referer: 'https://my.domain.com',
//   url: 'https://ipa.domain.com/ipa/session/json',
//   principal: 'admin@DOMAIN.COM',
//   password: 'XXXXXX'
// }, function(){
//   console.info(err ? err.message : status ?
//     'User was updated' : 'User was already set')
// })
// ```
var diff, string;

module.exports = function({options}, callback) {
  var attributes, base, base1, exists, status;
  if (options.uid == null) {
    options.uid = options.username;
  }
  if (options.http_headers == null) {
    options.http_headers = {};
  }
  if ((base = options.http_headers)['Accept'] == null) {
    base['Accept'] = 'applicaton/json';
  }
  if ((base1 = options.http_headers)['Referer'] == null) {
    base1['Referer'] = options.referer;
  }
  if (!options.uid) {
    throw Error(`Required Option: uid is required, got ${options.uid}`);
  }
  if (!options.url) {
    throw Error(`Required Option: url is required, got ${options.url}`);
  }
  if (!options.principal) {
    throw Error(`Required Option: principal is required, got ${options.principal}`);
  }
  if (!options.password) {
    throw Error(`Required Option: password is required, got ${options.password}`);
  }
  if (!options.http_headers['Referer']) {
    throw Error(`Required Option: referer is required, got ${options.http_headers['Referer']}`);
  }
  attributes = {};
  exists = false;
  status = false;
  this.call(function({}, callback) {
    return this.ipa.user.show(options, {
      uid: options.uid,
      relax: true
    }, function(err, {result}) {
      if (err && err.code !== 4001) {
        return callback(err);
      }
      exists = !err;
      if (!exists) {
        attributes = result;
      }
      return callback();
    });
  });
  this.call(function({}, callback) {
    return this.connection.http(options, {
      negotiate: true,
      url: options.url,
      method: 'POST',
      data: {
        method: !exists ? "user_add/1" : "user_mod/1",
        params: [[options.uid], options.attributes],
        id: 0
      },
      http_headers: options.http_headers
    }, function(err) {
      return callback(err);
    });
  });
  this.call(function({}, callback) {
    if (!exists) {
      return callback(null, true);
    }
    return this.ipa.user.show(options, {
      uid: options.uid
    }, function(err, {result}) {
      var keys;
      if (err) {
        return callback(err);
      }
      keys = diff(result, attributes);
      return callback(null, !!Object.keys(keys).length);
    });
  });
  return this.call(function() {
    return callback(null, {
      status: this.status()
    });
  });
};


// ## Dependencies
string = require('@nikitajs/core/lib/misc/string');

diff = require('object-diff');
