// Generated by CoffeeScript 2.5.0
// # `nikita.ipa.user`

// Add or modify a user in FreeIPA.

// ## Options

// * `attributes` (object, required)   
//   Attributes associated with the user to add or modify.
// * `referer` (string, ?required)   
//   The HTTP referer of the request, required unless provided inside the `Referer`
//   header.
// * `uid` (string, required)   
//   Name of the user to add, same as the username.
// * `username` (string, required)   
//   Name of the user to add, alias of `uid`.
// * `url` (string, required)    
//   The IPA HTTP endpoint, for example "https://ipa.domain.com/ipa/session/json"

// ## Exemple

// ```js
// require('nikita')
// .ipa.user({
//   uid: "someone",
//   attributes: {
//     noprivate: true,
//     gidnumber: 1000,
//     userpassword: "secret"
//   },
//   connection: {
//     referer: "https://my.domain.com",
//     url: "https://ipa.domain.com/ipa/session/json",
//     principal: "admin@DOMAIN.COM",
//     password: "mysecret"
//   }
// }, function(){
//   console.info(err ? err.message : status ?
//     "User was updated" : "User was already set")
// })
// ```

// ## Options
var diff, handler, on_options, schema, string;

on_options = function({options}) {
  if (options.uid == null) {
    options.uid = options.username;
  }
  return delete options.username;
};

// ## Schema
schema = {
  type: 'object',
  properties: {
    'uid': {
      type: 'string'
    },
    'username': {
      type: 'string'
    },
    'attributes': {
      type: 'object',
      properties: {
        'givenname': {
          type: 'string' // Firstname
        },
        'sn': {
          type: 'string' // Lastname
        },
        'mail': {
          type: 'array',
          minItems: 1,
          uniqueItems: true,
          items: {
            type: 'string'
          }
        }
      }
    },
    'connection': {
      $ref: '/nikita/connection/http'
    }
  },
  required: ['attributes', 'connection', 'uid']
};

// ## Handler
handler = function({options}, callback) {
  var base, base1;
  if ((base = options.connection).http_headers == null) {
    base.http_headers = {};
  }
  if ((base1 = options.connection.http_headers)['Referer'] == null) {
    base1['Referer'] = options.connection.referer || options.connection.url;
  }
  if (!options.connection.principal) {
    throw Error(`Required Option: principal is required, got ${options.connection.principal}`);
  }
  if (!options.connection.password) {
    throw Error(`Required Option: password is required, got ${options.connection.password}`);
  }
  this.ipa.user.exists({
    connection: options.connection,
    uid: options.uid
  });
  this.call(function({}, callback) {
    return this.connection.http(options.connection, {
      negotiate: true,
      method: 'POST',
      data: {
        method: !this.status(-1) ? 'user_add/1' : 'user_mod/1',
        params: [[options.uid], options.attributes],
        id: 0
      }
    }, function(error, {data}) {
      if (data != null ? data.error : void 0) {
        if (data.error.code === 4202) { // no modifications to be performed
          return callback(null, false);
        }
        error = Error(data.error.message);
        error.code = data.error.code;
      }
      return callback(error, true);
    });
  });
  return this.next(callback);
};

// ## Exports
module.exports = {
  handler: handler,
  on_options: on_options,
  schema: schema
};

// ## Dependencies
string = require('@nikitajs/core/lib/misc/string');

diff = require('object-diff');
