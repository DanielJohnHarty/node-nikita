// Generated by CoffeeScript 2.5.0
// # `nikita.ipa.group`

// Add or modify a group in FreeIPA.

// ## Options

// * `attributes` (object, required)   
//   Attributes associated with the group to add or modify.
// * `cn` (string, required)   
//   Name of the group to add.

// ## Exemple

// ```js
// require('nikita')
// .ipa.group({
//   cn: 'somegroup',
//   connection: {
//     url: "https://ipa.domain.com/ipa/session/json",
//     principal: "admin@DOMAIN.COM",
//     password: "mysecret"
//   }
// }, function(){
//   console.info(err ? err.message : status ?
//     'Group was updated' : 'Group was already set')
// })
// ```

// ## Schema
var diff, handler, schema, string;

schema = {
  type: 'object',
  properties: {
    'cn': {
      type: 'string'
    },
    'attributes': {
      type: 'object',
      properties: {
        'user': {
          type: 'array',
          minItems: 1,
          uniqueItems: true,
          items: {
            type: 'string'
          }
        }
      }
    },
    'connection': {
      $ref: '/nikita/connection/http'
    }
  },
  required: ['cn', 'connection']
};

// ## Handler
handler = function({options}, callback) {
  var base, base1, output;
  if (options.attributes == null) {
    options.attributes = {};
  }
  if ((base = options.connection).http_headers == null) {
    base.http_headers = {};
  }
  if ((base1 = options.connection.http_headers)['Referer'] == null) {
    base1['Referer'] = options.connection.referer || options.connection.url;
  }
  if (!options.connection.principal) {
    throw Error(`Required Option: principal is required, got ${options.connection.principal}`);
  }
  if (!options.connection.password) {
    throw Error(`Required Option: password is required, got ${options.connection.password}`);
  }
  output = {};
  this.ipa.group.exists({
    connection: options.connection,
    cn: options.cn
  });
  this.call(function({}, callback) {
    return this.connection.http(options.connection, {
      negotiate: true,
      method: 'POST',
      data: {
        method: !this.status(-1) ? "group_add/1" : "group_mod/1",
        params: [[options.cn], options.attributes],
        id: 0
      },
      http_headers: options.http_headers
    }, function(error, {data}) {
      if (data != null ? data.error : void 0) {
        if (data.error.code === 4202) { // no modifications to be performed
          return callback(null, false);
        }
        error = Error(data.error.message);
        error.code = data.error.code;
      }
      output.result = data.result.result;
      return callback(error, true);
    });
  });
  this.call({
    unless: function() {
      return this.status(-1);
    }
  }, function() {
    return this.ipa.group.show(options, {
      cn: options.cn
    }, function(err, {result}) {
      if (!err) {
        return output.result = result;
      }
    });
  });
  return this.next(function(err, {status}) {
    return callback(err, {
      status: status,
      result: output.result
    });
  });
};

// ## Export
module.exports = {
  handler: handler,
  schema: schema
};

// ## Dependencies
string = require('@nikitajs/core/lib/misc/string');

diff = require('object-diff');
